
TGR13_28_HW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e50  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08005fd8  08005fd8  00015fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  08006420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000818  200001e8  08006608  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a00  08006608  00020a00  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000223ec  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003f2b  00000000  00000000  00042604  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00012cb0  00000000  00000000  0004652f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000016a0  00000000  00000000  000591e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001b48  00000000  00000000  0005a880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b751  00000000  00000000  0005c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008668  00000000  00000000  00067b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00070181  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004efc  00000000  00000000  00070200  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  000750fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e8 	.word	0x200001e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fc0 	.word	0x08005fc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001ec 	.word	0x200001ec
 80001c4:	08005fc0 	.word	0x08005fc0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_uldivmod>:
 8000af8:	b953      	cbnz	r3, 8000b10 <__aeabi_uldivmod+0x18>
 8000afa:	b94a      	cbnz	r2, 8000b10 <__aeabi_uldivmod+0x18>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bf08      	it	eq
 8000b00:	2800      	cmpeq	r0, #0
 8000b02:	bf1c      	itt	ne
 8000b04:	f04f 31ff 	movne.w	r1, #4294967295
 8000b08:	f04f 30ff 	movne.w	r0, #4294967295
 8000b0c:	f000 b97a 	b.w	8000e04 <__aeabi_idiv0>
 8000b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b18:	f000 f806 	bl	8000b28 <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4770      	bx	lr

08000b28 <__udivmoddi4>:
 8000b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	460d      	mov	r5, r1
 8000b30:	4604      	mov	r4, r0
 8000b32:	9e08      	ldr	r6, [sp, #32]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d151      	bne.n	8000bdc <__udivmoddi4+0xb4>
 8000b38:	428a      	cmp	r2, r1
 8000b3a:	4617      	mov	r7, r2
 8000b3c:	d96d      	bls.n	8000c1a <__udivmoddi4+0xf2>
 8000b3e:	fab2 fe82 	clz	lr, r2
 8000b42:	f1be 0f00 	cmp.w	lr, #0
 8000b46:	d00b      	beq.n	8000b60 <__udivmoddi4+0x38>
 8000b48:	f1ce 0c20 	rsb	ip, lr, #32
 8000b4c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b50:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b54:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b58:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b5c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b64:	0c25      	lsrs	r5, r4, #16
 8000b66:	fbbc f8fa 	udiv	r8, ip, sl
 8000b6a:	fa1f f987 	uxth.w	r9, r7
 8000b6e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b76:	fb08 f309 	mul.w	r3, r8, r9
 8000b7a:	42ab      	cmp	r3, r5
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x6c>
 8000b7e:	19ed      	adds	r5, r5, r7
 8000b80:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b84:	f080 8123 	bcs.w	8000dce <__udivmoddi4+0x2a6>
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	f240 8120 	bls.w	8000dce <__udivmoddi4+0x2a6>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	443d      	add	r5, r7
 8000b94:	1aed      	subs	r5, r5, r3
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b9c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ba0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ba4:	fb00 f909 	mul.w	r9, r0, r9
 8000ba8:	45a1      	cmp	r9, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x98>
 8000bac:	19e4      	adds	r4, r4, r7
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 810a 	bcs.w	8000dca <__udivmoddi4+0x2a2>
 8000bb6:	45a1      	cmp	r9, r4
 8000bb8:	f240 8107 	bls.w	8000dca <__udivmoddi4+0x2a2>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	eba4 0409 	sub.w	r4, r4, r9
 8000bc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d061      	beq.n	8000c92 <__udivmoddi4+0x16a>
 8000bce:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	6034      	str	r4, [r6, #0]
 8000bd6:	6073      	str	r3, [r6, #4]
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0xc8>
 8000be0:	2e00      	cmp	r6, #0
 8000be2:	d054      	beq.n	8000c8e <__udivmoddi4+0x166>
 8000be4:	2100      	movs	r1, #0
 8000be6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bea:	4608      	mov	r0, r1
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	fab3 f183 	clz	r1, r3
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	f040 808e 	bne.w	8000d16 <__udivmoddi4+0x1ee>
 8000bfa:	42ab      	cmp	r3, r5
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xdc>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 80fa 	bhi.w	8000df8 <__udivmoddi4+0x2d0>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb65 0503 	sbc.w	r5, r5, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	46ac      	mov	ip, r5
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d03f      	beq.n	8000c92 <__udivmoddi4+0x16a>
 8000c12:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b912      	cbnz	r2, 8000c22 <__udivmoddi4+0xfa>
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c22:	fab7 fe87 	clz	lr, r7
 8000c26:	f1be 0f00 	cmp.w	lr, #0
 8000c2a:	d134      	bne.n	8000c96 <__udivmoddi4+0x16e>
 8000c2c:	1beb      	subs	r3, r5, r7
 8000c2e:	0c3a      	lsrs	r2, r7, #16
 8000c30:	fa1f fc87 	uxth.w	ip, r7
 8000c34:	2101      	movs	r1, #1
 8000c36:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c3a:	0c25      	lsrs	r5, r4, #16
 8000c3c:	fb02 3318 	mls	r3, r2, r8, r3
 8000c40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c44:	fb0c f308 	mul.w	r3, ip, r8
 8000c48:	42ab      	cmp	r3, r5
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0x134>
 8000c4c:	19ed      	adds	r5, r5, r7
 8000c4e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x132>
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	f200 80d1 	bhi.w	8000dfc <__udivmoddi4+0x2d4>
 8000c5a:	4680      	mov	r8, r0
 8000c5c:	1aed      	subs	r5, r5, r3
 8000c5e:	b2a3      	uxth	r3, r4
 8000c60:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c64:	fb02 5510 	mls	r5, r2, r0, r5
 8000c68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c6c:	fb0c fc00 	mul.w	ip, ip, r0
 8000c70:	45a4      	cmp	ip, r4
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x15c>
 8000c74:	19e4      	adds	r4, r4, r7
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x15a>
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	f200 80b8 	bhi.w	8000df2 <__udivmoddi4+0x2ca>
 8000c82:	4618      	mov	r0, r3
 8000c84:	eba4 040c 	sub.w	r4, r4, ip
 8000c88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c8c:	e79d      	b.n	8000bca <__udivmoddi4+0xa2>
 8000c8e:	4631      	mov	r1, r6
 8000c90:	4630      	mov	r0, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1ce 0420 	rsb	r4, lr, #32
 8000c9a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c9e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ca2:	fa20 f804 	lsr.w	r8, r0, r4
 8000ca6:	0c3a      	lsrs	r2, r7, #16
 8000ca8:	fa25 f404 	lsr.w	r4, r5, r4
 8000cac:	ea48 0803 	orr.w	r8, r8, r3
 8000cb0:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000cb8:	fb02 4411 	mls	r4, r2, r1, r4
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cc4:	fb01 f30c 	mul.w	r3, r1, ip
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x1bc>
 8000cd0:	19ed      	adds	r5, r5, r7
 8000cd2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cd6:	f080 808a 	bcs.w	8000dee <__udivmoddi4+0x2c6>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	f240 8087 	bls.w	8000dee <__udivmoddi4+0x2c6>
 8000ce0:	3902      	subs	r1, #2
 8000ce2:	443d      	add	r5, r7
 8000ce4:	1aeb      	subs	r3, r5, r3
 8000ce6:	fa1f f588 	uxth.w	r5, r8
 8000cea:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cee:	fb02 3310 	mls	r3, r2, r0, r3
 8000cf2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cf6:	fb00 f30c 	mul.w	r3, r0, ip
 8000cfa:	42ab      	cmp	r3, r5
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1e6>
 8000cfe:	19ed      	adds	r5, r5, r7
 8000d00:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d04:	d26f      	bcs.n	8000de6 <__udivmoddi4+0x2be>
 8000d06:	42ab      	cmp	r3, r5
 8000d08:	d96d      	bls.n	8000de6 <__udivmoddi4+0x2be>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	443d      	add	r5, r7
 8000d0e:	1aeb      	subs	r3, r5, r3
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	e78f      	b.n	8000c36 <__udivmoddi4+0x10e>
 8000d16:	f1c1 0720 	rsb	r7, r1, #32
 8000d1a:	fa22 f807 	lsr.w	r8, r2, r7
 8000d1e:	408b      	lsls	r3, r1
 8000d20:	fa05 f401 	lsl.w	r4, r5, r1
 8000d24:	ea48 0303 	orr.w	r3, r8, r3
 8000d28:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d36:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d3e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d42:	fa1f f883 	uxth.w	r8, r3
 8000d46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d4a:	fb09 f408 	mul.w	r4, r9, r8
 8000d4e:	42ac      	cmp	r4, r5
 8000d50:	fa02 f201 	lsl.w	r2, r2, r1
 8000d54:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x244>
 8000d5a:	18ed      	adds	r5, r5, r3
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	d243      	bcs.n	8000dea <__udivmoddi4+0x2c2>
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	d941      	bls.n	8000dea <__udivmoddi4+0x2c2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	441d      	add	r5, r3
 8000d6c:	1b2d      	subs	r5, r5, r4
 8000d6e:	fa1f fe8e 	uxth.w	lr, lr
 8000d72:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d76:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d7e:	fb00 f808 	mul.w	r8, r0, r8
 8000d82:	45a0      	cmp	r8, r4
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x26e>
 8000d86:	18e4      	adds	r4, r4, r3
 8000d88:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d8c:	d229      	bcs.n	8000de2 <__udivmoddi4+0x2ba>
 8000d8e:	45a0      	cmp	r8, r4
 8000d90:	d927      	bls.n	8000de2 <__udivmoddi4+0x2ba>
 8000d92:	3802      	subs	r0, #2
 8000d94:	441c      	add	r4, r3
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	eba4 0408 	sub.w	r4, r4, r8
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c6      	mov	lr, r8
 8000da6:	464d      	mov	r5, r9
 8000da8:	d315      	bcc.n	8000dd6 <__udivmoddi4+0x2ae>
 8000daa:	d012      	beq.n	8000dd2 <__udivmoddi4+0x2aa>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x29c>
 8000dae:	ebba 030e 	subs.w	r3, sl, lr
 8000db2:	eb64 0405 	sbc.w	r4, r4, r5
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40cb      	lsrs	r3, r1
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	40cc      	lsrs	r4, r1
 8000dc0:	6037      	str	r7, [r6, #0]
 8000dc2:	6074      	str	r4, [r6, #4]
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	e6f8      	b.n	8000bc0 <__udivmoddi4+0x98>
 8000dce:	4690      	mov	r8, r2
 8000dd0:	e6e0      	b.n	8000b94 <__udivmoddi4+0x6c>
 8000dd2:	45c2      	cmp	sl, r8
 8000dd4:	d2ea      	bcs.n	8000dac <__udivmoddi4+0x284>
 8000dd6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dda:	eb69 0503 	sbc.w	r5, r9, r3
 8000dde:	3801      	subs	r0, #1
 8000de0:	e7e4      	b.n	8000dac <__udivmoddi4+0x284>
 8000de2:	4628      	mov	r0, r5
 8000de4:	e7d7      	b.n	8000d96 <__udivmoddi4+0x26e>
 8000de6:	4640      	mov	r0, r8
 8000de8:	e791      	b.n	8000d0e <__udivmoddi4+0x1e6>
 8000dea:	4681      	mov	r9, r0
 8000dec:	e7be      	b.n	8000d6c <__udivmoddi4+0x244>
 8000dee:	4601      	mov	r1, r0
 8000df0:	e778      	b.n	8000ce4 <__udivmoddi4+0x1bc>
 8000df2:	3802      	subs	r0, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	e745      	b.n	8000c84 <__udivmoddi4+0x15c>
 8000df8:	4608      	mov	r0, r1
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xe6>
 8000dfc:	f1a8 0802 	sub.w	r8, r8, #2
 8000e00:	443d      	add	r5, r7
 8000e02:	e72b      	b.n	8000c5c <__udivmoddi4+0x134>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <I2Cx_Init.constprop.8>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
  i2c_handler->Init.OwnAddress1      = 0;
 8000e0a:	482a      	ldr	r0, [pc, #168]	; (8000eb4 <I2Cx_Init.constprop.8+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000e0c:	4c2a      	ldr	r4, [pc, #168]	; (8000eb8 <I2Cx_Init.constprop.8+0xb0>)
  i2c_handler->Init.OwnAddress1      = 0;
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <I2Cx_Init.constprop.8+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e10:	4d2b      	ldr	r5, [pc, #172]	; (8000ec0 <I2Cx_Init.constprop.8+0xb8>)
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e12:	4f2c      	ldr	r7, [pc, #176]	; (8000ec4 <I2Cx_Init.constprop.8+0xbc>)
  i2c_handler->Init.OwnAddress1      = 0;
 8000e14:	2600      	movs	r6, #0
 8000e16:	e884 0049 	stmia.w	r4, {r0, r3, r6}
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	60e2      	str	r2, [r4, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000e1e:	6126      	str	r6, [r4, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000e20:	6166      	str	r6, [r4, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000e22:	61e6      	str	r6, [r4, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000e24:	6226      	str	r6, [r4, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e26:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000e2e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000e30:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000e3a:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000e3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e40:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e42:	2312      	movs	r3, #18
 8000e44:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e4a:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000e4c:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e4e:	4638      	mov	r0, r7
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000e50:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e52:	f000 fa65 	bl	8001320 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e56:	a903      	add	r1, sp, #12
 8000e58:	4638      	mov	r0, r7
 8000e5a:	f000 fa61 	bl	8001320 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000e5e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e64:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e66:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e6c:	9302      	str	r3, [sp, #8]
 8000e6e:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8000e70:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000e72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e76:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000e78:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000e7a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e7e:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000e80:	4632      	mov	r2, r6
 8000e82:	210f      	movs	r1, #15
 8000e84:	2021      	movs	r0, #33	; 0x21
 8000e86:	f000 f955 	bl	8001134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000e8a:	2021      	movs	r0, #33	; 0x21
 8000e8c:	f000 f986 	bl	800119c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000e90:	4632      	mov	r2, r6
 8000e92:	210f      	movs	r1, #15
 8000e94:	2022      	movs	r0, #34	; 0x22
 8000e96:	f000 f94d 	bl	8001134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000e9a:	2022      	movs	r0, #34	; 0x22
 8000e9c:	f000 f97e 	bl	800119c <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f000 fcfc 	bl	800189e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000ea6:	4631      	mov	r1, r6
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f000 fed7 	bl	8001c5c <HAL_I2CEx_ConfigAnalogFilter>
}
 8000eae:	b009      	add	sp, #36	; 0x24
 8000eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40005800 	.word	0x40005800
 8000eb8:	200002b8 	.word	0x200002b8
 8000ebc:	00702681 	.word	0x00702681
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <BSP_LED_Toggle+0x10>)
 8000eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ece:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000ed2:	f000 bba0 	b.w	8001616 <HAL_GPIO_TogglePin>
 8000ed6:	bf00      	nop
 8000ed8:	20000000 	.word	0x20000000

08000edc <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8000edc:	f7ff bf94 	b.w	8000e08 <I2Cx_Init.constprop.8>

08000ee0 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ee0:	b510      	push	{r4, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000eea:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	9400      	str	r4, [sp, #0]
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <SENSOR_IO_Write+0x30>)
 8000efc:	f000 fd39 	bl	8001972 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000f00:	b120      	cbz	r0, 8000f0c <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8000f02:	4803      	ldr	r0, [pc, #12]	; (8000f10 <SENSOR_IO_Write+0x30>)
 8000f04:	f000 fd1c 	bl	8001940 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000f08:	f7ff ff7e 	bl	8000e08 <I2Cx_Init.constprop.8>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8000f0c:	b006      	add	sp, #24
 8000f0e:	bd10      	pop	{r4, pc}
 8000f10:	200002b8 	.word	0x200002b8

08000f14 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000f14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 8000f16:	aa06      	add	r2, sp, #24
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	2301      	movs	r3, #1
 8000f26:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000f2a:	460a      	mov	r2, r1
 8000f2c:	4601      	mov	r1, r0
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <SENSOR_IO_Read+0x38>)
 8000f30:	f000 fdd6 	bl	8001ae0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000f34:	b120      	cbz	r0, 8000f40 <SENSOR_IO_Read+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <SENSOR_IO_Read+0x38>)
 8000f38:	f000 fd02 	bl	8001940 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000f3c:	f7ff ff64 	bl	8000e08 <I2Cx_Init.constprop.8>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8000f40:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000f44:	b007      	add	sp, #28
 8000f46:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f4a:	bf00      	nop
 8000f4c:	200002b8 	.word	0x200002b8

08000f50 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f52:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000f56:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	4601      	mov	r1, r0
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <SENSOR_IO_ReadMultiple+0x2c>)
 8000f62:	f000 fdbd 	bl	8001ae0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000f66:	4604      	mov	r4, r0
 8000f68:	b120      	cbz	r0, 8000f74 <SENSOR_IO_ReadMultiple+0x24>
  HAL_I2C_DeInit(i2c_handler);
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <SENSOR_IO_ReadMultiple+0x2c>)
 8000f6c:	f000 fce8 	bl	8001940 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000f70:	f7ff ff4a 	bl	8000e08 <I2Cx_Init.constprop.8>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8000f74:	4620      	mov	r0, r4
 8000f76:	b004      	add	sp, #16
 8000f78:	bd10      	pop	{r4, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200002b8 	.word	0x200002b8

08000f80 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8000f80:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8000f82:	4c06      	ldr	r4, [pc, #24]	; (8000f9c <BSP_TSENSOR_Init+0x1c>)
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <BSP_TSENSOR_Init+0x20>)
 8000f86:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8000f88:	f7ff ffa8 	bl	8000edc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	2100      	movs	r1, #0
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	20be      	movs	r0, #190	; 0xbe
 8000f94:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8000f96:	2000      	movs	r0, #0
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000204 	.word	0x20000204
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <BSP_TSENSOR_ReadTemp+0xc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	20be      	movs	r0, #190	; 0xbe
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4718      	bx	r3
 8000fae:	bf00      	nop
 8000fb0:	20000204 	.word	0x20000204

08000fb4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8000fb4:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000fb6:	b2c4      	uxtb	r4, r0
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f7ff ffaa 	bl	8000f14 <SENSOR_IO_Read>
 8000fc0:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000fc4:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8000fc8:	4620      	mov	r0, r4
 8000fca:	2120      	movs	r1, #32
}
 8000fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000fd0:	f7ff bf86 	b.w	8000ee0 <SENSOR_IO_Write>

08000fd4 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8000fd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8000fd8:	fa5f f880 	uxtb.w	r8, r0
 8000fdc:	aa01      	add	r2, sp, #4
 8000fde:	2302      	movs	r3, #2
 8000fe0:	21b2      	movs	r1, #178	; 0xb2
 8000fe2:	4640      	mov	r0, r8
 8000fe4:	f7ff ffb4 	bl	8000f50 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000fe8:	2135      	movs	r1, #53	; 0x35
 8000fea:	4640      	mov	r0, r8
 8000fec:	f7ff ff92 	bl	8000f14 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000ff0:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000ff2:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000ff6:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000ffa:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000ffc:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001000:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8001004:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8001006:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001008:	2304      	movs	r3, #4
 800100a:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 800100e:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001010:	21bc      	movs	r1, #188	; 0xbc
 8001012:	4640      	mov	r0, r8
 8001014:	f7ff ff9c 	bl	8000f50 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001018:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800101c:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001020:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001024:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001028:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800102c:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800102e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001032:	21aa      	movs	r1, #170	; 0xaa
 8001034:	2302      	movs	r3, #2
 8001036:	4640      	mov	r0, r8
 8001038:	f7ff ff8a 	bl	8000f50 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800103c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001040:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001044:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001048:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800104a:	b21b      	sxth	r3, r3
 800104c:	1bdb      	subs	r3, r3, r7
  T0_degC = T0_degC_x8_u16 >> 3;
 800104e:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	1bab      	subs	r3, r5, r6
 8001056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105a:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800105e:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001064:	1be4      	subs	r4, r4, r7
 8001066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106a:	ee07 4a10 	vmov	s14, r4
 800106e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001072:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001076:	ee07 6a90 	vmov	s15, r6
 800107a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 800107e:	ee36 0a80 	vadd.f32	s0, s13, s0
 8001082:	b002      	add	sp, #8
 8001084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_InitTick+0x2c>)
{
 800108c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001094:	fbb0 f0f3 	udiv	r0, r0, r3
 8001098:	f000 f88c 	bl	80011b4 <HAL_SYSTICK_Config>
 800109c:	4604      	mov	r4, r0
 800109e:	b938      	cbnz	r0, 80010b0 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80010a0:	4602      	mov	r2, r0
 80010a2:	4629      	mov	r1, r5
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f844 	bl	8001134 <HAL_NVIC_SetPriority>
 80010ac:	4620      	mov	r0, r4
 80010ae:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80010b0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	20000014 	.word	0x20000014

080010b8 <HAL_Init>:
{
 80010b8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f000 f828 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff ffe1 	bl	8001088 <HAL_InitTick>
 80010c6:	4604      	mov	r4, r0
 80010c8:	b918      	cbnz	r0, 80010d2 <HAL_Init+0x1a>
    HAL_MspInit();
 80010ca:	f002 ff23 	bl	8003f14 <HAL_MspInit>
}
 80010ce:	4620      	mov	r0, r4
 80010d0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80010d2:	2401      	movs	r4, #1
 80010d4:	e7fb      	b.n	80010ce <HAL_Init+0x16>
	...

080010d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80010d8:	4a02      	ldr	r2, [pc, #8]	; (80010e4 <HAL_IncTick+0xc>)
 80010da:	6813      	ldr	r3, [r2, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000304 	.word	0x20000304

080010e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010e8:	4b01      	ldr	r3, [pc, #4]	; (80010f0 <HAL_GetTick+0x8>)
 80010ea:	6818      	ldr	r0, [r3, #0]
}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000304 	.word	0x20000304

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff fff6 	bl	80010e8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80010fe:	4605      	mov	r5, r0
  {
    wait++;
 8001100:	bf18      	it	ne
 8001102:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001104:	f7ff fff0 	bl	80010e8 <HAL_GetTick>
 8001108:	1b40      	subs	r0, r0, r5
 800110a:	4284      	cmp	r4, r0
 800110c:	d8fa      	bhi.n	8001104 <HAL_Delay+0x10>
  {
  }
}
 800110e:	bd38      	pop	{r3, r4, r5, pc}

08001110 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001112:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001114:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001118:	041b      	lsls	r3, r3, #16
 800111a:	0c1b      	lsrs	r3, r3, #16
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001120:	0200      	lsls	r0, r0, #8
 8001122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001126:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800112a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800112c:	60d3      	str	r3, [r2, #12]
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001136:	b530      	push	{r4, r5, lr}
 8001138:	68dc      	ldr	r4, [r3, #12]
 800113a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	2b04      	cmp	r3, #4
 8001146:	bf28      	it	cs
 8001148:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 0501 	mov.w	r5, #1
 8001150:	fa05 f303 	lsl.w	r3, r5, r3
 8001154:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001158:	bf8c      	ite	hi
 800115a:	3c03      	subhi	r4, #3
 800115c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115e:	4019      	ands	r1, r3
 8001160:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001162:	fa05 f404 	lsl.w	r4, r5, r4
 8001166:	3c01      	subs	r4, #1
 8001168:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800116a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	ea42 0201 	orr.w	r2, r2, r1
 8001170:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	bfaf      	iteee	ge
 8001176:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	f000 000f 	andlt.w	r0, r0, #15
 800117e:	4b06      	ldrlt	r3, [pc, #24]	; (8001198 <HAL_NVIC_SetPriority+0x64>)
 8001180:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	bfa5      	ittet	ge
 8001184:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001188:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001190:	bd30      	pop	{r4, r5, pc}
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00
 8001198:	e000ed14 	.word	0xe000ed14

0800119c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800119c:	0942      	lsrs	r2, r0, #5
 800119e:	2301      	movs	r3, #1
 80011a0:	f000 001f 	and.w	r0, r0, #31
 80011a4:	fa03 f000 	lsl.w	r0, r3, r0
 80011a8:	4b01      	ldr	r3, [pc, #4]	; (80011b0 <HAL_NVIC_EnableIRQ+0x14>)
 80011aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	3801      	subs	r0, #1
 80011b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011ba:	d20a      	bcs.n	80011d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	21f0      	movs	r1, #240	; 0xf0
 80011c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <DFSDM_GetChannelFromInstance+0x54>)
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d017      	beq.n	8001216 <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 80011e6:	3320      	adds	r3, #32
 80011e8:	4298      	cmp	r0, r3
 80011ea:	d016      	beq.n	800121a <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 80011ec:	3320      	adds	r3, #32
 80011ee:	4298      	cmp	r0, r3
 80011f0:	d015      	beq.n	800121e <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 80011f2:	3320      	adds	r3, #32
 80011f4:	4298      	cmp	r0, r3
 80011f6:	d014      	beq.n	8001222 <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80011f8:	3320      	adds	r3, #32
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d013      	beq.n	8001226 <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 80011fe:	3320      	adds	r3, #32
 8001200:	4298      	cmp	r0, r3
 8001202:	d012      	beq.n	800122a <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 8001204:	3320      	adds	r3, #32
 8001206:	4298      	cmp	r0, r3
 8001208:	d011      	beq.n	800122e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
  {
    channel = 7;
 800120a:	3320      	adds	r3, #32
 800120c:	4298      	cmp	r0, r3
 800120e:	bf0c      	ite	eq
 8001210:	2007      	moveq	r0, #7
 8001212:	2000      	movne	r0, #0
 8001214:	4770      	bx	lr
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8001216:	2000      	movs	r0, #0
 8001218:	4770      	bx	lr
    channel = 1;
 800121a:	2001      	movs	r0, #1
 800121c:	4770      	bx	lr
    channel = 2;
 800121e:	2002      	movs	r0, #2
 8001220:	4770      	bx	lr
    channel = 3;
 8001222:	2003      	movs	r0, #3
 8001224:	4770      	bx	lr
    channel = 4;
 8001226:	2004      	movs	r0, #4
 8001228:	4770      	bx	lr
    channel = 5;
 800122a:	2005      	movs	r0, #5
 800122c:	4770      	bx	lr
    channel = 6;
 800122e:	2006      	movs	r0, #6
  }

  return channel;
}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40016000 	.word	0x40016000

08001238 <HAL_DFSDM_ChannelInit>:
{
 8001238:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 800123a:	4604      	mov	r4, r0
 800123c:	2800      	cmp	r0, #0
 800123e:	d067      	beq.n	8001310 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001240:	6800      	ldr	r0, [r0, #0]
 8001242:	4d34      	ldr	r5, [pc, #208]	; (8001314 <HAL_DFSDM_ChannelInit+0xdc>)
 8001244:	f7ff ffcc 	bl	80011e0 <DFSDM_GetChannelFromInstance>
 8001248:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d15f      	bne.n	8001310 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001250:	4620      	mov	r0, r4
 8001252:	f002 fe77 	bl	8003f44 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_DFSDM_ChannelInit+0xe0>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	3201      	adds	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d119      	bne.n	8001298 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_DFSDM_ChannelInit+0xe4>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800126c:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68a1      	ldr	r1, [r4, #8]
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800127c:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800127e:	7922      	ldrb	r2, [r4, #4]
 8001280:	2a01      	cmp	r2, #1
 8001282:	d105      	bne.n	8001290 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001284:	68e1      	ldr	r1, [r4, #12]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	3901      	subs	r1, #1
 800128a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800128e:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001296:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001298:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800129a:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800129c:	6803      	ldr	r3, [r0, #0]
 800129e:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 80012a2:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80012a4:	6923      	ldr	r3, [r4, #16]
 80012a6:	6802      	ldr	r2, [r0, #0]
 80012a8:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 80012aa:	69a1      	ldr	r1, [r4, #24]
 80012ac:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80012ae:	4313      	orrs	r3, r2
 80012b0:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80012b2:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80012b4:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80012b6:	f023 030f 	bic.w	r3, r3, #15
 80012ba:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80012bc:	69e3      	ldr	r3, [r4, #28]
 80012be:	6802      	ldr	r2, [r0, #0]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	4313      	orrs	r3, r2
 80012c4:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80012c6:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80012c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80012ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80012cc:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 80012d0:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80012d2:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80012d4:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80012d6:	430b      	orrs	r3, r1
 80012d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012dc:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80012de:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80012e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80012e8:	6843      	ldr	r3, [r0, #4]
 80012ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012f4:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80012f6:	6803      	ldr	r3, [r0, #0]
 80012f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fc:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80012fe:	2301      	movs	r3, #1
 8001300:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001304:	f7ff ff6c 	bl	80011e0 <DFSDM_GetChannelFromInstance>
 8001308:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 800130c:	2000      	movs	r0, #0
 800130e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001310:	2001      	movs	r0, #1
}
 8001312:	bd38      	pop	{r3, r4, r5, pc}
 8001314:	20000208 	.word	0x20000208
 8001318:	20000228 	.word	0x20000228
 800131c:	40016000 	.word	0x40016000

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001324:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001328:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80014d4 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800132c:	4c67      	ldr	r4, [pc, #412]	; (80014cc <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001330:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	9a01      	ldr	r2, [sp, #4]
 8001334:	40da      	lsrs	r2, r3
 8001336:	d102      	bne.n	800133e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001338:	b005      	add	sp, #20
 800133a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800133e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001340:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001342:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001344:	ea12 0e06 	ands.w	lr, r2, r6
 8001348:	f000 80b1 	beq.w	80014ae <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800134c:	684a      	ldr	r2, [r1, #4]
 800134e:	f022 0710 	bic.w	r7, r2, #16
 8001352:	2f02      	cmp	r7, #2
 8001354:	d116      	bne.n	8001384 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001356:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800135a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800135e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001362:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001366:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800136a:	f04f 0c0f 	mov.w	ip, #15
 800136e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001372:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001376:	690d      	ldr	r5, [r1, #16]
 8001378:	fa05 f50a 	lsl.w	r5, r5, sl
 800137c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001380:	f8c9 5020 	str.w	r5, [r9, #32]
 8001384:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001388:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800138a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800138e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001392:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001394:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001398:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013a2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80013a8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ac:	d811      	bhi.n	80013d2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80013ae:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013b0:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b4:	68cf      	ldr	r7, [r1, #12]
 80013b6:	fa07 f70c 	lsl.w	r7, r7, ip
 80013ba:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80013be:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80013c0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013c2:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013c6:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80013ca:	409f      	lsls	r7, r3
 80013cc:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80013d0:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013d2:	f1ba 0f03 	cmp.w	sl, #3
 80013d6:	d107      	bne.n	80013e8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80013d8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013da:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013de:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80013e2:	409f      	lsls	r7, r3
 80013e4:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80013e6:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80013e8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013ea:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ec:	688e      	ldr	r6, [r1, #8]
 80013ee:	fa06 f60c 	lsl.w	r6, r6, ip
 80013f2:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80013f4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f6:	00d5      	lsls	r5, r2, #3
 80013f8:	d559      	bpl.n	80014ae <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80013fe:	f045 0501 	orr.w	r5, r5, #1
 8001402:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001406:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800140a:	f023 0603 	bic.w	r6, r3, #3
 800140e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001412:	f005 0501 	and.w	r5, r5, #1
 8001416:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800141a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800141c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001420:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001422:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001424:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001428:	270f      	movs	r7, #15
 800142a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800142e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001432:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001436:	d03c      	beq.n	80014b2 <HAL_GPIO_Init+0x192>
 8001438:	4d25      	ldr	r5, [pc, #148]	; (80014d0 <HAL_GPIO_Init+0x1b0>)
 800143a:	42a8      	cmp	r0, r5
 800143c:	d03b      	beq.n	80014b6 <HAL_GPIO_Init+0x196>
 800143e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001442:	42a8      	cmp	r0, r5
 8001444:	d039      	beq.n	80014ba <HAL_GPIO_Init+0x19a>
 8001446:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800144a:	42a8      	cmp	r0, r5
 800144c:	d037      	beq.n	80014be <HAL_GPIO_Init+0x19e>
 800144e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001452:	42a8      	cmp	r0, r5
 8001454:	d035      	beq.n	80014c2 <HAL_GPIO_Init+0x1a2>
 8001456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800145a:	42a8      	cmp	r0, r5
 800145c:	d033      	beq.n	80014c6 <HAL_GPIO_Init+0x1a6>
 800145e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001462:	42a8      	cmp	r0, r5
 8001464:	bf14      	ite	ne
 8001466:	2507      	movne	r5, #7
 8001468:	2506      	moveq	r5, #6
 800146a:	fa05 f50c 	lsl.w	r5, r5, ip
 800146e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001470:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001472:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001474:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001478:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800147a:	bf54      	ite	pl
 800147c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800147e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001482:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001484:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001486:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001488:	bf54      	ite	pl
 800148a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800148c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001490:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001492:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001494:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001496:	bf54      	ite	pl
 8001498:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800149a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800149e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80014a0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a2:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80014a4:	bf54      	ite	pl
 80014a6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80014a8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80014ac:	60e5      	str	r5, [r4, #12]
    position++;
 80014ae:	3301      	adds	r3, #1
 80014b0:	e73f      	b.n	8001332 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014b2:	2500      	movs	r5, #0
 80014b4:	e7d9      	b.n	800146a <HAL_GPIO_Init+0x14a>
 80014b6:	2501      	movs	r5, #1
 80014b8:	e7d7      	b.n	800146a <HAL_GPIO_Init+0x14a>
 80014ba:	2502      	movs	r5, #2
 80014bc:	e7d5      	b.n	800146a <HAL_GPIO_Init+0x14a>
 80014be:	2503      	movs	r5, #3
 80014c0:	e7d3      	b.n	800146a <HAL_GPIO_Init+0x14a>
 80014c2:	2504      	movs	r5, #4
 80014c4:	e7d1      	b.n	800146a <HAL_GPIO_Init+0x14a>
 80014c6:	2505      	movs	r5, #5
 80014c8:	e7cf      	b.n	800146a <HAL_GPIO_Init+0x14a>
 80014ca:	bf00      	nop
 80014cc:	40010400 	.word	0x40010400
 80014d0:	48000400 	.word	0x48000400
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80014d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80014dc:	4c47      	ldr	r4, [pc, #284]	; (80015fc <HAL_GPIO_DeInit+0x124>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80014de:	f8df a124 	ldr.w	sl, [pc, #292]	; 8001604 <HAL_GPIO_DeInit+0x12c>
 80014e2:	f8df b124 	ldr.w	fp, [pc, #292]	; 8001608 <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00u;
 80014e6:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80014e8:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80014ec:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != 0x00u)
 80014f0:	fa31 f203 	lsrs.w	r2, r1, r3
 80014f4:	d102      	bne.n	80014fc <HAL_GPIO_DeInit+0x24>
      }
    }

    position++;
  }
}
 80014f6:	b003      	add	sp, #12
 80014f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80014fc:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent != 0x00u)
 8001500:	ea11 0206 	ands.w	r2, r1, r6
 8001504:	9201      	str	r2, [sp, #4]
 8001506:	d06a      	beq.n	80015de <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001508:	6807      	ldr	r7, [r0, #0]
 800150a:	005a      	lsls	r2, r3, #1
 800150c:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001510:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001514:	4317      	orrs	r7, r2
 8001516:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800151a:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800151c:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8001520:	f003 0e07 	and.w	lr, r3, #7
 8001524:	463d      	mov	r5, r7
 8001526:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800152a:	270f      	movs	r7, #15
 800152c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001530:	ea25 0e0e 	bic.w	lr, r5, lr
 8001534:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001538:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800153c:	43d2      	mvns	r2, r2
 800153e:	ea0e 0e02 	and.w	lr, lr, r2
 8001542:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001546:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800154a:	43f6      	mvns	r6, r6
 800154c:	ea0e 0e06 	and.w	lr, lr, r6
 8001550:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001554:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8001558:	ea02 020e 	and.w	r2, r2, lr
 800155c:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800155e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001560:	4016      	ands	r6, r2
 8001562:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001564:	f023 0603 	bic.w	r6, r3, #3
 8001568:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800156c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001570:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001574:	68b2      	ldr	r2, [r6, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001576:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800157a:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800157e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001582:	ea02 0c07 	and.w	ip, r2, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001586:	d02c      	beq.n	80015e2 <HAL_GPIO_DeInit+0x10a>
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_GPIO_DeInit+0x128>)
 800158a:	4290      	cmp	r0, r2
 800158c:	d02b      	beq.n	80015e6 <HAL_GPIO_DeInit+0x10e>
 800158e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001592:	4290      	cmp	r0, r2
 8001594:	d029      	beq.n	80015ea <HAL_GPIO_DeInit+0x112>
 8001596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800159a:	4290      	cmp	r0, r2
 800159c:	d027      	beq.n	80015ee <HAL_GPIO_DeInit+0x116>
 800159e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015a2:	4290      	cmp	r0, r2
 80015a4:	d025      	beq.n	80015f2 <HAL_GPIO_DeInit+0x11a>
 80015a6:	4550      	cmp	r0, sl
 80015a8:	d025      	beq.n	80015f6 <HAL_GPIO_DeInit+0x11e>
 80015aa:	4558      	cmp	r0, fp
 80015ac:	bf0c      	ite	eq
 80015ae:	2206      	moveq	r2, #6
 80015b0:	2207      	movne	r2, #7
 80015b2:	fa02 f20e 	lsl.w	r2, r2, lr
 80015b6:	4594      	cmp	ip, r2
 80015b8:	d111      	bne.n	80015de <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80015ba:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 80015bc:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80015be:	ea22 0707 	bic.w	r7, r2, r7
 80015c2:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 80015c4:	6822      	ldr	r2, [r4, #0]
 80015c6:	43ed      	mvns	r5, r5
 80015c8:	402a      	ands	r2, r5
 80015ca:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80015cc:	6862      	ldr	r2, [r4, #4]
 80015ce:	402a      	ands	r2, r5
 80015d0:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80015d2:	68a2      	ldr	r2, [r4, #8]
 80015d4:	402a      	ands	r2, r5
 80015d6:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80015d8:	68e2      	ldr	r2, [r4, #12]
 80015da:	4015      	ands	r5, r2
 80015dc:	60e5      	str	r5, [r4, #12]
    position++;
 80015de:	3301      	adds	r3, #1
 80015e0:	e786      	b.n	80014f0 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80015e2:	2200      	movs	r2, #0
 80015e4:	e7e5      	b.n	80015b2 <HAL_GPIO_DeInit+0xda>
 80015e6:	2201      	movs	r2, #1
 80015e8:	e7e3      	b.n	80015b2 <HAL_GPIO_DeInit+0xda>
 80015ea:	2202      	movs	r2, #2
 80015ec:	e7e1      	b.n	80015b2 <HAL_GPIO_DeInit+0xda>
 80015ee:	2203      	movs	r2, #3
 80015f0:	e7df      	b.n	80015b2 <HAL_GPIO_DeInit+0xda>
 80015f2:	2204      	movs	r2, #4
 80015f4:	e7dd      	b.n	80015b2 <HAL_GPIO_DeInit+0xda>
 80015f6:	2205      	movs	r2, #5
 80015f8:	e7db      	b.n	80015b2 <HAL_GPIO_DeInit+0xda>
 80015fa:	bf00      	nop
 80015fc:	40010400 	.word	0x40010400
 8001600:	48000400 	.word	0x48000400
 8001604:	48001400 	.word	0x48001400
 8001608:	48001800 	.word	0x48001800

0800160c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	b10a      	cbz	r2, 8001612 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160e:	6181      	str	r1, [r0, #24]
 8001610:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001612:	6281      	str	r1, [r0, #40]	; 0x28
 8001614:	4770      	bx	lr

08001616 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001616:	6943      	ldr	r3, [r0, #20]
 8001618:	4059      	eors	r1, r3
 800161a:	6141      	str	r1, [r0, #20]
 800161c:	4770      	bx	lr

0800161e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800161e:	6803      	ldr	r3, [r0, #0]
 8001620:	699a      	ldr	r2, [r3, #24]
 8001622:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001624:	bf44      	itt	mi
 8001626:	2200      	movmi	r2, #0
 8001628:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800162a:	699a      	ldr	r2, [r3, #24]
 800162c:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800162e:	bf5e      	ittt	pl
 8001630:	699a      	ldrpl	r2, [r3, #24]
 8001632:	f042 0201 	orrpl.w	r2, r2, #1
 8001636:	619a      	strpl	r2, [r3, #24]
 8001638:	4770      	bx	lr

0800163a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800163a:	b530      	push	{r4, r5, lr}
 800163c:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800163e:	6805      	ldr	r5, [r0, #0]
 8001640:	4323      	orrs	r3, r4
 8001642:	0d64      	lsrs	r4, r4, #21
 8001644:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001648:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800164c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001650:	6868      	ldr	r0, [r5, #4]
 8001652:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001656:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800165a:	4319      	orrs	r1, r3
 800165c:	f044 0403 	orr.w	r4, r4, #3
 8001660:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001664:	ea20 0404 	bic.w	r4, r0, r4
 8001668:	4321      	orrs	r1, r4
 800166a:	6069      	str	r1, [r5, #4]
 800166c:	bd30      	pop	{r4, r5, pc}

0800166e <I2C_WaitOnFlagUntilTimeout>:
{
 800166e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001672:	9f06      	ldr	r7, [sp, #24]
 8001674:	4604      	mov	r4, r0
 8001676:	4688      	mov	r8, r1
 8001678:	4616      	mov	r6, r2
 800167a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800167c:	6822      	ldr	r2, [r4, #0]
 800167e:	6993      	ldr	r3, [r2, #24]
 8001680:	ea38 0303 	bics.w	r3, r8, r3
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	42b3      	cmp	r3, r6
 800168c:	d002      	beq.n	8001694 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800168e:	2000      	movs	r0, #0
}
 8001690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001694:	1c6b      	adds	r3, r5, #1
 8001696:	d0f2      	beq.n	800167e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001698:	f7ff fd26 	bl	80010e8 <HAL_GetTick>
 800169c:	1bc0      	subs	r0, r0, r7
 800169e:	4285      	cmp	r5, r0
 80016a0:	d301      	bcc.n	80016a6 <I2C_WaitOnFlagUntilTimeout+0x38>
 80016a2:	2d00      	cmp	r5, #0
 80016a4:	d1ea      	bne.n	800167c <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016a8:	f043 0320 	orr.w	r3, r3, #32
 80016ac:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016ae:	2320      	movs	r3, #32
 80016b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80016ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80016be:	2001      	movs	r0, #1
 80016c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016c4 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016c4:	6803      	ldr	r3, [r0, #0]
{
 80016c6:	b570      	push	{r4, r5, r6, lr}
 80016c8:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016ca:	6998      	ldr	r0, [r3, #24]
 80016cc:	f010 0010 	ands.w	r0, r0, #16
{
 80016d0:	460d      	mov	r5, r1
 80016d2:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016d4:	d116      	bne.n	8001704 <I2C_IsAcknowledgeFailed+0x40>
 80016d6:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80016d8:	1c69      	adds	r1, r5, #1
 80016da:	d014      	beq.n	8001706 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016dc:	f7ff fd04 	bl	80010e8 <HAL_GetTick>
 80016e0:	1b80      	subs	r0, r0, r6
 80016e2:	4285      	cmp	r5, r0
 80016e4:	d300      	bcc.n	80016e8 <I2C_IsAcknowledgeFailed+0x24>
 80016e6:	b96d      	cbnz	r5, 8001704 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016ea:	f043 0320 	orr.w	r3, r3, #32
 80016ee:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016f0:	2320      	movs	r3, #32
 80016f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80016fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001700:	2001      	movs	r0, #1
}
 8001702:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	6999      	ldr	r1, [r3, #24]
 8001708:	068a      	lsls	r2, r1, #26
 800170a:	d5e5      	bpl.n	80016d8 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800170c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800170e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001710:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001712:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001714:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001716:	f7ff ff82 	bl	800161e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800171a:	6822      	ldr	r2, [r4, #0]
 800171c:	6853      	ldr	r3, [r2, #4]
 800171e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001722:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001726:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001730:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001738:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 800173c:	e7db      	b.n	80016f6 <I2C_IsAcknowledgeFailed+0x32>

0800173e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800173e:	b570      	push	{r4, r5, r6, lr}
 8001740:	4604      	mov	r4, r0
 8001742:	460d      	mov	r5, r1
 8001744:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	079b      	lsls	r3, r3, #30
 800174c:	d501      	bpl.n	8001752 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800174e:	2000      	movs	r0, #0
 8001750:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001752:	4632      	mov	r2, r6
 8001754:	4629      	mov	r1, r5
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff ffb4 	bl	80016c4 <I2C_IsAcknowledgeFailed>
 800175c:	b9a0      	cbnz	r0, 8001788 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800175e:	1c6a      	adds	r2, r5, #1
 8001760:	d0f1      	beq.n	8001746 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001762:	f7ff fcc1 	bl	80010e8 <HAL_GetTick>
 8001766:	1b80      	subs	r0, r0, r6
 8001768:	4285      	cmp	r5, r0
 800176a:	d301      	bcc.n	8001770 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800176c:	2d00      	cmp	r5, #0
 800176e:	d1ea      	bne.n	8001746 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001770:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001772:	f043 0320 	orr.w	r3, r3, #32
 8001776:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001778:	2320      	movs	r3, #32
 800177a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800177e:	2300      	movs	r3, #0
 8001780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001784:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001788:	2001      	movs	r0, #1
}
 800178a:	bd70      	pop	{r4, r5, r6, pc}

0800178c <I2C_RequestMemoryWrite>:
{
 800178c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800178e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001790:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <I2C_RequestMemoryWrite+0x60>)
 8001794:	9300      	str	r3, [sp, #0]
{
 8001796:	4605      	mov	r5, r0
 8001798:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800179a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179e:	b2fa      	uxtb	r2, r7
 80017a0:	f7ff ff4b 	bl	800163a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017a4:	4632      	mov	r2, r6
 80017a6:	9908      	ldr	r1, [sp, #32]
 80017a8:	4628      	mov	r0, r5
 80017aa:	f7ff ffc8 	bl	800173e <I2C_WaitOnTXISFlagUntilTimeout>
 80017ae:	b110      	cbz	r0, 80017b6 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
}
 80017b2:	b003      	add	sp, #12
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017b6:	2f01      	cmp	r7, #1
 80017b8:	682b      	ldr	r3, [r5, #0]
 80017ba:	d10c      	bne.n	80017d6 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017bc:	b2e4      	uxtb	r4, r4
 80017be:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80017c0:	9b08      	ldr	r3, [sp, #32]
 80017c2:	9600      	str	r6, [sp, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	4628      	mov	r0, r5
 80017ca:	f7ff ff50 	bl	800166e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80017ce:	3000      	adds	r0, #0
 80017d0:	bf18      	it	ne
 80017d2:	2001      	movne	r0, #1
 80017d4:	e7ed      	b.n	80017b2 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017d6:	0a22      	lsrs	r2, r4, #8
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017da:	9908      	ldr	r1, [sp, #32]
 80017dc:	4632      	mov	r2, r6
 80017de:	4628      	mov	r0, r5
 80017e0:	f7ff ffad 	bl	800173e <I2C_WaitOnTXISFlagUntilTimeout>
 80017e4:	2800      	cmp	r0, #0
 80017e6:	d1e3      	bne.n	80017b0 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017e8:	682b      	ldr	r3, [r5, #0]
 80017ea:	e7e7      	b.n	80017bc <I2C_RequestMemoryWrite+0x30>
 80017ec:	80002000 	.word	0x80002000

080017f0 <I2C_RequestMemoryRead>:
{
 80017f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80017f4:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <I2C_RequestMemoryRead+0x60>)
 80017f8:	9300      	str	r3, [sp, #0]
{
 80017fa:	4605      	mov	r5, r0
 80017fc:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80017fe:	2300      	movs	r3, #0
 8001800:	b2fa      	uxtb	r2, r7
 8001802:	f7ff ff1a 	bl	800163a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001806:	4632      	mov	r2, r6
 8001808:	9908      	ldr	r1, [sp, #32]
 800180a:	4628      	mov	r0, r5
 800180c:	f7ff ff97 	bl	800173e <I2C_WaitOnTXISFlagUntilTimeout>
 8001810:	b110      	cbz	r0, 8001818 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8001812:	2001      	movs	r0, #1
}
 8001814:	b003      	add	sp, #12
 8001816:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001818:	2f01      	cmp	r7, #1
 800181a:	682b      	ldr	r3, [r5, #0]
 800181c:	d10c      	bne.n	8001838 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800181e:	b2e4      	uxtb	r4, r4
 8001820:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001822:	9b08      	ldr	r3, [sp, #32]
 8001824:	9600      	str	r6, [sp, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	2140      	movs	r1, #64	; 0x40
 800182a:	4628      	mov	r0, r5
 800182c:	f7ff ff1f 	bl	800166e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001830:	3000      	adds	r0, #0
 8001832:	bf18      	it	ne
 8001834:	2001      	movne	r0, #1
 8001836:	e7ed      	b.n	8001814 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001838:	0a22      	lsrs	r2, r4, #8
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800183c:	9908      	ldr	r1, [sp, #32]
 800183e:	4632      	mov	r2, r6
 8001840:	4628      	mov	r0, r5
 8001842:	f7ff ff7c 	bl	800173e <I2C_WaitOnTXISFlagUntilTimeout>
 8001846:	2800      	cmp	r0, #0
 8001848:	d1e3      	bne.n	8001812 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800184a:	682b      	ldr	r3, [r5, #0]
 800184c:	e7e7      	b.n	800181e <I2C_RequestMemoryRead+0x2e>
 800184e:	bf00      	nop
 8001850:	80002000 	.word	0x80002000

08001854 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	4604      	mov	r4, r0
 8001858:	460d      	mov	r5, r1
 800185a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	069b      	lsls	r3, r3, #26
 8001862:	d501      	bpl.n	8001868 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001864:	2000      	movs	r0, #0
 8001866:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001868:	4632      	mov	r2, r6
 800186a:	4629      	mov	r1, r5
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff ff29 	bl	80016c4 <I2C_IsAcknowledgeFailed>
 8001872:	b990      	cbnz	r0, 800189a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001874:	f7ff fc38 	bl	80010e8 <HAL_GetTick>
 8001878:	1b80      	subs	r0, r0, r6
 800187a:	4285      	cmp	r5, r0
 800187c:	d301      	bcc.n	8001882 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800187e:	2d00      	cmp	r5, #0
 8001880:	d1ec      	bne.n	800185c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001882:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800188a:	2320      	movs	r3, #32
 800188c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001890:	2300      	movs	r3, #0
 8001892:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001896:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
}
 800189c:	bd70      	pop	{r4, r5, r6, pc}

0800189e <HAL_I2C_Init>:
{
 800189e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80018a0:	4604      	mov	r4, r0
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d04a      	beq.n	800193c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80018aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018ae:	b91b      	cbnz	r3, 80018b8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80018b0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80018b4:	f002 fb78 	bl	8003fa8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80018b8:	2324      	movs	r3, #36	; 0x24
 80018ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80018be:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018c0:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018ca:	6862      	ldr	r2, [r4, #4]
 80018cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018d2:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018d4:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018de:	d124      	bne.n	800192a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018e4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018e6:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018e8:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018ea:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80018ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018f2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018fc:	6922      	ldr	r2, [r4, #16]
 80018fe:	430a      	orrs	r2, r1
 8001900:	69a1      	ldr	r1, [r4, #24]
 8001902:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001906:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001908:	6a21      	ldr	r1, [r4, #32]
 800190a:	69e2      	ldr	r2, [r4, #28]
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001918:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800191a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800191e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001922:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001924:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001928:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800192a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800192e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001930:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001932:	bf04      	itt	eq
 8001934:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001938:	605a      	streq	r2, [r3, #4]
 800193a:	e7d4      	b.n	80018e6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800193c:	2001      	movs	r0, #1
}
 800193e:	bd10      	pop	{r4, pc}

08001940 <HAL_I2C_DeInit>:
{
 8001940:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001942:	4604      	mov	r4, r0
 8001944:	b198      	cbz	r0, 800196e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8001946:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001948:	2324      	movs	r3, #36	; 0x24
 800194a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800194e:	6813      	ldr	r3, [r2, #0]
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001956:	f002 fb5d 	bl	8004014 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800195a:	2000      	movs	r0, #0
 800195c:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800195e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8001962:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001966:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 800196c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800196e:	2001      	movs	r0, #1
}
 8001970:	bd10      	pop	{r4, pc}

08001972 <HAL_I2C_Mem_Write>:
{
 8001972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001976:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001978:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800197c:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800197e:	2b20      	cmp	r3, #32
{
 8001980:	4604      	mov	r4, r0
 8001982:	460f      	mov	r7, r1
 8001984:	9203      	str	r2, [sp, #12]
 8001986:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 800198a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800198e:	f040 80a5 	bne.w	8001adc <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8001992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001994:	b113      	cbz	r3, 800199c <HAL_I2C_Mem_Write+0x2a>
 8001996:	f1ba 0f00 	cmp.w	sl, #0
 800199a:	d106      	bne.n	80019aa <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800199c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
}
 80019a4:	b005      	add	sp, #20
 80019a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80019aa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	f000 8094 	beq.w	8001adc <HAL_I2C_Mem_Write+0x16a>
 80019b4:	2501      	movs	r5, #1
 80019b6:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80019ba:	f7ff fb95 	bl	80010e8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019be:	2319      	movs	r3, #25
 80019c0:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80019c2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019c4:	462a      	mov	r2, r5
 80019c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff fe4f 	bl	800166e <I2C_WaitOnFlagUntilTimeout>
 80019d0:	4681      	mov	r9, r0
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d1e5      	bne.n	80019a2 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019d6:	2321      	movs	r3, #33	; 0x21
 80019d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019dc:	2340      	movs	r3, #64	; 0x40
 80019de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80019e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80019e6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80019e8:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80019ea:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019ee:	9601      	str	r6, [sp, #4]
 80019f0:	f8cd 8000 	str.w	r8, [sp]
 80019f4:	465b      	mov	r3, fp
 80019f6:	9a03      	ldr	r2, [sp, #12]
 80019f8:	4639      	mov	r1, r7
 80019fa:	4620      	mov	r0, r4
 80019fc:	f7ff fec6 	bl	800178c <I2C_RequestMemoryWrite>
 8001a00:	b110      	cbz	r0, 8001a08 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8001a02:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001a06:	e7cc      	b.n	80019a2 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2bff      	cmp	r3, #255	; 0xff
 8001a0e:	d955      	bls.n	8001abc <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a10:	22ff      	movs	r2, #255	; 0xff
 8001a12:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a14:	9000      	str	r0, [sp, #0]
 8001a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a1a:	4639      	mov	r1, r7
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7ff fe0c 	bl	800163a <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a22:	4632      	mov	r2, r6
 8001a24:	4641      	mov	r1, r8
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff fe89 	bl	800173e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d1b8      	bne.n	80019a2 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001a38:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001a3a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001a3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001a3e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001a48:	3a01      	subs	r2, #1
 8001a4a:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a4c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001a4e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a50:	b1ab      	cbz	r3, 8001a7e <HAL_I2C_Mem_Write+0x10c>
 8001a52:	b9a2      	cbnz	r2, 8001a7e <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a54:	9600      	str	r6, [sp, #0]
 8001a56:	4643      	mov	r3, r8
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff fe07 	bl	800166e <I2C_WaitOnFlagUntilTimeout>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d19e      	bne.n	80019a2 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2bff      	cmp	r3, #255	; 0xff
 8001a6a:	d92f      	bls.n	8001acc <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a6c:	22ff      	movs	r2, #255	; 0xff
 8001a6e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a70:	9000      	str	r0, [sp, #0]
 8001a72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a76:	4639      	mov	r1, r7
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7ff fdde 	bl	800163a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001a7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1cd      	bne.n	8001a22 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a86:	4632      	mov	r2, r6
 8001a88:	4641      	mov	r1, r8
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f7ff fee2 	bl	8001854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d186      	bne.n	80019a2 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	2120      	movs	r1, #32
 8001a98:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001aa0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001aa4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ab2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ab6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001aba:	e773      	b.n	80019a4 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001abc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001abe:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001ac0:	b292      	uxth	r2, r2
 8001ac2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	e7a6      	b.n	8001a1a <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8001acc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ace:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	e7cc      	b.n	8001a76 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8001adc:	2002      	movs	r0, #2
 8001ade:	e761      	b.n	80019a4 <HAL_I2C_Mem_Write+0x32>

08001ae0 <HAL_I2C_Mem_Read>:
{
 8001ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001aea:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aec:	2b20      	cmp	r3, #32
{
 8001aee:	4604      	mov	r4, r0
 8001af0:	460f      	mov	r7, r1
 8001af2:	9203      	str	r2, [sp, #12]
 8001af4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001af8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afc:	f040 80a9 	bne.w	8001c52 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8001b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b02:	b113      	cbz	r3, 8001b0a <HAL_I2C_Mem_Read+0x2a>
 8001b04:	f1ba 0f00 	cmp.w	sl, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001b10:	2001      	movs	r0, #1
}
 8001b12:	b005      	add	sp, #20
 8001b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001b18:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	f000 8098 	beq.w	8001c52 <HAL_I2C_Mem_Read+0x172>
 8001b22:	2501      	movs	r5, #1
 8001b24:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001b28:	f7ff fade 	bl	80010e8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b2c:	2319      	movs	r3, #25
 8001b2e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001b30:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b32:	462a      	mov	r2, r5
 8001b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff fd98 	bl	800166e <I2C_WaitOnFlagUntilTimeout>
 8001b3e:	4681      	mov	r9, r0
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d1e5      	bne.n	8001b10 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b44:	2322      	movs	r3, #34	; 0x22
 8001b46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b4a:	2340      	movs	r3, #64	; 0x40
 8001b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b52:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001b54:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001b56:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001b58:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b5c:	9601      	str	r6, [sp, #4]
 8001b5e:	f8cd 8000 	str.w	r8, [sp]
 8001b62:	465b      	mov	r3, fp
 8001b64:	9a03      	ldr	r2, [sp, #12]
 8001b66:	4639      	mov	r1, r7
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f7ff fe41 	bl	80017f0 <I2C_RequestMemoryRead>
 8001b6e:	b110      	cbz	r0, 8001b76 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8001b70:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001b74:	e7cc      	b.n	8001b10 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_I2C_Mem_Read+0x178>)
 8001b7e:	d958      	bls.n	8001c32 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b80:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001b82:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b84:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001b8a:	4639      	mov	r1, r7
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f7ff fd54 	bl	800163a <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b92:	9600      	str	r6, [sp, #0]
 8001b94:	4643      	mov	r3, r8
 8001b96:	2200      	movs	r2, #0
 8001b98:	2104      	movs	r1, #4
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f7ff fd67 	bl	800166e <I2C_WaitOnFlagUntilTimeout>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d1b5      	bne.n	8001b10 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ba4:	6822      	ldr	r2, [r4, #0]
 8001ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ba8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001baa:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001bae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001bb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001bbe:	3a01      	subs	r2, #1
 8001bc0:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bc2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001bc4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bc6:	b1ab      	cbz	r3, 8001bf4 <HAL_I2C_Mem_Read+0x114>
 8001bc8:	b9a2      	cbnz	r2, 8001bf4 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bca:	9600      	str	r6, [sp, #0]
 8001bcc:	4643      	mov	r3, r8
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff fd4c 	bl	800166e <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d19a      	bne.n	8001b10 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2bff      	cmp	r3, #255	; 0xff
 8001be0:	d92f      	bls.n	8001c42 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001be2:	22ff      	movs	r2, #255	; 0xff
 8001be4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001be6:	9000      	str	r0, [sp, #0]
 8001be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bec:	4639      	mov	r1, r7
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fd23 	bl	800163a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001bf4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ca      	bne.n	8001b92 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bfc:	4632      	mov	r2, r6
 8001bfe:	4641      	mov	r1, r8
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7ff fe27 	bl	8001854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d182      	bne.n	8001b10 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	2120      	movs	r1, #32
 8001c0e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001c16:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001c1a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001c28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c2c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001c30:	e76f      	b.n	8001b12 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001c32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c34:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001c36:	b292      	uxth	r2, r2
 8001c38:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	e7a3      	b.n	8001b8a <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8001c42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c44:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001c46:	b292      	uxth	r2, r2
 8001c48:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	e7cc      	b.n	8001bec <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8001c52:	2002      	movs	r0, #2
 8001c54:	e75d      	b.n	8001b12 <HAL_I2C_Mem_Read+0x32>
 8001c56:	bf00      	nop
 8001c58:	80002400 	.word	0x80002400

08001c5c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	2a20      	cmp	r2, #32
{
 8001c64:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	d11d      	bne.n	8001ca4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c68:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d019      	beq.n	8001ca4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c70:	2324      	movs	r3, #36	; 0x24
 8001c72:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c76:	6803      	ldr	r3, [r0, #0]
 8001c78:	681c      	ldr	r4, [r3, #0]
 8001c7a:	f024 0401 	bic.w	r4, r4, #1
 8001c7e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c80:	681c      	ldr	r4, [r3, #0]
 8001c82:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001c86:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c88:	681c      	ldr	r4, [r3, #0]
 8001c8a:	4321      	orrs	r1, r4
 8001c8c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	f041 0101 	orr.w	r1, r1, #1
 8001c94:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c96:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001c98:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001c9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001ca4:	2002      	movs	r0, #2
  }
}
 8001ca6:	bd10      	pop	{r4, pc}

08001ca8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ca8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001caa:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001cae:	b2e4      	uxtb	r4, r4
 8001cb0:	2c20      	cmp	r4, #32
 8001cb2:	d11c      	bne.n	8001cee <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d018      	beq.n	8001cee <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbc:	2324      	movs	r3, #36	; 0x24
 8001cbe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc2:	6803      	ldr	r3, [r0, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ccc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cce:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cd2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cd6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ce6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001cee:	2002      	movs	r0, #2
  }
}
 8001cf0:	bd10      	pop	{r4, pc}

08001cf2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cf6:	4604      	mov	r4, r0
{
 8001cf8:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d074      	beq.n	8001de8 <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cfe:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001d02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d06:	b91b      	cbnz	r3, 8001d10 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d08:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d0c:	f002 faae 	bl	800426c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d10:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d12:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8001d14:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d18:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8001d1c:	f001 fcab 	bl	8003676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	466e      	mov	r6, sp
 8001d24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d2e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001d32:	f104 0804 	add.w	r8, r4, #4
 8001d36:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001d3a:	6820      	ldr	r0, [r4, #0]
 8001d3c:	f001 fc6c 	bl	8003618 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d40:	2100      	movs	r1, #0
 8001d42:	6820      	ldr	r0, [r4, #0]
 8001d44:	f001 fc9d 	bl	8003682 <USB_SetCurrentMode>
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	4623      	mov	r3, r4
 8001d4e:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d52:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d54:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8001d56:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d5a:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8001d5e:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8001d60:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8001d62:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d66:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d6a:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d6c:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d6e:	6518      	str	r0, [r3, #80]	; 0x50
 8001d70:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 8001d74:	d1ef      	bne.n	8001d56 <HAL_PCD_Init+0x64>
 8001d76:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d78:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8001d7a:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8001d7e:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8001d80:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 8001d82:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d86:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d8a:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d8e:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d92:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 8001d96:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 8001d9a:	d1ee      	bne.n	8001d7a <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9e:	466e      	mov	r6, sp
 8001da0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001da6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001daa:	e886 0003 	stmia.w	r6, {r0, r1}
 8001dae:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001db2:	6820      	ldr	r0, [r4, #0]
 8001db4:	f001 fca6 	bl	8003704 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8001db8:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001dba:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001dbe:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d102      	bne.n	8001dce <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f000 f80f 	bl	8001dec <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8001dce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d102      	bne.n	8001dda <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f000 f81c 	bl	8001e12 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001dda:	6820      	ldr	r0, [r4, #0]
 8001ddc:	f001 fd2e 	bl	800383c <USB_DevDisconnect>

  return HAL_OK;
 8001de0:	2000      	movs	r0, #0
}
 8001de2:	b00a      	add	sp, #40	; 0x28
 8001de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001de8:	2001      	movs	r0, #1
 8001dea:	e7fa      	b.n	8001de2 <HAL_PCD_Init+0xf0>

08001dec <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dec:	6802      	ldr	r2, [r0, #0]
{
 8001dee:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8001df0:	2101      	movs	r1, #1
 8001df2:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001df6:	2000      	movs	r0, #0
 8001df8:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001dfc:	6993      	ldr	r3, [r2, #24]
 8001dfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e02:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e04:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	f043 0303 	orr.w	r3, r3, #3
 8001e0e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001e10:	4770      	bx	lr

08001e12 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e12:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8001e1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8001e22:	2000      	movs	r0, #0
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e28:	4a02      	ldr	r2, [pc, #8]	; (8001e34 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4770      	bx	lr
 8001e34:	40007000 	.word	0x40007000

08001e38 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <HAL_PWREx_GetVoltageRange+0xc>)
 8001e3a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001e3c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40007000 	.word	0x40007000

08001e48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e4a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e4c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e50:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e54:	d11c      	bne.n	8001e90 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e56:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001e5a:	d015      	beq.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e68:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001e6a:	6811      	ldr	r1, [r2, #0]
 8001e6c:	2232      	movs	r2, #50	; 0x32
 8001e6e:	434a      	muls	r2, r1
 8001e70:	490f      	ldr	r1, [pc, #60]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001e72:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e76:	4619      	mov	r1, r3
 8001e78:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e7a:	6958      	ldr	r0, [r3, #20]
 8001e7c:	0540      	lsls	r0, r0, #21
 8001e7e:	d500      	bpl.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001e80:	b922      	cbnz	r2, 8001e8c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e82:	694b      	ldr	r3, [r1, #20]
 8001e84:	055b      	lsls	r3, r3, #21
 8001e86:	d40d      	bmi.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e88:	2000      	movs	r0, #0
 8001e8a:	4770      	bx	lr
        wait_loop_index--;
 8001e8c:	3a01      	subs	r2, #1
 8001e8e:	e7f4      	b.n	8001e7a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e90:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e94:	bf1f      	itttt	ne
 8001e96:	681a      	ldrne	r2, [r3, #0]
 8001e98:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001e9c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001ea0:	601a      	strne	r2, [r3, #0]
 8001ea2:	e7f1      	b.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001ea4:	2003      	movs	r0, #3
}
 8001ea6:	4770      	bx	lr
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	20000014 	.word	0x20000014
 8001eb0:	000f4240 	.word	0x000f4240

08001eb4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001eb4:	4a02      	ldr	r2, [pc, #8]	; (8001ec0 <HAL_PWREx_EnableVddUSB+0xc>)
 8001eb6:	6853      	ldr	r3, [r2, #4]
 8001eb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ebc:	6053      	str	r3, [r2, #4]
 8001ebe:	4770      	bx	lr
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec8:	9d06      	ldr	r5, [sp, #24]
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460f      	mov	r7, r1
 8001ece:	4616      	mov	r6, r2
 8001ed0:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001ed2:	6821      	ldr	r1, [r4, #0]
 8001ed4:	688a      	ldr	r2, [r1, #8]
 8001ed6:	423a      	tst	r2, r7
 8001ed8:	bf14      	ite	ne
 8001eda:	2201      	movne	r2, #1
 8001edc:	2200      	moveq	r2, #0
 8001ede:	42b2      	cmp	r2, r6
 8001ee0:	d102      	bne.n	8001ee8 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001ee2:	2000      	movs	r0, #0
}
 8001ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001ee8:	1c6b      	adds	r3, r5, #1
 8001eea:	d0f3      	beq.n	8001ed4 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eec:	f7ff f8fc 	bl	80010e8 <HAL_GetTick>
 8001ef0:	eba0 0008 	sub.w	r0, r0, r8
 8001ef4:	4285      	cmp	r5, r0
 8001ef6:	d301      	bcc.n	8001efc <QSPI_WaitFlagStateUntilTimeout+0x38>
 8001ef8:	2d00      	cmp	r5, #0
 8001efa:	d1ea      	bne.n	8001ed2 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001efc:	2304      	movs	r3, #4
 8001efe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001f02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f10 <HAL_QSPI_Init>:
{
 8001f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff f8e8 	bl	80010e8 <HAL_GetTick>
 8001f18:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8001f1a:	2c00      	cmp	r4, #0
 8001f1c:	d049      	beq.n	8001fb2 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8001f1e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d047      	beq.n	8001fb6 <HAL_QSPI_Init+0xa6>
 8001f26:	2301      	movs	r3, #1
 8001f28:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001f2c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001f30:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001f34:	b93a      	cbnz	r2, 8001f46 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8001f36:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f002 f880 	bl	8004040 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8001f40:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f44:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001f46:	6820      	ldr	r0, [r4, #0]
 8001f48:	68a1      	ldr	r1, [r4, #8]
 8001f4a:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001f4e:	3901      	subs	r1, #1
 8001f50:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001f54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f58:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	462b      	mov	r3, r5
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff ffae 	bl	8001ec4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001f68:	b9f0      	cbnz	r0, 8001fa8 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8001f6a:	6822      	ldr	r2, [r4, #0]
 8001f6c:	6865      	ldr	r5, [r4, #4]
 8001f6e:	6811      	ldr	r1, [r2, #0]
 8001f70:	68e3      	ldr	r3, [r4, #12]
 8001f72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001f76:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001f7a:	f021 0110 	bic.w	r1, r1, #16
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001f82:	69a1      	ldr	r1, [r4, #24]
 8001f84:	6963      	ldr	r3, [r4, #20]
 8001f86:	6855      	ldr	r5, [r2, #4]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6921      	ldr	r1, [r4, #16]
 8001f8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001f90:	490a      	ldr	r1, [pc, #40]	; (8001fbc <HAL_QSPI_Init+0xac>)
 8001f92:	4029      	ands	r1, r5
 8001f94:	430b      	orrs	r3, r1
 8001f96:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001fa0:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001fa2:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8001fa4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001fae:	b003      	add	sp, #12
 8001fb0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	e7fb      	b.n	8001fae <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	e7f9      	b.n	8001fae <HAL_QSPI_Init+0x9e>
 8001fba:	bf00      	nop
 8001fbc:	ffe0f8fe 	.word	0xffe0f8fe

08001fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fc2:	4d1e      	ldr	r5, [pc, #120]	; (800203c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001fc4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001fc6:	00da      	lsls	r2, r3, #3
{
 8001fc8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fca:	d518      	bpl.n	8001ffe <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fcc:	f7ff ff34 	bl	8001e38 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fd0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001fd4:	d123      	bne.n	800201e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fd6:	2c80      	cmp	r4, #128	; 0x80
 8001fd8:	d929      	bls.n	800202e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fda:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fdc:	bf8c      	ite	hi
 8001fde:	2002      	movhi	r0, #2
 8001fe0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe2:	4a17      	ldr	r2, [pc, #92]	; (8002040 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001fe4:	6813      	ldr	r3, [r2, #0]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	4303      	orrs	r3, r0
 8001fec:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fee:	6813      	ldr	r3, [r2, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001ff4:	1a18      	subs	r0, r3, r0
 8001ff6:	bf18      	it	ne
 8001ff8:	2001      	movne	r0, #1
 8001ffa:	b003      	add	sp, #12
 8001ffc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	65ab      	str	r3, [r5, #88]	; 0x58
 8002006:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002010:	f7ff ff12 	bl	8001e38 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002014:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201a:	65ab      	str	r3, [r5, #88]	; 0x58
 800201c:	e7d8      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800201e:	2c80      	cmp	r4, #128	; 0x80
 8002020:	d807      	bhi.n	8002032 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002022:	d008      	beq.n	8002036 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002024:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002028:	4258      	negs	r0, r3
 800202a:	4158      	adcs	r0, r3
 800202c:	e7d9      	b.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800202e:	2000      	movs	r0, #0
 8002030:	e7d7      	b.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002032:	2003      	movs	r0, #3
 8002034:	e7d5      	b.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002036:	2002      	movs	r0, #2
 8002038:	e7d3      	b.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	40022000 	.word	0x40022000

08002044 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002046:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002048:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800204a:	f012 020c 	ands.w	r2, r2, #12
 800204e:	d005      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x18>
 8002050:	2a0c      	cmp	r2, #12
 8002052:	d115      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002054:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002058:	2901      	cmp	r1, #1
 800205a:	d118      	bne.n	800208e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800205c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800205e:	4820      	ldr	r0, [pc, #128]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002060:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002062:	bf55      	itete	pl
 8002064:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002068:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800206a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800206e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002072:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002076:	b382      	cbz	r2, 80020da <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002078:	2a0c      	cmp	r2, #12
 800207a:	d009      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x4c>
 800207c:	2000      	movs	r0, #0
  return sysclockfreq;
 800207e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002080:	2a04      	cmp	r2, #4
 8002082:	d029      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x94>
 8002084:	2a08      	cmp	r2, #8
 8002086:	4817      	ldr	r0, [pc, #92]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002088:	bf18      	it	ne
 800208a:	2000      	movne	r0, #0
 800208c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800208e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002090:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002092:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002094:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002098:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 800209c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x6c>
 80020a4:	2903      	cmp	r1, #3
 80020a6:	d012      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80020ae:	e003      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020b4:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020b8:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ba:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020be:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80020c2:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020c4:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80020c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80020cc:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ce:	68d9      	ldr	r1, [r3, #12]
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020d2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80020d6:	e7ef      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80020da:	4770      	bx	lr
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08006134 	.word	0x08006134
 80020e4:	007a1200 	.word	0x007a1200
 80020e8:	00f42400 	.word	0x00f42400

080020ec <HAL_RCC_OscConfig>:
{
 80020ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80020f0:	4605      	mov	r5, r0
 80020f2:	b918      	cbnz	r0, 80020fc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80020f4:	2001      	movs	r0, #1
}
 80020f6:	b003      	add	sp, #12
 80020f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fc:	4ca5      	ldr	r4, [pc, #660]	; (8002394 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020fe:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002100:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002102:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002104:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002106:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800210e:	d53c      	bpl.n	800218a <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002110:	b11e      	cbz	r6, 800211a <HAL_RCC_OscConfig+0x2e>
 8002112:	2e0c      	cmp	r6, #12
 8002114:	d163      	bne.n	80021de <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002116:	2f01      	cmp	r7, #1
 8002118:	d161      	bne.n	80021de <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	0798      	lsls	r0, r3, #30
 800211e:	d502      	bpl.n	8002126 <HAL_RCC_OscConfig+0x3a>
 8002120:	69ab      	ldr	r3, [r5, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0e6      	beq.n	80020f4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	6a28      	ldr	r0, [r5, #32]
 800212a:	0719      	lsls	r1, r3, #28
 800212c:	bf56      	itet	pl
 800212e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002132:	6823      	ldrmi	r3, [r4, #0]
 8002134:	091b      	lsrpl	r3, r3, #4
 8002136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213a:	4283      	cmp	r3, r0
 800213c:	d23a      	bcs.n	80021b4 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800213e:	f7ff ff3f 	bl	8001fc0 <RCC_SetFlashLatencyFromMSIRange>
 8002142:	2800      	cmp	r0, #0
 8002144:	d1d6      	bne.n	80020f4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6023      	str	r3, [r4, #0]
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	6a2a      	ldr	r2, [r5, #32]
 8002152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002156:	4313      	orrs	r3, r2
 8002158:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800215a:	6863      	ldr	r3, [r4, #4]
 800215c:	69ea      	ldr	r2, [r5, #28]
 800215e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002166:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002168:	f7ff ff6c 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 800216c:	68a3      	ldr	r3, [r4, #8]
 800216e:	4a8a      	ldr	r2, [pc, #552]	; (8002398 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	40d8      	lsrs	r0, r3
 800217c:	4b87      	ldr	r3, [pc, #540]	; (800239c <HAL_RCC_OscConfig+0x2b0>)
 800217e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002180:	2000      	movs	r0, #0
 8002182:	f7fe ff81 	bl	8001088 <HAL_InitTick>
        if(status != HAL_OK)
 8002186:	2800      	cmp	r0, #0
 8002188:	d1b5      	bne.n	80020f6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	682b      	ldr	r3, [r5, #0]
 800218c:	07d8      	lsls	r0, r3, #31
 800218e:	d45d      	bmi.n	800224c <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002190:	682b      	ldr	r3, [r5, #0]
 8002192:	0799      	lsls	r1, r3, #30
 8002194:	f100 809c 	bmi.w	80022d0 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002198:	682b      	ldr	r3, [r5, #0]
 800219a:	0718      	lsls	r0, r3, #28
 800219c:	f100 80d0 	bmi.w	8002340 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	682b      	ldr	r3, [r5, #0]
 80021a2:	0759      	lsls	r1, r3, #29
 80021a4:	f100 80fc 	bmi.w	80023a0 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 8165 	bne.w	800247a <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 80021b0:	2000      	movs	r0, #0
 80021b2:	e7a0      	b.n	80020f6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	6023      	str	r3, [r4, #0]
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c2:	4303      	orrs	r3, r0
 80021c4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c6:	6863      	ldr	r3, [r4, #4]
 80021c8:	69ea      	ldr	r2, [r5, #28]
 80021ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80021d2:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d4:	f7ff fef4 	bl	8001fc0 <RCC_SetFlashLatencyFromMSIRange>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d0c5      	beq.n	8002168 <HAL_RCC_OscConfig+0x7c>
 80021dc:	e78a      	b.n	80020f4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021de:	69ab      	ldr	r3, [r5, #24]
 80021e0:	b31b      	cbz	r3, 800222a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021ea:	f7fe ff7d 	bl	80010e8 <HAL_GetTick>
 80021ee:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	079a      	lsls	r2, r3, #30
 80021f4:	d511      	bpl.n	800221a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6023      	str	r3, [r4, #0]
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	6a2a      	ldr	r2, [r5, #32]
 8002202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002206:	4313      	orrs	r3, r2
 8002208:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220a:	6863      	ldr	r3, [r4, #4]
 800220c:	69ea      	ldr	r2, [r5, #28]
 800220e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002212:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002216:	6063      	str	r3, [r4, #4]
 8002218:	e7b7      	b.n	800218a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221a:	f7fe ff65 	bl	80010e8 <HAL_GetTick>
 800221e:	eba0 0008 	sub.w	r0, r0, r8
 8002222:	2802      	cmp	r0, #2
 8002224:	d9e4      	bls.n	80021f0 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8002226:	2003      	movs	r0, #3
 8002228:	e765      	b.n	80020f6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002232:	f7fe ff59 	bl	80010e8 <HAL_GetTick>
 8002236:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	079b      	lsls	r3, r3, #30
 800223c:	d5a5      	bpl.n	800218a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223e:	f7fe ff53 	bl	80010e8 <HAL_GetTick>
 8002242:	eba0 0008 	sub.w	r0, r0, r8
 8002246:	2802      	cmp	r0, #2
 8002248:	d9f6      	bls.n	8002238 <HAL_RCC_OscConfig+0x14c>
 800224a:	e7ec      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800224c:	2e08      	cmp	r6, #8
 800224e:	d003      	beq.n	8002258 <HAL_RCC_OscConfig+0x16c>
 8002250:	2e0c      	cmp	r6, #12
 8002252:	d108      	bne.n	8002266 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8002254:	2f03      	cmp	r7, #3
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	039a      	lsls	r2, r3, #14
 800225c:	d598      	bpl.n	8002190 <HAL_RCC_OscConfig+0xa4>
 800225e:	686b      	ldr	r3, [r5, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d195      	bne.n	8002190 <HAL_RCC_OscConfig+0xa4>
 8002264:	e746      	b.n	80020f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002266:	686b      	ldr	r3, [r5, #4]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d110      	bne.n	8002290 <HAL_RCC_OscConfig+0x1a4>
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002276:	f7fe ff37 	bl	80010e8 <HAL_GetTick>
 800227a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	039b      	lsls	r3, r3, #14
 8002280:	d486      	bmi.n	8002190 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002282:	f7fe ff31 	bl	80010e8 <HAL_GetTick>
 8002286:	eba0 0008 	sub.w	r0, r0, r8
 800228a:	2864      	cmp	r0, #100	; 0x64
 800228c:	d9f6      	bls.n	800227c <HAL_RCC_OscConfig+0x190>
 800228e:	e7ca      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002294:	d104      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229c:	6023      	str	r3, [r4, #0]
 800229e:	e7e6      	b.n	800226e <HAL_RCC_OscConfig+0x182>
 80022a0:	6822      	ldr	r2, [r4, #0]
 80022a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022a6:	6022      	str	r2, [r4, #0]
 80022a8:	6822      	ldr	r2, [r4, #0]
 80022aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022ae:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1e0      	bne.n	8002276 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 80022b4:	f7fe ff18 	bl	80010e8 <HAL_GetTick>
 80022b8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	0398      	lsls	r0, r3, #14
 80022be:	f57f af67 	bpl.w	8002190 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c2:	f7fe ff11 	bl	80010e8 <HAL_GetTick>
 80022c6:	eba0 0008 	sub.w	r0, r0, r8
 80022ca:	2864      	cmp	r0, #100	; 0x64
 80022cc:	d9f5      	bls.n	80022ba <HAL_RCC_OscConfig+0x1ce>
 80022ce:	e7aa      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022d0:	2e04      	cmp	r6, #4
 80022d2:	d003      	beq.n	80022dc <HAL_RCC_OscConfig+0x1f0>
 80022d4:	2e0c      	cmp	r6, #12
 80022d6:	d110      	bne.n	80022fa <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80022d8:	2f02      	cmp	r7, #2
 80022da:	d10e      	bne.n	80022fa <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	0559      	lsls	r1, r3, #21
 80022e0:	d503      	bpl.n	80022ea <HAL_RCC_OscConfig+0x1fe>
 80022e2:	68eb      	ldr	r3, [r5, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f43f af05 	beq.w	80020f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	6863      	ldr	r3, [r4, #4]
 80022ec:	692a      	ldr	r2, [r5, #16]
 80022ee:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80022f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022f6:	6063      	str	r3, [r4, #4]
 80022f8:	e74e      	b.n	8002198 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022fa:	68eb      	ldr	r3, [r5, #12]
 80022fc:	b17b      	cbz	r3, 800231e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002306:	f7fe feef 	bl	80010e8 <HAL_GetTick>
 800230a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	055a      	lsls	r2, r3, #21
 8002310:	d4eb      	bmi.n	80022ea <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002312:	f7fe fee9 	bl	80010e8 <HAL_GetTick>
 8002316:	1bc0      	subs	r0, r0, r7
 8002318:	2802      	cmp	r0, #2
 800231a:	d9f7      	bls.n	800230c <HAL_RCC_OscConfig+0x220>
 800231c:	e783      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002324:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002326:	f7fe fedf 	bl	80010e8 <HAL_GetTick>
 800232a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	055b      	lsls	r3, r3, #21
 8002330:	f57f af32 	bpl.w	8002198 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002334:	f7fe fed8 	bl	80010e8 <HAL_GetTick>
 8002338:	1bc0      	subs	r0, r0, r7
 800233a:	2802      	cmp	r0, #2
 800233c:	d9f6      	bls.n	800232c <HAL_RCC_OscConfig+0x240>
 800233e:	e772      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002340:	696b      	ldr	r3, [r5, #20]
 8002342:	b19b      	cbz	r3, 800236c <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8002344:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002350:	f7fe feca 	bl	80010e8 <HAL_GetTick>
 8002354:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002356:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800235a:	079a      	lsls	r2, r3, #30
 800235c:	f53f af20 	bmi.w	80021a0 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe fec2 	bl	80010e8 <HAL_GetTick>
 8002364:	1bc0      	subs	r0, r0, r7
 8002366:	2802      	cmp	r0, #2
 8002368:	d9f5      	bls.n	8002356 <HAL_RCC_OscConfig+0x26a>
 800236a:	e75c      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 800236c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002378:	f7fe feb6 	bl	80010e8 <HAL_GetTick>
 800237c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800237e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002382:	079b      	lsls	r3, r3, #30
 8002384:	f57f af0c 	bpl.w	80021a0 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe feae 	bl	80010e8 <HAL_GetTick>
 800238c:	1bc0      	subs	r0, r0, r7
 800238e:	2802      	cmp	r0, #2
 8002390:	d9f5      	bls.n	800237e <HAL_RCC_OscConfig+0x292>
 8002392:	e748      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
 8002394:	40021000 	.word	0x40021000
 8002398:	0800611c 	.word	0x0800611c
 800239c:	20000014 	.word	0x20000014
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023a2:	00d8      	lsls	r0, r3, #3
 80023a4:	d429      	bmi.n	80023fa <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80023ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80023b8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	4f5d      	ldr	r7, [pc, #372]	; (8002534 <HAL_RCC_OscConfig+0x448>)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	05d9      	lsls	r1, r3, #23
 80023c2:	d51d      	bpl.n	8002400 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	68ab      	ldr	r3, [r5, #8]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d12b      	bne.n	8002422 <HAL_RCC_OscConfig+0x336>
 80023ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80023d6:	f7fe fe87 	bl	80010e8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023de:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80023e4:	079b      	lsls	r3, r3, #30
 80023e6:	d542      	bpl.n	800246e <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 80023e8:	f1b8 0f00 	cmp.w	r8, #0
 80023ec:	f43f aedc 	beq.w	80021a8 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80023f8:	e6d6      	b.n	80021a8 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 80023fa:	f04f 0800 	mov.w	r8, #0
 80023fe:	e7dd      	b.n	80023bc <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002408:	f7fe fe6e 	bl	80010e8 <HAL_GetTick>
 800240c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	05da      	lsls	r2, r3, #23
 8002412:	d4d7      	bmi.n	80023c4 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002414:	f7fe fe68 	bl	80010e8 <HAL_GetTick>
 8002418:	eba0 0009 	sub.w	r0, r0, r9
 800241c:	2802      	cmp	r0, #2
 800241e:	d9f6      	bls.n	800240e <HAL_RCC_OscConfig+0x322>
 8002420:	e701      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002422:	2b05      	cmp	r3, #5
 8002424:	d106      	bne.n	8002434 <HAL_RCC_OscConfig+0x348>
 8002426:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002432:	e7ca      	b.n	80023ca <HAL_RCC_OscConfig+0x2de>
 8002434:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002440:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002444:	f022 0204 	bic.w	r2, r2, #4
 8002448:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1c2      	bne.n	80023d6 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8002450:	f7fe fe4a 	bl	80010e8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002458:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800245a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800245e:	0798      	lsls	r0, r3, #30
 8002460:	d5c2      	bpl.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fe41 	bl	80010e8 <HAL_GetTick>
 8002466:	1bc0      	subs	r0, r0, r7
 8002468:	4548      	cmp	r0, r9
 800246a:	d9f6      	bls.n	800245a <HAL_RCC_OscConfig+0x36e>
 800246c:	e6db      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe fe3b 	bl	80010e8 <HAL_GetTick>
 8002472:	1bc0      	subs	r0, r0, r7
 8002474:	4548      	cmp	r0, r9
 8002476:	d9b3      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2f4>
 8002478:	e6d5      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800247a:	2e0c      	cmp	r6, #12
 800247c:	f43f ae3a 	beq.w	80020f4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002480:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002488:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800248a:	d137      	bne.n	80024fc <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 800248c:	f7fe fe2c 	bl	80010e8 <HAL_GetTick>
 8002490:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	0199      	lsls	r1, r3, #6
 8002496:	d42b      	bmi.n	80024f0 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002498:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800249a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800249c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024a0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80024a2:	3a01      	subs	r2, #1
 80024a4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80024a8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80024aa:	0912      	lsrs	r2, r2, #4
 80024ac:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80024b0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80024b2:	0852      	lsrs	r2, r2, #1
 80024b4:	3a01      	subs	r2, #1
 80024b6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80024ba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80024bc:	0852      	lsrs	r2, r2, #1
 80024be:	3a01      	subs	r2, #1
 80024c0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80024c4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024cc:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024ce:	68e3      	ldr	r3, [r4, #12]
 80024d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80024d6:	f7fe fe07 	bl	80010e8 <HAL_GetTick>
 80024da:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	019a      	lsls	r2, r3, #6
 80024e0:	f53f ae66 	bmi.w	80021b0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fe00 	bl	80010e8 <HAL_GetTick>
 80024e8:	1b40      	subs	r0, r0, r5
 80024ea:	2802      	cmp	r0, #2
 80024ec:	d9f6      	bls.n	80024dc <HAL_RCC_OscConfig+0x3f0>
 80024ee:	e69a      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fdfa 	bl	80010e8 <HAL_GetTick>
 80024f4:	1b80      	subs	r0, r0, r6
 80024f6:	2802      	cmp	r0, #2
 80024f8:	d9cb      	bls.n	8002492 <HAL_RCC_OscConfig+0x3a6>
 80024fa:	e694      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002502:	bf02      	ittt	eq
 8002504:	68e3      	ldreq	r3, [r4, #12]
 8002506:	f023 0303 	biceq.w	r3, r3, #3
 800250a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800250c:	68e3      	ldr	r3, [r4, #12]
 800250e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002516:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002518:	f7fe fde6 	bl	80010e8 <HAL_GetTick>
 800251c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	019b      	lsls	r3, r3, #6
 8002522:	f57f ae45 	bpl.w	80021b0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7fe fddf 	bl	80010e8 <HAL_GetTick>
 800252a:	1b40      	subs	r0, r0, r5
 800252c:	2802      	cmp	r0, #2
 800252e:	d9f6      	bls.n	800251e <HAL_RCC_OscConfig+0x432>
 8002530:	e679      	b.n	8002226 <HAL_RCC_OscConfig+0x13a>
 8002532:	bf00      	nop
 8002534:	40007000 	.word	0x40007000

08002538 <HAL_RCC_ClockConfig>:
{
 8002538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800253c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800253e:	4604      	mov	r4, r0
 8002540:	b910      	cbnz	r0, 8002548 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002542:	2001      	movs	r0, #1
 8002544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4a40      	ldr	r2, [pc, #256]	; (800264c <HAL_RCC_ClockConfig+0x114>)
 800254a:	6813      	ldr	r3, [r2, #0]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	428b      	cmp	r3, r1
 8002552:	d329      	bcc.n	80025a8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	07d9      	lsls	r1, r3, #31
 8002558:	d431      	bmi.n	80025be <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255a:	6821      	ldr	r1, [r4, #0]
 800255c:	078a      	lsls	r2, r1, #30
 800255e:	d45b      	bmi.n	8002618 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4a3a      	ldr	r2, [pc, #232]	; (800264c <HAL_RCC_ClockConfig+0x114>)
 8002562:	6813      	ldr	r3, [r2, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	429e      	cmp	r6, r3
 800256a:	d35d      	bcc.n	8002628 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	f011 0f04 	tst.w	r1, #4
 8002570:	4d37      	ldr	r5, [pc, #220]	; (8002650 <HAL_RCC_ClockConfig+0x118>)
 8002572:	d164      	bne.n	800263e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	070b      	lsls	r3, r1, #28
 8002576:	d506      	bpl.n	8002586 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002578:	68ab      	ldr	r3, [r5, #8]
 800257a:	6922      	ldr	r2, [r4, #16]
 800257c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002580:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002584:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002586:	f7ff fd5d 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 800258a:	68ab      	ldr	r3, [r5, #8]
 800258c:	4a31      	ldr	r2, [pc, #196]	; (8002654 <HAL_RCC_ClockConfig+0x11c>)
 800258e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	40d8      	lsrs	r0, r3
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <HAL_RCC_ClockConfig+0x120>)
 80025a0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7fe bd70 	b.w	8001088 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	f023 0307 	bic.w	r3, r3, #7
 80025ae:	430b      	orrs	r3, r1
 80025b0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	6813      	ldr	r3, [r2, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4299      	cmp	r1, r3
 80025ba:	d1c2      	bne.n	8002542 <HAL_RCC_ClockConfig+0xa>
 80025bc:	e7ca      	b.n	8002554 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	6862      	ldr	r2, [r4, #4]
 80025c0:	4d23      	ldr	r5, [pc, #140]	; (8002650 <HAL_RCC_ClockConfig+0x118>)
 80025c2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c6:	d11b      	bne.n	8002600 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025cc:	d0b9      	beq.n	8002542 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	68ab      	ldr	r3, [r5, #8]
 80025d0:	f023 0303 	bic.w	r3, r3, #3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80025d8:	f7fe fd86 	bl	80010e8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80025e0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	68ab      	ldr	r3, [r5, #8]
 80025e4:	6862      	ldr	r2, [r4, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025ee:	d0b4      	beq.n	800255a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7fe fd7a 	bl	80010e8 <HAL_GetTick>
 80025f4:	1bc0      	subs	r0, r0, r7
 80025f6:	4540      	cmp	r0, r8
 80025f8:	d9f3      	bls.n	80025e2 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80025fa:	2003      	movs	r0, #3
}
 80025fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002600:	2a02      	cmp	r2, #2
 8002602:	d102      	bne.n	800260a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002604:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002608:	e7e0      	b.n	80025cc <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800260a:	b912      	cbnz	r2, 8002612 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800260c:	f013 0f02 	tst.w	r3, #2
 8002610:	e7dc      	b.n	80025cc <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002612:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002616:	e7d9      	b.n	80025cc <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_RCC_ClockConfig+0x118>)
 800261a:	68a0      	ldr	r0, [r4, #8]
 800261c:	6893      	ldr	r3, [r2, #8]
 800261e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002622:	4303      	orrs	r3, r0
 8002624:	6093      	str	r3, [r2, #8]
 8002626:	e79b      	b.n	8002560 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002628:	6813      	ldr	r3, [r2, #0]
 800262a:	f023 0307 	bic.w	r3, r3, #7
 800262e:	4333      	orrs	r3, r6
 8002630:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	6813      	ldr	r3, [r2, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	429e      	cmp	r6, r3
 800263a:	d182      	bne.n	8002542 <HAL_RCC_ClockConfig+0xa>
 800263c:	e796      	b.n	800256c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263e:	68ab      	ldr	r3, [r5, #8]
 8002640:	68e2      	ldr	r2, [r4, #12]
 8002642:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002646:	4313      	orrs	r3, r2
 8002648:	60ab      	str	r3, [r5, #8]
 800264a:	e793      	b.n	8002574 <HAL_RCC_ClockConfig+0x3c>
 800264c:	40022000 	.word	0x40022000
 8002650:	40021000 	.word	0x40021000
 8002654:	0800611c 	.word	0x0800611c
 8002658:	20000014 	.word	0x20000014

0800265c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x18>)
 800265e:	4a06      	ldr	r2, [pc, #24]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002666:	5cd3      	ldrb	r3, [r2, r3]
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <HAL_RCC_GetPCLK1Freq+0x20>)
 800266a:	6810      	ldr	r0, [r2, #0]
 800266c:	f003 031f 	and.w	r3, r3, #31
}
 8002670:	40d8      	lsrs	r0, r3
 8002672:	4770      	bx	lr
 8002674:	40021000 	.word	0x40021000
 8002678:	0800612c 	.word	0x0800612c
 800267c:	20000014 	.word	0x20000014

08002680 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002682:	4a06      	ldr	r2, [pc, #24]	; (800269c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800268e:	6810      	ldr	r0, [r2, #0]
 8002690:	f003 031f 	and.w	r3, r3, #31
}
 8002694:	40d8      	lsrs	r0, r3
 8002696:	4770      	bx	lr
 8002698:	40021000 	.word	0x40021000
 800269c:	0800612c 	.word	0x0800612c
 80026a0:	20000014 	.word	0x20000014

080026a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026a6:	4b45      	ldr	r3, [pc, #276]	; (80027bc <RCCEx_PLLSAI1_Config+0x118>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	f012 0f03 	tst.w	r2, #3
{
 80026ae:	4605      	mov	r5, r0
 80026b0:	460e      	mov	r6, r1
 80026b2:	461c      	mov	r4, r3
 80026b4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026b6:	d02a      	beq.n	800270e <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	4282      	cmp	r2, r0
 80026c0:	d13c      	bne.n	800273c <RCCEx_PLLSAI1_Config+0x98>
       ||
 80026c2:	2a00      	cmp	r2, #0
 80026c4:	d03a      	beq.n	800273c <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026c6:	68db      	ldr	r3, [r3, #12]
       ||
 80026c8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80026ce:	3301      	adds	r3, #1
       ||
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d133      	bne.n	800273c <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe fd04 	bl	80010e8 <HAL_GetTick>
 80026e0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	011a      	lsls	r2, r3, #4
 80026e6:	d432      	bmi.n	800274e <RCCEx_PLLSAI1_Config+0xaa>
 80026e8:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ea:	2e00      	cmp	r6, #0
 80026ec:	d036      	beq.n	800275c <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026ee:	2e01      	cmp	r6, #1
 80026f0:	d150      	bne.n	8002794 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f2:	6922      	ldr	r2, [r4, #16]
 80026f4:	6928      	ldr	r0, [r5, #16]
 80026f6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80026fa:	0840      	lsrs	r0, r0, #1
 80026fc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002700:	3801      	subs	r0, #1
 8002702:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002706:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800270a:	6122      	str	r2, [r4, #16]
 800270c:	e032      	b.n	8002774 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 800270e:	2802      	cmp	r0, #2
 8002710:	d010      	beq.n	8002734 <RCCEx_PLLSAI1_Config+0x90>
 8002712:	2803      	cmp	r0, #3
 8002714:	d014      	beq.n	8002740 <RCCEx_PLLSAI1_Config+0x9c>
 8002716:	2801      	cmp	r0, #1
 8002718:	d110      	bne.n	800273c <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	079f      	lsls	r7, r3, #30
 800271e:	d538      	bpl.n	8002792 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002720:	68e3      	ldr	r3, [r4, #12]
 8002722:	686a      	ldr	r2, [r5, #4]
 8002724:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002728:	3a01      	subs	r2, #1
 800272a:	4318      	orrs	r0, r3
 800272c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002730:	60e0      	str	r0, [r4, #12]
 8002732:	e7cf      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800273a:	d1f1      	bne.n	8002720 <RCCEx_PLLSAI1_Config+0x7c>
 800273c:	2001      	movs	r0, #1
 800273e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	0391      	lsls	r1, r2, #14
 8002744:	d4ec      	bmi.n	8002720 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800274c:	e7f5      	b.n	800273a <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800274e:	f7fe fccb 	bl	80010e8 <HAL_GetTick>
 8002752:	1bc0      	subs	r0, r0, r7
 8002754:	2802      	cmp	r0, #2
 8002756:	d9c4      	bls.n	80026e2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002758:	2003      	movs	r0, #3
 800275a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800275c:	6921      	ldr	r1, [r4, #16]
 800275e:	68eb      	ldr	r3, [r5, #12]
 8002760:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002764:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002768:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002772:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800277a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe fcb4 	bl	80010e8 <HAL_GetTick>
 8002780:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	d513      	bpl.n	80027b0 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002788:	6923      	ldr	r3, [r4, #16]
 800278a:	69aa      	ldr	r2, [r5, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	6123      	str	r3, [r4, #16]
 8002790:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002794:	6923      	ldr	r3, [r4, #16]
 8002796:	6968      	ldr	r0, [r5, #20]
 8002798:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800279c:	0840      	lsrs	r0, r0, #1
 800279e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027a2:	3801      	subs	r0, #1
 80027a4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80027a8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80027ac:	6123      	str	r3, [r4, #16]
 80027ae:	e7e1      	b.n	8002774 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027b0:	f7fe fc9a 	bl	80010e8 <HAL_GetTick>
 80027b4:	1b80      	subs	r0, r0, r6
 80027b6:	2802      	cmp	r0, #2
 80027b8:	d9e3      	bls.n	8002782 <RCCEx_PLLSAI1_Config+0xde>
 80027ba:	e7cd      	b.n	8002758 <RCCEx_PLLSAI1_Config+0xb4>
 80027bc:	40021000 	.word	0x40021000

080027c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <RCCEx_PLLSAI2_Config+0xf8>)
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	f012 0f03 	tst.w	r2, #3
{
 80027ca:	4605      	mov	r5, r0
 80027cc:	460e      	mov	r6, r1
 80027ce:	461c      	mov	r4, r3
 80027d0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027d2:	d028      	beq.n	8002826 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	f002 0203 	and.w	r2, r2, #3
 80027da:	4282      	cmp	r2, r0
 80027dc:	d13a      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80027de:	2a00      	cmp	r2, #0
 80027e0:	d038      	beq.n	8002854 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027e2:	68db      	ldr	r3, [r3, #12]
       ||
 80027e4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80027ea:	3301      	adds	r3, #1
       ||
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d131      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f8:	f7fe fc76 	bl	80010e8 <HAL_GetTick>
 80027fc:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	009a      	lsls	r2, r3, #2
 8002802:	d430      	bmi.n	8002866 <RCCEx_PLLSAI2_Config+0xa6>
 8002804:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002806:	2e00      	cmp	r6, #0
 8002808:	d034      	beq.n	8002874 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800280a:	6963      	ldr	r3, [r4, #20]
 800280c:	6929      	ldr	r1, [r5, #16]
 800280e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002812:	0849      	lsrs	r1, r1, #1
 8002814:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002818:	3901      	subs	r1, #1
 800281a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800281e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002822:	6163      	str	r3, [r4, #20]
 8002824:	e032      	b.n	800288c <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8002826:	2802      	cmp	r0, #2
 8002828:	d010      	beq.n	800284c <RCCEx_PLLSAI2_Config+0x8c>
 800282a:	2803      	cmp	r0, #3
 800282c:	d014      	beq.n	8002858 <RCCEx_PLLSAI2_Config+0x98>
 800282e:	2801      	cmp	r0, #1
 8002830:	d110      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	079f      	lsls	r7, r3, #30
 8002836:	d538      	bpl.n	80028aa <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002838:	68e3      	ldr	r3, [r4, #12]
 800283a:	686a      	ldr	r2, [r5, #4]
 800283c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002840:	3a01      	subs	r2, #1
 8002842:	4318      	orrs	r0, r3
 8002844:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002848:	60e0      	str	r0, [r4, #12]
 800284a:	e7d1      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002852:	d1f1      	bne.n	8002838 <RCCEx_PLLSAI2_Config+0x78>
 8002854:	2001      	movs	r0, #1
 8002856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	0391      	lsls	r1, r2, #14
 800285c:	d4ec      	bmi.n	8002838 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002864:	e7f5      	b.n	8002852 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002866:	f7fe fc3f 	bl	80010e8 <HAL_GetTick>
 800286a:	1bc0      	subs	r0, r0, r7
 800286c:	2802      	cmp	r0, #2
 800286e:	d9c6      	bls.n	80027fe <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002870:	2003      	movs	r0, #3
 8002872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002874:	6962      	ldr	r2, [r4, #20]
 8002876:	68eb      	ldr	r3, [r5, #12]
 8002878:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800287c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002880:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800288a:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002892:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe fc28 	bl	80010e8 <HAL_GetTick>
 8002898:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	d505      	bpl.n	80028ac <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028a0:	6963      	ldr	r3, [r4, #20]
 80028a2:	696a      	ldr	r2, [r5, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	6163      	str	r3, [r4, #20]
 80028a8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80028aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028ac:	f7fe fc1c 	bl	80010e8 <HAL_GetTick>
 80028b0:	1b80      	subs	r0, r0, r6
 80028b2:	2802      	cmp	r0, #2
 80028b4:	d9f1      	bls.n	800289a <RCCEx_PLLSAI2_Config+0xda>
 80028b6:	e7db      	b.n	8002870 <RCCEx_PLLSAI2_Config+0xb0>
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_RCCEx_PeriphCLKConfig>:
{
 80028bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028c0:	6806      	ldr	r6, [r0, #0]
 80028c2:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80028c6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028c8:	d024      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80028ca:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80028cc:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80028d0:	d02c      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x70>
 80028d2:	d802      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80028d4:	b1c1      	cbz	r1, 8002908 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80028d6:	2601      	movs	r6, #1
 80028d8:	e01c      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80028da:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80028de:	d00d      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80028e0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80028e4:	d1f7      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e6:	4a4d      	ldr	r2, [pc, #308]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80028ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028f2:	430b      	orrs	r3, r1
 80028f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80028f8:	2600      	movs	r6, #0
 80028fa:	e00b      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028fc:	4a47      	ldr	r2, [pc, #284]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	68d3      	ldr	r3, [r2, #12]
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	60d3      	str	r3, [r2, #12]
      break;
 8002906:	e7ee      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002908:	3004      	adds	r0, #4
 800290a:	f7ff fecb 	bl	80026a4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800290e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002910:	2800      	cmp	r0, #0
 8002912:	d0e8      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	04d8      	lsls	r0, r3, #19
 8002918:	d506      	bpl.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800291a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800291c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002920:	d074      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002922:	d808      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002924:	b1a9      	cbz	r1, 8002952 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002926:	2601      	movs	r6, #1
 8002928:	4635      	mov	r5, r6
 800292a:	e021      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800292c:	2100      	movs	r1, #0
 800292e:	3020      	adds	r0, #32
 8002930:	f7ff ff46 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 8002934:	e7eb      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002936:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800293a:	d004      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800293c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002940:	d1f1      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002942:	4635      	mov	r5, r6
 8002944:	e009      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002946:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002948:	68d3      	ldr	r3, [r2, #12]
 800294a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294e:	60d3      	str	r3, [r2, #12]
 8002950:	e7f7      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002952:	1d20      	adds	r0, r4, #4
 8002954:	f7ff fea6 	bl	80026a4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002958:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800295a:	2d00      	cmp	r5, #0
 800295c:	d15c      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002960:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002962:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002966:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800296a:	430b      	orrs	r3, r1
 800296c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	0399      	lsls	r1, r3, #14
 8002974:	f140 814f 	bpl.w	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002978:	4f28      	ldr	r7, [pc, #160]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800297c:	00da      	lsls	r2, r3, #3
 800297e:	f140 8176 	bpl.w	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002982:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002986:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002a20 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800298a:	f8d9 3000 	ldr.w	r3, [r9]
 800298e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002992:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002996:	f7fe fba7 	bl	80010e8 <HAL_GetTick>
 800299a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800299c:	f8d9 3000 	ldr.w	r3, [r9]
 80029a0:	05db      	lsls	r3, r3, #23
 80029a2:	d53f      	bpl.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80029a4:	2d00      	cmp	r5, #0
 80029a6:	d144      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80029b0:	d015      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x122>
 80029b2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d011      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80029be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80029c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80029da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029de:	07d8      	lsls	r0, r3, #31
 80029e0:	d509      	bpl.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80029e2:	f7fe fb81 	bl	80010e8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80029ea:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029f0:	0799      	lsls	r1, r3, #30
 80029f2:	f140 8109 	bpl.w	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029fa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a08:	4635      	mov	r5, r6
 8002a0a:	e012      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	f104 0020 	add.w	r0, r4, #32
 8002a12:	f7ff fed5 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 8002a16:	e79f      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002a18:	462e      	mov	r6, r5
 8002a1a:	e7a9      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a24:	f7fe fb60 	bl	80010e8 <HAL_GetTick>
 8002a28:	eba0 000a 	sub.w	r0, r0, sl
 8002a2c:	2802      	cmp	r0, #2
 8002a2e:	d9b5      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002a30:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002a32:	f1b8 0f00 	cmp.w	r8, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	07da      	lsls	r2, r3, #31
 8002a44:	d508      	bpl.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a46:	4990      	ldr	r1, [pc, #576]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a48:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a4e:	f022 0203 	bic.w	r2, r2, #3
 8002a52:	4302      	orrs	r2, r0
 8002a54:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a58:	079f      	lsls	r7, r3, #30
 8002a5a:	d508      	bpl.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a5c:	498a      	ldr	r1, [pc, #552]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a5e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a60:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a64:	f022 020c 	bic.w	r2, r2, #12
 8002a68:	4302      	orrs	r2, r0
 8002a6a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a6e:	075e      	lsls	r6, r3, #29
 8002a70:	d508      	bpl.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a72:	4985      	ldr	r1, [pc, #532]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a74:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002a76:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a7a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002a7e:	4302      	orrs	r2, r0
 8002a80:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a84:	0718      	lsls	r0, r3, #28
 8002a86:	d508      	bpl.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a88:	497f      	ldr	r1, [pc, #508]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002a8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a90:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002a94:	4302      	orrs	r2, r0
 8002a96:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a9a:	06d9      	lsls	r1, r3, #27
 8002a9c:	d508      	bpl.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a9e:	497a      	ldr	r1, [pc, #488]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002aa0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002aa2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002aa6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002aaa:	4302      	orrs	r2, r0
 8002aac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ab0:	069a      	lsls	r2, r3, #26
 8002ab2:	d508      	bpl.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ab4:	4974      	ldr	r1, [pc, #464]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ab6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002ab8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002abc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ac0:	4302      	orrs	r2, r0
 8002ac2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ac6:	059f      	lsls	r7, r3, #22
 8002ac8:	d508      	bpl.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aca:	496f      	ldr	r1, [pc, #444]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002acc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002ace:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ad2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002ad6:	4302      	orrs	r2, r0
 8002ad8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002adc:	055e      	lsls	r6, r3, #21
 8002ade:	d508      	bpl.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ae0:	4969      	ldr	r1, [pc, #420]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ae2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002ae4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ae8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002aec:	4302      	orrs	r2, r0
 8002aee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af2:	0658      	lsls	r0, r3, #25
 8002af4:	d508      	bpl.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002af6:	4964      	ldr	r1, [pc, #400]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002af8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002afa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002afe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b02:	4302      	orrs	r2, r0
 8002b04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b08:	0619      	lsls	r1, r3, #24
 8002b0a:	d508      	bpl.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b0c:	495e      	ldr	r1, [pc, #376]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002b0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b14:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b18:	4302      	orrs	r2, r0
 8002b1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b1e:	05da      	lsls	r2, r3, #23
 8002b20:	d508      	bpl.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b22:	4959      	ldr	r1, [pc, #356]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b2a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002b2e:	4302      	orrs	r2, r0
 8002b30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b34:	049b      	lsls	r3, r3, #18
 8002b36:	d50f      	bpl.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b38:	4a53      	ldr	r2, [pc, #332]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002b3a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002b3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b40:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002b44:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b46:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b4e:	d164      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b50:	68d3      	ldr	r3, [r2, #12]
 8002b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b56:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	031f      	lsls	r7, r3, #12
 8002b5c:	d50f      	bpl.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b5e:	4a4a      	ldr	r2, [pc, #296]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002b60:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002b62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b66:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002b6a:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b6c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b74:	d15c      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b76:	68d3      	ldr	r3, [r2, #12]
 8002b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b7c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	035e      	lsls	r6, r3, #13
 8002b82:	d50f      	bpl.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b84:	4a40      	ldr	r2, [pc, #256]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002b86:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002b88:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b8c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002b90:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b92:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b9a:	d154      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9c:	68d3      	ldr	r3, [r2, #12]
 8002b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	0458      	lsls	r0, r3, #17
 8002ba8:	d512      	bpl.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002baa:	4937      	ldr	r1, [pc, #220]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002bac:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002bae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002bb2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002bb6:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bb8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bc0:	d14c      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	1d20      	adds	r0, r4, #4
 8002bc6:	f7ff fd6d 	bl	80026a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	bf18      	it	ne
 8002bce:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bd0:	6822      	ldr	r2, [r4, #0]
 8002bd2:	0411      	lsls	r1, r2, #16
 8002bd4:	d508      	bpl.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bd6:	492c      	ldr	r1, [pc, #176]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002bd8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002bda:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002bde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002be2:	4303      	orrs	r3, r0
 8002be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002be8:	03d3      	lsls	r3, r2, #15
 8002bea:	d509      	bpl.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bec:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002bee:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002bf2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002bf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002c00:	4628      	mov	r0, r5
 8002c02:	b002      	add	sp, #8
 8002c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe fa6e 	bl	80010e8 <HAL_GetTick>
 8002c0c:	1b40      	subs	r0, r0, r5
 8002c0e:	4548      	cmp	r0, r9
 8002c10:	f67f aeec 	bls.w	80029ec <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002c14:	e70c      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002c16:	4635      	mov	r5, r6
 8002c18:	e712      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c1a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002c1e:	d19b      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c20:	2101      	movs	r1, #1
 8002c22:	1d20      	adds	r0, r4, #4
 8002c24:	f7ff fd3e 	bl	80026a4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	bf18      	it	ne
 8002c2c:	4605      	movne	r5, r0
 8002c2e:	e793      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c30:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002c34:	d1a3      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c36:	2101      	movs	r1, #1
 8002c38:	1d20      	adds	r0, r4, #4
 8002c3a:	f7ff fd33 	bl	80026a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	bf18      	it	ne
 8002c42:	4605      	movne	r5, r0
 8002c44:	e79b      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c46:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002c4a:	d1ab      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	1d20      	adds	r0, r4, #4
 8002c50:	f7ff fd28 	bl	80026a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002c54:	2800      	cmp	r0, #0
 8002c56:	bf18      	it	ne
 8002c58:	4605      	movne	r5, r0
 8002c5a:	e7a3      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c5c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002c60:	d1b6      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c62:	2102      	movs	r1, #2
 8002c64:	f104 0020 	add.w	r0, r4, #32
 8002c68:	f7ff fdaa 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 8002c6c:	e7ad      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	9301      	str	r3, [sp, #4]
 8002c7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c80:	f04f 0801 	mov.w	r8, #1
 8002c84:	e67f      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000

08002c8c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002c8c:	4a02      	ldr	r2, [pc, #8]	; (8002c98 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4770      	bx	lr
 8002c98:	40021000 	.word	0x40021000

08002c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c9c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d04a      	beq.n	8002d3a <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ca8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002cac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cb0:	b91b      	cbnz	r3, 8002cba <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cb2:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cb6:	f001 f9f9 	bl	80040ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cba:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cbc:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002cbe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002cc2:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cc4:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cca:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002cce:	600b      	str	r3, [r1, #0]
 8002cd0:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cd4:	d92e      	bls.n	8002d34 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cd6:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cd8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cdc:	bf18      	it	ne
 8002cde:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ce2:	b92b      	cbnz	r3, 8002cf0 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002ce8:	bf8c      	ite	hi
 8002cea:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002cec:	2301      	movls	r3, #1
 8002cee:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002cf0:	68a6      	ldr	r6, [r4, #8]
 8002cf2:	6863      	ldr	r3, [r4, #4]
 8002cf4:	69a5      	ldr	r5, [r4, #24]
 8002cf6:	4333      	orrs	r3, r6
 8002cf8:	6926      	ldr	r6, [r4, #16]
 8002cfa:	4333      	orrs	r3, r6
 8002cfc:	6966      	ldr	r6, [r4, #20]
 8002cfe:	4333      	orrs	r3, r6
 8002d00:	69e6      	ldr	r6, [r4, #28]
 8002d02:	4333      	orrs	r3, r6
 8002d04:	6a26      	ldr	r6, [r4, #32]
 8002d06:	4333      	orrs	r3, r6
 8002d08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d0a:	4333      	orrs	r3, r6
 8002d0c:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8002d10:	4333      	orrs	r3, r6
 8002d12:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d16:	431a      	orrs	r2, r3
 8002d18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d1a:	0c2d      	lsrs	r5, r5, #16
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	f005 0504 	and.w	r5, r5, #4
 8002d22:	432a      	orrs	r2, r5
 8002d24:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8002d26:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d28:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002d2a:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d2c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d2e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d38:	e7d0      	b.n	8002cdc <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002d3a:	2001      	movs	r0, #1
}
 8002d3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d40 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d40:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8002d42:	480a      	ldr	r0, [pc, #40]	; (8002d6c <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8002d4c:	6899      	ldr	r1, [r3, #8]
 8002d4e:	4001      	ands	r1, r0
 8002d50:	2906      	cmp	r1, #6
 8002d52:	d008      	beq.n	8002d66 <HAL_TIM_Base_Start_IT+0x26>
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	4002      	ands	r2, r0
 8002d58:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002d5c:	bf1e      	ittt	ne
 8002d5e:	681a      	ldrne	r2, [r3, #0]
 8002d60:	f042 0201 	orrne.w	r2, r2, #1
 8002d64:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002d66:	2000      	movs	r0, #0
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	00010007 	.word	0x00010007

08002d70 <HAL_TIM_OC_DelayElapsedCallback>:
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIM_IC_CaptureCallback>:
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_TriggerCallback>:
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d78:	6803      	ldr	r3, [r0, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	0791      	lsls	r1, r2, #30
{
 8002d7e:	b510      	push	{r4, lr}
 8002d80:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d82:	d50f      	bpl.n	8002da4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	0792      	lsls	r2, r2, #30
 8002d88:	d50c      	bpl.n	8002da4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d8a:	f06f 0202 	mvn.w	r2, #2
 8002d8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d90:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d92:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d94:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d96:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d98:	f000 8085 	beq.w	8002ea6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	f7ff ffe9 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da0:	2300      	movs	r3, #0
 8002da2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	0752      	lsls	r2, r2, #29
 8002daa:	d510      	bpl.n	8002dce <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	0750      	lsls	r0, r2, #29
 8002db0:	d50d      	bpl.n	8002dce <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002db2:	f06f 0204 	mvn.w	r2, #4
 8002db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002db8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dba:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dbc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dc4:	d075      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	f7ff ffd4 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	0711      	lsls	r1, r2, #28
 8002dd4:	d50f      	bpl.n	8002df6 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	0712      	lsls	r2, r2, #28
 8002dda:	d50c      	bpl.n	8002df6 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ddc:	f06f 0208 	mvn.w	r2, #8
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de4:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de6:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dec:	d067      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dee:	f7ff ffc0 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	2300      	movs	r3, #0
 8002df4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	06d0      	lsls	r0, r2, #27
 8002dfc:	d510      	bpl.n	8002e20 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	06d1      	lsls	r1, r2, #27
 8002e02:	d50d      	bpl.n	8002e20 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e04:	f06f 0210 	mvn.w	r2, #16
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e0a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e0c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e0e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e12:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e14:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e16:	d058      	beq.n	8002eca <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e18:	f7ff ffab 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	07d2      	lsls	r2, r2, #31
 8002e26:	d508      	bpl.n	8002e3a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	07d0      	lsls	r0, r2, #31
 8002e2c:	d505      	bpl.n	8002e3a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e2e:	f06f 0201 	mvn.w	r2, #1
 8002e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e34:	4620      	mov	r0, r4
 8002e36:	f001 f869 	bl	8003f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	0611      	lsls	r1, r2, #24
 8002e40:	d508      	bpl.n	8002e54 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	0612      	lsls	r2, r2, #24
 8002e46:	d505      	bpl.n	8002e54 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f000 f8ef 	bl	8003032 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	05d0      	lsls	r0, r2, #23
 8002e5a:	d508      	bpl.n	8002e6e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	0611      	lsls	r1, r2, #24
 8002e60:	d505      	bpl.n	8002e6e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f000 f8e3 	bl	8003034 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	0652      	lsls	r2, r2, #25
 8002e74:	d508      	bpl.n	8002e88 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	0650      	lsls	r0, r2, #25
 8002e7a:	d505      	bpl.n	8002e88 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff ff77 	bl	8002d76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	0691      	lsls	r1, r2, #26
 8002e8e:	d522      	bpl.n	8002ed6 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	0692      	lsls	r2, r2, #26
 8002e94:	d51f      	bpl.n	8002ed6 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e96:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8002e9a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e9c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002ea2:	f000 b8c5 	b.w	8003030 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	f7ff ff63 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f7ff ff62 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
 8002eb0:	e776      	b.n	8002da0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	f7ff ff5d 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f7ff ff5c 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ebc:	e785      	b.n	8002dca <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	f7ff ff57 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f7ff ff56 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ec8:	e793      	b.n	8002df2 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	f7ff ff51 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f7ff ff50 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ed4:	e7a2      	b.n	8002e1c <HAL_TIM_IRQHandler+0xa4>
 8002ed6:	bd10      	pop	{r4, pc}

08002ed8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed8:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002eda:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002edc:	4290      	cmp	r0, r2
 8002ede:	d012      	beq.n	8002f06 <TIM_Base_SetConfig+0x2e>
 8002ee0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ee4:	d00f      	beq.n	8002f06 <TIM_Base_SetConfig+0x2e>
 8002ee6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002eea:	4290      	cmp	r0, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0x2e>
 8002eee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ef2:	4290      	cmp	r0, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0x2e>
 8002ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002efa:	4290      	cmp	r0, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x2e>
 8002efe:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002f02:	4290      	cmp	r0, r2
 8002f04:	d119      	bne.n	8002f3a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002f06:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f0c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0e:	4a23      	ldr	r2, [pc, #140]	; (8002f9c <TIM_Base_SetConfig+0xc4>)
 8002f10:	4290      	cmp	r0, r2
 8002f12:	d01d      	beq.n	8002f50 <TIM_Base_SetConfig+0x78>
 8002f14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f18:	d01a      	beq.n	8002f50 <TIM_Base_SetConfig+0x78>
 8002f1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002f1e:	4290      	cmp	r0, r2
 8002f20:	d016      	beq.n	8002f50 <TIM_Base_SetConfig+0x78>
 8002f22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f26:	4290      	cmp	r0, r2
 8002f28:	d012      	beq.n	8002f50 <TIM_Base_SetConfig+0x78>
 8002f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f2e:	4290      	cmp	r0, r2
 8002f30:	d00e      	beq.n	8002f50 <TIM_Base_SetConfig+0x78>
 8002f32:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002f36:	4290      	cmp	r0, r2
 8002f38:	d00a      	beq.n	8002f50 <TIM_Base_SetConfig+0x78>
 8002f3a:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <TIM_Base_SetConfig+0xc8>)
 8002f3c:	4290      	cmp	r0, r2
 8002f3e:	d007      	beq.n	8002f50 <TIM_Base_SetConfig+0x78>
 8002f40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f44:	4290      	cmp	r0, r2
 8002f46:	d003      	beq.n	8002f50 <TIM_Base_SetConfig+0x78>
 8002f48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f4c:	4290      	cmp	r0, r2
 8002f4e:	d103      	bne.n	8002f58 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f50:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f56:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f58:	694a      	ldr	r2, [r1, #20]
 8002f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f5e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002f60:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f62:	688b      	ldr	r3, [r1, #8]
 8002f64:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f66:	680b      	ldr	r3, [r1, #0]
 8002f68:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <TIM_Base_SetConfig+0xc4>)
 8002f6c:	4298      	cmp	r0, r3
 8002f6e:	d00f      	beq.n	8002f90 <TIM_Base_SetConfig+0xb8>
 8002f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f74:	4298      	cmp	r0, r3
 8002f76:	d00b      	beq.n	8002f90 <TIM_Base_SetConfig+0xb8>
 8002f78:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002f7c:	4298      	cmp	r0, r3
 8002f7e:	d007      	beq.n	8002f90 <TIM_Base_SetConfig+0xb8>
 8002f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f84:	4298      	cmp	r0, r3
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0xb8>
 8002f88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f8c:	4298      	cmp	r0, r3
 8002f8e:	d101      	bne.n	8002f94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f90:	690b      	ldr	r3, [r1, #16]
 8002f92:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f94:	2301      	movs	r3, #1
 8002f96:	6143      	str	r3, [r0, #20]
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40014000 	.word	0x40014000

08002fa4 <HAL_TIM_Base_Init>:
{
 8002fa4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	b1a0      	cbz	r0, 8002fd4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002faa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fb2:	b91b      	cbnz	r3, 8002fbc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002fb4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002fb8:	f001 f8ac 	bl	8004114 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc2:	6820      	ldr	r0, [r4, #0]
 8002fc4:	1d21      	adds	r1, r4, #4
 8002fc6:	f7ff ff87 	bl	8002ed8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002fd4:	2001      	movs	r0, #1
}
 8002fd6:	bd10      	pop	{r4, pc}

08002fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fd8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fdc:	2b01      	cmp	r3, #1
{
 8002fde:	b530      	push	{r4, r5, lr}
 8002fe0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002fe4:	d01f      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fe8:	4d10      	ldr	r5, [pc, #64]	; (800302c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002fea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fee:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002ff0:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002ff2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002ff6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ffa:	42aa      	cmp	r2, r5
 8002ffc:	d103      	bne.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ffe:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003000:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003004:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003006:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003008:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800300e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003010:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003014:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003016:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003018:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 800301a:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800301c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003020:	2300      	movs	r3, #0
 8003022:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003026:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003028:	bd30      	pop	{r4, r5, pc}
 800302a:	bf00      	nop
 800302c:	40012c00 	.word	0x40012c00

08003030 <HAL_TIMEx_CommutationCallback>:
 8003030:	4770      	bx	lr

08003032 <HAL_TIMEx_BreakCallback>:
 8003032:	4770      	bx	lr

08003034 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003034:	4770      	bx	lr
	...

08003038 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003038:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800303a:	69c1      	ldr	r1, [r0, #28]
{
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003040:	6883      	ldr	r3, [r0, #8]
 8003042:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003044:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003046:	4303      	orrs	r3, r0
 8003048:	6960      	ldr	r0, [r4, #20]
 800304a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800304c:	48ba      	ldr	r0, [pc, #744]	; (8003338 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800304e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003050:	4028      	ands	r0, r5
 8003052:	4303      	orrs	r3, r0
 8003054:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003056:	6853      	ldr	r3, [r2, #4]
 8003058:	68e0      	ldr	r0, [r4, #12]
 800305a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800305e:	4303      	orrs	r3, r0
 8003060:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003062:	4bb6      	ldr	r3, [pc, #728]	; (800333c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003064:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003066:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003068:	bf1c      	itt	ne
 800306a:	6a23      	ldrne	r3, [r4, #32]
 800306c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800306e:	6893      	ldr	r3, [r2, #8]
 8003070:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003074:	4303      	orrs	r3, r0
 8003076:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003078:	4bb1      	ldr	r3, [pc, #708]	; (8003340 <UART_SetConfig+0x308>)
 800307a:	429a      	cmp	r2, r3
 800307c:	d119      	bne.n	80030b2 <UART_SetConfig+0x7a>
 800307e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003082:	4ab0      	ldr	r2, [pc, #704]	; (8003344 <UART_SetConfig+0x30c>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003090:	5cd3      	ldrb	r3, [r2, r3]
 8003092:	f040 8138 	bne.w	8003306 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8003096:	2b08      	cmp	r3, #8
 8003098:	f200 808f 	bhi.w	80031ba <UART_SetConfig+0x182>
 800309c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80030a0:	00ca011a 	.word	0x00ca011a
 80030a4:	008d00f9 	.word	0x008d00f9
 80030a8:	008d0114 	.word	0x008d0114
 80030ac:	008d008d 	.word	0x008d008d
 80030b0:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b2:	4ba5      	ldr	r3, [pc, #660]	; (8003348 <UART_SetConfig+0x310>)
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d107      	bne.n	80030c8 <UART_SetConfig+0x90>
 80030b8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80030bc:	4aa3      	ldr	r2, [pc, #652]	; (800334c <UART_SetConfig+0x314>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	e7e1      	b.n	800308c <UART_SetConfig+0x54>
 80030c8:	4ba1      	ldr	r3, [pc, #644]	; (8003350 <UART_SetConfig+0x318>)
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d123      	bne.n	8003116 <UART_SetConfig+0xde>
 80030ce:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030da:	2b10      	cmp	r3, #16
 80030dc:	f000 80f1 	beq.w	80032c2 <UART_SetConfig+0x28a>
 80030e0:	d80b      	bhi.n	80030fa <UART_SetConfig+0xc2>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80f3 	beq.w	80032ce <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80030ec:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80030f0:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f4:	f000 80f8 	beq.w	80032e8 <UART_SetConfig+0x2b0>
 80030f8:	e0a8      	b.n	800324c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	f000 80c6 	beq.w	800328c <UART_SetConfig+0x254>
 8003100:	2b30      	cmp	r3, #48	; 0x30
 8003102:	d1f1      	bne.n	80030e8 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003104:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003108:	f040 80b8 	bne.w	800327c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800310c:	6860      	ldr	r0, [r4, #4]
 800310e:	0843      	lsrs	r3, r0, #1
 8003110:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003114:	e0c3      	b.n	800329e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003116:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <UART_SetConfig+0x31c>)
 8003118:	429a      	cmp	r2, r3
 800311a:	d11e      	bne.n	800315a <UART_SetConfig+0x122>
 800311c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	f000 80bb 	beq.w	80032a4 <UART_SetConfig+0x26c>
 800312e:	d80a      	bhi.n	8003146 <UART_SetConfig+0x10e>
 8003130:	b97b      	cbnz	r3, 8003152 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003132:	4b82      	ldr	r3, [pc, #520]	; (800333c <UART_SetConfig+0x304>)
 8003134:	429a      	cmp	r2, r3
 8003136:	f040 80ca 	bne.w	80032ce <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800313a:	f7ff fa8f 	bl	800265c <HAL_RCC_GetPCLK1Freq>
        break;
 800313e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003140:	bbb0      	cbnz	r0, 80031b0 <UART_SetConfig+0x178>
 8003142:	4602      	mov	r2, r0
 8003144:	e03a      	b.n	80031bc <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	f000 809d 	beq.w	8003286 <UART_SetConfig+0x24e>
 800314c:	2bc0      	cmp	r3, #192	; 0xc0
 800314e:	f000 80b0 	beq.w	80032b2 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003152:	4b7a      	ldr	r3, [pc, #488]	; (800333c <UART_SetConfig+0x304>)
 8003154:	429a      	cmp	r2, r3
 8003156:	d1c7      	bne.n	80030e8 <UART_SetConfig+0xb0>
 8003158:	e02f      	b.n	80031ba <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800315a:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <UART_SetConfig+0x320>)
 800315c:	429a      	cmp	r2, r3
 800315e:	d111      	bne.n	8003184 <UART_SetConfig+0x14c>
 8003160:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003170:	f000 8098 	beq.w	80032a4 <UART_SetConfig+0x26c>
 8003174:	d9dc      	bls.n	8003130 <UART_SetConfig+0xf8>
 8003176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317a:	f000 8084 	beq.w	8003286 <UART_SetConfig+0x24e>
 800317e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003182:	e7e4      	b.n	800314e <UART_SetConfig+0x116>
 8003184:	4b6d      	ldr	r3, [pc, #436]	; (800333c <UART_SetConfig+0x304>)
 8003186:	429a      	cmp	r2, r3
 8003188:	d1ae      	bne.n	80030e8 <UART_SetConfig+0xb0>
 800318a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	f000 8083 	beq.w	80032a4 <UART_SetConfig+0x26c>
 800319e:	d9c7      	bls.n	8003130 <UART_SetConfig+0xf8>
 80031a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a4:	d06f      	beq.n	8003286 <UART_SetConfig+0x24e>
 80031a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031aa:	e7d0      	b.n	800314e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80031ac:	486b      	ldr	r0, [pc, #428]	; (800335c <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80031ae:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80031b0:	6862      	ldr	r2, [r4, #4]
 80031b2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80031b6:	4281      	cmp	r1, r0
 80031b8:	d905      	bls.n	80031c6 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80031ba:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80031c0:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80031c2:	4610      	mov	r0, r2
 80031c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80031c6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80031ca:	d8f6      	bhi.n	80031ba <UART_SetConfig+0x182>
        switch (clocksource)
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d82e      	bhi.n	800322e <UART_SetConfig+0x1f6>
 80031d0:	e8df f003 	tbb	[pc, r3]
 80031d4:	2d1c2d05 	.word	0x2d1c2d05
 80031d8:	2d2d2d24 	.word	0x2d2d2d24
 80031dc:	27          	.byte	0x27
 80031dd:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80031de:	f7ff fa3d 	bl	800265c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031e2:	6862      	ldr	r2, [r4, #4]
 80031e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031e8:	0856      	lsrs	r6, r2, #1
 80031ea:	2700      	movs	r7, #0
 80031ec:	fbe1 6700 	umlal	r6, r7, r1, r0
 80031f0:	2300      	movs	r3, #0
 80031f2:	4630      	mov	r0, r6
 80031f4:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80031f6:	f7fd fc7f 	bl	8000af8 <__aeabi_uldivmod>
            break;
 80031fa:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031fc:	4b58      	ldr	r3, [pc, #352]	; (8003360 <UART_SetConfig+0x328>)
 80031fe:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003202:	4299      	cmp	r1, r3
 8003204:	d8d9      	bhi.n	80031ba <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	60d8      	str	r0, [r3, #12]
 800320a:	e7d7      	b.n	80031bc <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800320c:	4855      	ldr	r0, [pc, #340]	; (8003364 <UART_SetConfig+0x32c>)
 800320e:	0855      	lsrs	r5, r2, #1
 8003210:	2300      	movs	r3, #0
 8003212:	2100      	movs	r1, #0
 8003214:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003216:	f141 0100 	adc.w	r1, r1, #0
 800321a:	e7ec      	b.n	80031f6 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800321c:	f7fe ff12 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8003220:	e7df      	b.n	80031e2 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003222:	0850      	lsrs	r0, r2, #1
 8003224:	2100      	movs	r1, #0
 8003226:	2300      	movs	r3, #0
 8003228:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800322c:	e7f3      	b.n	8003216 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800322e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003230:	2000      	movs	r0, #0
 8003232:	e7e3      	b.n	80031fc <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003234:	f7ff fa24 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
 8003238:	e04e      	b.n	80032d8 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800323a:	f7ff fa0f 	bl	800265c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800323e:	6862      	ldr	r2, [r4, #4]
 8003240:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003244:	fbb3 f3f2 	udiv	r3, r3, r2
 8003248:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800324a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800324c:	f1a3 0010 	sub.w	r0, r3, #16
 8003250:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003254:	4288      	cmp	r0, r1
 8003256:	d8b0      	bhi.n	80031ba <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8003258:	6821      	ldr	r1, [r4, #0]
 800325a:	60cb      	str	r3, [r1, #12]
 800325c:	e7ae      	b.n	80031bc <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800325e:	f7ff fa0f 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
 8003262:	e7ec      	b.n	800323e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003264:	6860      	ldr	r0, [r4, #4]
 8003266:	0843      	lsrs	r3, r0, #1
 8003268:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800326c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003270:	fbb3 f3f0 	udiv	r3, r3, r0
 8003274:	e7e8      	b.n	8003248 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003276:	f7fe fee5 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 800327a:	e7e0      	b.n	800323e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800327c:	6860      	ldr	r0, [r4, #4]
 800327e:	0843      	lsrs	r3, r0, #1
 8003280:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003284:	e7f4      	b.n	8003270 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003286:	4b2d      	ldr	r3, [pc, #180]	; (800333c <UART_SetConfig+0x304>)
 8003288:	429a      	cmp	r2, r3
 800328a:	d08f      	beq.n	80031ac <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800328c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003290:	d1e8      	bne.n	8003264 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003292:	6860      	ldr	r0, [r4, #4]
 8003294:	0843      	lsrs	r3, r0, #1
 8003296:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800329a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800329e:	fbb3 f3f0 	udiv	r3, r3, r0
 80032a2:	e01f      	b.n	80032e4 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <UART_SetConfig+0x304>)
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d10b      	bne.n	80032c2 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80032aa:	f7fe fecb 	bl	8002044 <HAL_RCC_GetSysClockFreq>
        break;
 80032ae:	2304      	movs	r3, #4
 80032b0:	e746      	b.n	8003140 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <UART_SetConfig+0x304>)
 80032b4:	429a      	cmp	r2, r3
 80032b6:	f47f af25 	bne.w	8003104 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80032ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 80032be:	2308      	movs	r3, #8
 80032c0:	e776      	b.n	80031b0 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80032c6:	d1d6      	bne.n	8003276 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032c8:	f7fe febc 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 80032cc:	e004      	b.n	80032d8 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80032d2:	d1b2      	bne.n	800323a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80032d4:	f7ff f9c2 	bl	800265c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032d8:	6861      	ldr	r1, [r4, #4]
 80032da:	084a      	lsrs	r2, r1, #1
 80032dc:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80032e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80032e4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80032e6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e8:	f1a3 0010 	sub.w	r0, r3, #16
 80032ec:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80032f0:	4288      	cmp	r0, r1
 80032f2:	f63f af62 	bhi.w	80031ba <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 80032f6:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80032fa:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032fc:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003300:	430b      	orrs	r3, r1
 8003302:	60c3      	str	r3, [r0, #12]
 8003304:	e75a      	b.n	80031bc <UART_SetConfig+0x184>
    switch (clocksource)
 8003306:	2b08      	cmp	r3, #8
 8003308:	f63f af57 	bhi.w	80031ba <UART_SetConfig+0x182>
 800330c:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <UART_SetConfig+0x2dc>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	0800323b 	.word	0x0800323b
 8003318:	0800325f 	.word	0x0800325f
 800331c:	08003265 	.word	0x08003265
 8003320:	080031bb 	.word	0x080031bb
 8003324:	08003277 	.word	0x08003277
 8003328:	080031bb 	.word	0x080031bb
 800332c:	080031bb 	.word	0x080031bb
 8003330:	080031bb 	.word	0x080031bb
 8003334:	0800327d 	.word	0x0800327d
 8003338:	efff69f3 	.word	0xefff69f3
 800333c:	40008000 	.word	0x40008000
 8003340:	40013800 	.word	0x40013800
 8003344:	08006104 	.word	0x08006104
 8003348:	40004400 	.word	0x40004400
 800334c:	08006108 	.word	0x08006108
 8003350:	40004800 	.word	0x40004800
 8003354:	40004c00 	.word	0x40004c00
 8003358:	40005000 	.word	0x40005000
 800335c:	00f42400 	.word	0x00f42400
 8003360:	000ffcff 	.word	0x000ffcff
 8003364:	f4240000 	.word	0xf4240000

08003368 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003368:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800336a:	07da      	lsls	r2, r3, #31
{
 800336c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800336e:	d506      	bpl.n	800337e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003370:	6801      	ldr	r1, [r0, #0]
 8003372:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003374:	684a      	ldr	r2, [r1, #4]
 8003376:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800337a:	4322      	orrs	r2, r4
 800337c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800337e:	079c      	lsls	r4, r3, #30
 8003380:	d506      	bpl.n	8003390 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003382:	6801      	ldr	r1, [r0, #0]
 8003384:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003386:	684a      	ldr	r2, [r1, #4]
 8003388:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800338c:	4322      	orrs	r2, r4
 800338e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003390:	0759      	lsls	r1, r3, #29
 8003392:	d506      	bpl.n	80033a2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003394:	6801      	ldr	r1, [r0, #0]
 8003396:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003398:	684a      	ldr	r2, [r1, #4]
 800339a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800339e:	4322      	orrs	r2, r4
 80033a0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033a2:	071a      	lsls	r2, r3, #28
 80033a4:	d506      	bpl.n	80033b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a6:	6801      	ldr	r1, [r0, #0]
 80033a8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80033aa:	684a      	ldr	r2, [r1, #4]
 80033ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033b0:	4322      	orrs	r2, r4
 80033b2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b4:	06dc      	lsls	r4, r3, #27
 80033b6:	d506      	bpl.n	80033c6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033b8:	6801      	ldr	r1, [r0, #0]
 80033ba:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80033bc:	688a      	ldr	r2, [r1, #8]
 80033be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033c2:	4322      	orrs	r2, r4
 80033c4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033c6:	0699      	lsls	r1, r3, #26
 80033c8:	d506      	bpl.n	80033d8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ca:	6801      	ldr	r1, [r0, #0]
 80033cc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80033ce:	688a      	ldr	r2, [r1, #8]
 80033d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033d4:	4322      	orrs	r2, r4
 80033d6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d8:	065a      	lsls	r2, r3, #25
 80033da:	d50f      	bpl.n	80033fc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033dc:	6801      	ldr	r1, [r0, #0]
 80033de:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80033e0:	684a      	ldr	r2, [r1, #4]
 80033e2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80033e6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ec:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ee:	d105      	bne.n	80033fc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033f0:	684a      	ldr	r2, [r1, #4]
 80033f2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80033f4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80033f8:	4322      	orrs	r2, r4
 80033fa:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fc:	061b      	lsls	r3, r3, #24
 80033fe:	d506      	bpl.n	800340e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003400:	6802      	ldr	r2, [r0, #0]
 8003402:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003404:	6853      	ldr	r3, [r2, #4]
 8003406:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800340a:	430b      	orrs	r3, r1
 800340c:	6053      	str	r3, [r2, #4]
 800340e:	bd10      	pop	{r4, pc}

08003410 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003414:	9d06      	ldr	r5, [sp, #24]
 8003416:	4604      	mov	r4, r0
 8003418:	460f      	mov	r7, r1
 800341a:	4616      	mov	r6, r2
 800341c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341e:	6821      	ldr	r1, [r4, #0]
 8003420:	69ca      	ldr	r2, [r1, #28]
 8003422:	ea37 0302 	bics.w	r3, r7, r2
 8003426:	bf0c      	ite	eq
 8003428:	2201      	moveq	r2, #1
 800342a:	2200      	movne	r2, #0
 800342c:	42b2      	cmp	r2, r6
 800342e:	d002      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003430:	2000      	movs	r0, #0
}
 8003432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003436:	1c6b      	adds	r3, r5, #1
 8003438:	d0f2      	beq.n	8003420 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800343a:	b99d      	cbnz	r5, 8003464 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003444:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800344e:	2320      	movs	r3, #32
 8003450:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003454:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8003458:	2300      	movs	r3, #0
 800345a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800345e:	2003      	movs	r0, #3
 8003460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003464:	f7fd fe40 	bl	80010e8 <HAL_GetTick>
 8003468:	eba0 0008 	sub.w	r0, r0, r8
 800346c:	4285      	cmp	r5, r0
 800346e:	d2d6      	bcs.n	800341e <UART_WaitOnFlagUntilTimeout+0xe>
 8003470:	e7e4      	b.n	800343c <UART_WaitOnFlagUntilTimeout+0x2c>

08003472 <HAL_UART_Transmit>:
{
 8003472:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003476:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003478:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800347c:	2b20      	cmp	r3, #32
{
 800347e:	4604      	mov	r4, r0
 8003480:	460d      	mov	r5, r1
 8003482:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003484:	d14a      	bne.n	800351c <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8003486:	2900      	cmp	r1, #0
 8003488:	d046      	beq.n	8003518 <HAL_UART_Transmit+0xa6>
 800348a:	2a00      	cmp	r2, #0
 800348c:	d044      	beq.n	8003518 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800348e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003492:	2b01      	cmp	r3, #1
 8003494:	d042      	beq.n	800351c <HAL_UART_Transmit+0xaa>
 8003496:	2301      	movs	r3, #1
 8003498:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349c:	2300      	movs	r3, #0
 800349e:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a0:	2321      	movs	r3, #33	; 0x21
 80034a2:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 80034a6:	f7fd fe1f 	bl	80010e8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80034aa:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80034ae:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80034b0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034b4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034b8:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 80034ba:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034bc:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 80034be:	b952      	cbnz	r2, 80034d6 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	4620      	mov	r0, r4
 80034c4:	f7ff ffa4 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 80034c8:	b958      	cbnz	r0, 80034e2 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 80034ca:	2320      	movs	r3, #32
 80034cc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 80034d0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 80034d4:	e006      	b.n	80034e4 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034d6:	2200      	movs	r2, #0
 80034d8:	2180      	movs	r1, #128	; 0x80
 80034da:	4620      	mov	r0, r4
 80034dc:	f7ff ff98 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 80034e0:	b118      	cbz	r0, 80034ea <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 80034e2:	2003      	movs	r0, #3
}
 80034e4:	b002      	add	sp, #8
 80034e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ea:	68a3      	ldr	r3, [r4, #8]
 80034ec:	6822      	ldr	r2, [r4, #0]
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f2:	d10d      	bne.n	8003510 <HAL_UART_Transmit+0x9e>
 80034f4:	6923      	ldr	r3, [r4, #16]
 80034f6:	b95b      	cbnz	r3, 8003510 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80034f8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80034fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003500:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003502:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003506:	3b01      	subs	r3, #1
 8003508:	b29b      	uxth	r3, r3
 800350a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800350e:	e7d1      	b.n	80034b4 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003510:	782b      	ldrb	r3, [r5, #0]
 8003512:	8513      	strh	r3, [r2, #40]	; 0x28
 8003514:	3501      	adds	r5, #1
 8003516:	e7f4      	b.n	8003502 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003518:	2001      	movs	r0, #1
 800351a:	e7e3      	b.n	80034e4 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800351c:	2002      	movs	r0, #2
 800351e:	e7e1      	b.n	80034e4 <HAL_UART_Transmit+0x72>

08003520 <UART_CheckIdleState>:
{
 8003520:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003522:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	2600      	movs	r6, #0
 8003526:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8003528:	f7fd fdde 	bl	80010e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003532:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003534:	d417      	bmi.n	8003566 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	075b      	lsls	r3, r3, #29
 800353c:	d50a      	bpl.n	8003554 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800353e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2200      	movs	r2, #0
 8003546:	462b      	mov	r3, r5
 8003548:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800354c:	4620      	mov	r0, r4
 800354e:	f7ff ff5f 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 8003552:	b9a0      	cbnz	r0, 800357e <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8003554:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003556:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003558:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800355c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003560:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8003564:	e00c      	b.n	8003580 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003566:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	4632      	mov	r2, r6
 800356e:	4603      	mov	r3, r0
 8003570:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003574:	4620      	mov	r0, r4
 8003576:	f7ff ff4b 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 800357a:	2800      	cmp	r0, #0
 800357c:	d0db      	beq.n	8003536 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800357e:	2003      	movs	r0, #3
}
 8003580:	b002      	add	sp, #8
 8003582:	bd70      	pop	{r4, r5, r6, pc}

08003584 <HAL_UART_Init>:
{
 8003584:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003586:	4604      	mov	r4, r0
 8003588:	b360      	cbz	r0, 80035e4 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800358a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800358e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003592:	b91b      	cbnz	r3, 800359c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003594:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003598:	f000 fdda 	bl	8004150 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800359c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800359e:	2324      	movs	r3, #36	; 0x24
 80035a0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80035a4:	6813      	ldr	r3, [r2, #0]
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ac:	4620      	mov	r0, r4
 80035ae:	f7ff fd43 	bl	8003038 <UART_SetConfig>
 80035b2:	2801      	cmp	r0, #1
 80035b4:	d016      	beq.n	80035e4 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035b8:	b113      	cbz	r3, 80035c0 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7ff fed4 	bl	8003368 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80035d8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80035e0:	f7ff bf9e 	b.w	8003520 <UART_CheckIdleState>
}
 80035e4:	2001      	movs	r0, #1
 80035e6:	bd10      	pop	{r4, pc}

080035e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80035ea:	3b01      	subs	r3, #1
 80035ec:	d101      	bne.n	80035f2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80035ee:	2003      	movs	r0, #3
 80035f0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035f2:	6902      	ldr	r2, [r0, #16]
 80035f4:	2a00      	cmp	r2, #0
 80035f6:	daf8      	bge.n	80035ea <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80035f8:	6903      	ldr	r3, [r0, #16]
 80035fa:	4a06      	ldr	r2, [pc, #24]	; (8003614 <USB_CoreReset+0x2c>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8003602:	3a01      	subs	r2, #1
 8003604:	d0f3      	beq.n	80035ee <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003606:	6903      	ldr	r3, [r0, #16]
 8003608:	f013 0301 	ands.w	r3, r3, #1
 800360c:	d1f9      	bne.n	8003602 <USB_CoreReset+0x1a>

  return HAL_OK;
 800360e:	4618      	mov	r0, r3
}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	00030d41 	.word	0x00030d41

08003618 <USB_CoreInit>:
{
 8003618:	b084      	sub	sp, #16
 800361a:	b538      	push	{r3, r4, r5, lr}
 800361c:	ad05      	add	r5, sp, #20
 800361e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003624:	2b01      	cmp	r3, #1
{
 8003626:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003628:	d11b      	bne.n	8003662 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800362a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800362c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003630:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003632:	68c3      	ldr	r3, [r0, #12]
 8003634:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800363c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800363e:	68c3      	ldr	r3, [r0, #12]
 8003640:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003644:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003646:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003648:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800364a:	bf02      	ittt	eq
 800364c:	68c3      	ldreq	r3, [r0, #12]
 800364e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8003652:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8003654:	f7ff ffc8 	bl	80035e8 <USB_CoreReset>
}
 8003658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800365c:	2000      	movs	r0, #0
 800365e:	b004      	add	sp, #16
 8003660:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003662:	68c3      	ldr	r3, [r0, #12]
 8003664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003668:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 800366a:	f7ff ffbd 	bl	80035e8 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800366e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003672:	63a3      	str	r3, [r4, #56]	; 0x38
 8003674:	e7f0      	b.n	8003658 <USB_CoreInit+0x40>

08003676 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003676:	6883      	ldr	r3, [r0, #8]
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6083      	str	r3, [r0, #8]
}
 800367e:	2000      	movs	r0, #0
 8003680:	4770      	bx	lr

08003682 <USB_SetCurrentMode>:
{
 8003682:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003684:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003686:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003688:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800368c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800368e:	d108      	bne.n	80036a2 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003690:	68c3      	ldr	r3, [r0, #12]
 8003692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003696:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003698:	2032      	movs	r0, #50	; 0x32
 800369a:	f7fd fd2b 	bl	80010f4 <HAL_Delay>
  return HAL_OK;
 800369e:	2000      	movs	r0, #0
 80036a0:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80036a2:	b919      	cbnz	r1, 80036ac <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036a4:	68c3      	ldr	r3, [r0, #12]
 80036a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036aa:	e7f4      	b.n	8003696 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80036ac:	2001      	movs	r0, #1
}
 80036ae:	bd08      	pop	{r3, pc}

080036b0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80036b0:	0189      	lsls	r1, r1, #6
 80036b2:	f041 0120 	orr.w	r1, r1, #32
 80036b6:	4a06      	ldr	r2, [pc, #24]	; (80036d0 <USB_FlushTxFifo+0x20>)
 80036b8:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80036ba:	3a01      	subs	r2, #1
 80036bc:	d005      	beq.n	80036ca <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036be:	6903      	ldr	r3, [r0, #16]
 80036c0:	f013 0320 	ands.w	r3, r3, #32
 80036c4:	d1f9      	bne.n	80036ba <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80036c6:	4618      	mov	r0, r3
 80036c8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80036ca:	2003      	movs	r0, #3
}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	00030d41 	.word	0x00030d41

080036d4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80036d4:	2310      	movs	r3, #16
 80036d6:	4a06      	ldr	r2, [pc, #24]	; (80036f0 <USB_FlushRxFifo+0x1c>)
 80036d8:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80036da:	3a01      	subs	r2, #1
 80036dc:	d005      	beq.n	80036ea <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036de:	6903      	ldr	r3, [r0, #16]
 80036e0:	f013 0310 	ands.w	r3, r3, #16
 80036e4:	d1f9      	bne.n	80036da <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80036e6:	4618      	mov	r0, r3
 80036e8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80036ea:	2003      	movs	r0, #3
}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	00030d41 	.word	0x00030d41

080036f4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80036f4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80036f8:	4319      	orrs	r1, r3
 80036fa:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80036fe:	2000      	movs	r0, #0
 8003700:	4770      	bx	lr
	...

08003704 <USB_DevInit>:
{
 8003704:	b084      	sub	sp, #16
 8003706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370a:	4604      	mov	r4, r0
 800370c:	a807      	add	r0, sp, #28
 800370e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8003712:	2300      	movs	r3, #0
 8003714:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8003716:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8003718:	4619      	mov	r1, r3
 800371a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800371e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8003722:	3301      	adds	r3, #1
 8003724:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8003726:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003728:	d1f7      	bne.n	800371a <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800372a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800372c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003730:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8003732:	b95f      	cbnz	r7, 800374c <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003736:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800373a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003742:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374a:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800374c:	2500      	movs	r5, #0
 800374e:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003752:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003756:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800375a:	2103      	movs	r1, #3
 800375c:	4620      	mov	r0, r4
 800375e:	f7ff ffc9 	bl	80036f4 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003762:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003766:	2110      	movs	r1, #16
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff ffa1 	bl	80036b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800376e:	4620      	mov	r0, r4
 8003770:	f7ff ffb0 	bl	80036d4 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8003774:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003776:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8003778:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 800377a:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 800377c:	61f5      	str	r5, [r6, #28]
 800377e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003786:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800378a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800378e:	4543      	cmp	r3, r8
 8003790:	d12f      	bne.n	80037f2 <USB_DevInit+0xee>
 8003792:	2100      	movs	r1, #0
 8003794:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003798:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800379a:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800379e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037a2:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037a6:	428b      	cmp	r3, r1
 80037a8:	d134      	bne.n	8003814 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037aa:	6933      	ldr	r3, [r6, #16]
 80037ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b0:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80037b6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80037ba:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80037bc:	69a3      	ldr	r3, [r4, #24]
 80037be:	f043 0310 	orr.w	r3, r3, #16
 80037c2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80037c4:	69a2      	ldr	r2, [r4, #24]
 80037c6:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <USB_DevInit+0x134>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80037cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037ce:	b11b      	cbz	r3, 80037d8 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80037d0:	69a3      	ldr	r3, [r4, #24]
 80037d2:	f043 0308 	orr.w	r3, r3, #8
 80037d6:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80037d8:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037da:	bf01      	itttt	eq
 80037dc:	69a3      	ldreq	r3, [r4, #24]
 80037de:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80037e2:	f043 0304 	orreq.w	r3, r3, #4
 80037e6:	61a3      	streq	r3, [r4, #24]
}
 80037e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ec:	2000      	movs	r0, #0
 80037ee:	b004      	add	sp, #16
 80037f0:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037f2:	f8d2 c000 	ldr.w	ip, [r2]
 80037f6:	f1bc 0f00 	cmp.w	ip, #0
 80037fa:	da09      	bge.n	8003810 <USB_DevInit+0x10c>
      if (i == 0U)
 80037fc:	b933      	cbnz	r3, 800380c <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037fe:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003800:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003802:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003804:	f8c2 e008 	str.w	lr, [r2, #8]
 8003808:	3220      	adds	r2, #32
 800380a:	e7c0      	b.n	800378e <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800380c:	6010      	str	r0, [r2, #0]
 800380e:	e7f7      	b.n	8003800 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003810:	6011      	str	r1, [r2, #0]
 8003812:	e7f5      	b.n	8003800 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003814:	f8d2 8000 	ldr.w	r8, [r2]
 8003818:	f1b8 0f00 	cmp.w	r8, #0
 800381c:	da0a      	bge.n	8003834 <USB_DevInit+0x130>
      if (i == 0U)
 800381e:	b939      	cbnz	r1, 8003830 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003820:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003824:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003826:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003828:	f8c2 c008 	str.w	ip, [r2, #8]
 800382c:	3220      	adds	r2, #32
 800382e:	e7ba      	b.n	80037a6 <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003830:	6015      	str	r5, [r2, #0]
 8003832:	e7f7      	b.n	8003824 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003834:	6010      	str	r0, [r2, #0]
 8003836:	e7f5      	b.n	8003824 <USB_DevInit+0x120>
 8003838:	803c3800 	.word	0x803c3800

0800383c <USB_DevDisconnect>:
{
 800383c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800383e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800384a:	2003      	movs	r0, #3
 800384c:	f7fd fc52 	bl	80010f4 <HAL_Delay>
}
 8003850:	2000      	movs	r0, #0
 8003852:	bd08      	pop	{r3, pc}

08003854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003856:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003858:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800385a:	2244      	movs	r2, #68	; 0x44
 800385c:	2100      	movs	r1, #0
 800385e:	a805      	add	r0, sp, #20
 8003860:	f000 fe2b 	bl	80044ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003864:	4622      	mov	r2, r4
 8003866:	2100      	movs	r1, #0
 8003868:	4668      	mov	r0, sp
 800386a:	f000 fe26 	bl	80044ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800386e:	2100      	movs	r1, #0
 8003870:	2288      	movs	r2, #136	; 0x88
 8003872:	a816      	add	r0, sp, #88	; 0x58
 8003874:	f000 fe21 	bl	80044ba <memset>

  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003878:	f7fe fad6 	bl	8001e28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800387c:	4a22      	ldr	r2, [pc, #136]	; (8003908 <SystemClock_Config+0xb4>)
 800387e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003882:	f023 0318 	bic.w	r3, r3, #24
 8003886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800388a:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800388c:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800388e:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003890:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003892:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003894:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003896:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003898:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800389a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 800389c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800389e:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80038a0:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80038a2:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038a4:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80038a6:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80038a8:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80038aa:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80038ac:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80038ae:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038b0:	f7fe fc1c 	bl	80020ec <HAL_RCC_OscConfig>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b4:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80038b6:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b8:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80038ba:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038bc:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038c0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038c2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038c4:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80038c6:	f7fe fe37 	bl	8002538 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <SystemClock_Config+0xb8>)
 80038cc:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80038ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038d2:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80038d4:	2318      	movs	r3, #24
 80038d6:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038d8:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80038da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038de:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038e0:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80038e2:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80038e4:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80038e6:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80038e8:	9436      	str	r4, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80038ea:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80038ec:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80038ee:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80038f0:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80038f2:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038f4:	f7fe ffe2 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80038f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80038fc:	f7fe faa4 	bl	8001e48 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003900:	f7ff f9c4 	bl	8002c8c <HAL_RCCEx_EnableMSIPLLMode>
}
 8003904:	b039      	add	sp, #228	; 0xe4
 8003906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	0001208d 	.word	0x0001208d

08003910 <main>:
{
 8003910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003914:	b0a1      	sub	sp, #132	; 0x84
  HAL_Init();
 8003916:	f7fd fbcf 	bl	80010b8 <HAL_Init>
  SystemClock_Config();
 800391a:	f7ff ff9b 	bl	8003854 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391e:	2214      	movs	r2, #20
 8003920:	2100      	movs	r1, #0
 8003922:	a807      	add	r0, sp, #28
 8003924:	f000 fdc9 	bl	80044ba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003928:	4bad      	ldr	r3, [pc, #692]	; (8003be0 <main+0x2d0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800392a:	48ae      	ldr	r0, [pc, #696]	; (8003be4 <main+0x2d4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800392c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800392e:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 8003c20 <main+0x310>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003932:	f042 0210 	orr.w	r2, r2, #16
 8003936:	64da      	str	r2, [r3, #76]	; 0x4c
 8003938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800393a:	f002 0210 	and.w	r2, r2, #16
 800393e:	9202      	str	r2, [sp, #8]
 8003940:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003944:	f042 0204 	orr.w	r2, r2, #4
 8003948:	64da      	str	r2, [r3, #76]	; 0x4c
 800394a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800394c:	f002 0204 	and.w	r2, r2, #4
 8003950:	9203      	str	r2, [sp, #12]
 8003952:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	64da      	str	r2, [r3, #76]	; 0x4c
 800395c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800395e:	f002 0201 	and.w	r2, r2, #1
 8003962:	9204      	str	r2, [sp, #16]
 8003964:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003968:	f042 0202 	orr.w	r2, r2, #2
 800396c:	64da      	str	r2, [r3, #76]	; 0x4c
 800396e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003970:	f002 0202 	and.w	r2, r2, #2
 8003974:	9205      	str	r2, [sp, #20]
 8003976:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003978:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800397a:	f042 0208 	orr.w	r2, r2, #8
 800397e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8003988:	2200      	movs	r2, #0
 800398a:	f240 1115 	movw	r1, #277	; 0x115
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800398e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8003990:	f7fd fe3c 	bl	800160c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8003994:	2200      	movs	r2, #0
 8003996:	f248 1104 	movw	r1, #33028	; 0x8104
 800399a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800399e:	f7fd fe35 	bl	800160c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80039a2:	2200      	movs	r2, #0
 80039a4:	f24f 0134 	movw	r1, #61492	; 0xf034
 80039a8:	488f      	ldr	r0, [pc, #572]	; (8003be8 <main+0x2d8>)
 80039aa:	f7fd fe2f 	bl	800160c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80039ae:	2200      	movs	r2, #0
 80039b0:	f243 0181 	movw	r1, #12417	; 0x3081
 80039b4:	488d      	ldr	r0, [pc, #564]	; (8003bec <main+0x2dc>)
 80039b6:	f7fd fe29 	bl	800160c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80039ba:	2200      	movs	r2, #0
 80039bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80039c0:	488b      	ldr	r0, [pc, #556]	; (8003bf0 <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c2:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80039c4:	f7fd fe22 	bl	800160c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c8:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80039ca:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ce:	a907      	add	r1, sp, #28
 80039d0:	4884      	ldr	r0, [pc, #528]	; (8003be4 <main+0x2d4>)
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80039d2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039da:	f7fd fca1 	bl	8001320 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80039de:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039e0:	a907      	add	r1, sp, #28
 80039e2:	4880      	ldr	r0, [pc, #512]	; (8003be4 <main+0x2d4>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80039e4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039e6:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ec:	f7fd fc98 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80039f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80039f6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039f8:	4b7e      	ldr	r3, [pc, #504]	; (8003bf4 <main+0x2e4>)
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80039fa:	487d      	ldr	r0, [pc, #500]	; (8003bf0 <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039fc:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80039fe:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003a04:	f7fd fc8c 	bl	8001320 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8003a08:	233f      	movs	r3, #63	; 0x3f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0a:	a907      	add	r1, sp, #28
 8003a0c:	4878      	ldr	r0, [pc, #480]	; (8003bf0 <main+0x2e0>)
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8003a0e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003a10:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a16:	f7fd fc83 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003a1a:	f248 1304 	movw	r3, #33028	; 0x8104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1e:	a907      	add	r1, sp, #28
 8003a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003a26:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8003a28:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a30:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a32:	f7fd fc75 	bl	8001320 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003a36:	a907      	add	r1, sp, #28
 8003a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8003a3c:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a44:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a46:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003a48:	f7fd fc6a 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003a4c:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003a4e:	a907      	add	r1, sp, #28
 8003a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003a56:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003a58:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a5e:	f04f 0b05 	mov.w	fp, #5
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003a62:	f7fd fc5d 	bl	8001320 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003a66:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	a907      	add	r1, sp, #28
 8003a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003a6e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a70:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a74:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7a:	f7fd fc51 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003a7e:	a907      	add	r1, sp, #28
 8003a80:	4859      	ldr	r0, [pc, #356]	; (8003be8 <main+0x2d8>)
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8003a82:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a84:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003a8a:	f7fd fc49 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003a8e:	a907      	add	r1, sp, #28
 8003a90:	4855      	ldr	r0, [pc, #340]	; (8003be8 <main+0x2d8>)
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003a92:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003a94:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003a9a:	f7fd fc41 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8003a9e:	f24f 0334 	movw	r3, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aa2:	a907      	add	r1, sp, #28
 8003aa4:	4850      	ldr	r0, [pc, #320]	; (8003be8 <main+0x2d8>)
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8003aa6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aac:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aae:	f7fd fc37 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8003ab2:	f64c 4304 	movw	r3, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ab6:	a907      	add	r1, sp, #28
 8003ab8:	484c      	ldr	r0, [pc, #304]	; (8003bec <main+0x2dc>)
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8003aba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003abc:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ac2:	f7fd fc2d 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8003ac6:	f243 0381 	movw	r3, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aca:	a907      	add	r1, sp, #28
 8003acc:	4847      	ldr	r0, [pc, #284]	; (8003bec <main+0x2dc>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8003ace:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ad6:	f7fd fc23 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8003ada:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ade:	a907      	add	r1, sp, #28
 8003ae0:	4843      	ldr	r0, [pc, #268]	; (8003bf0 <main+0x2e0>)
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8003ae2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aea:	f7fd fc19 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003aee:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af2:	a907      	add	r1, sp, #28
 8003af4:	483e      	ldr	r0, [pc, #248]	; (8003bf0 <main+0x2e0>)
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003af6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003af8:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afe:	f7fd fc0f 	bl	8001320 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003b02:	a907      	add	r1, sp, #28
 8003b04:	4839      	ldr	r0, [pc, #228]	; (8003bec <main+0x2dc>)
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8003b06:	9707      	str	r7, [sp, #28]
  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b08:	f04f 0907 	mov.w	r9, #7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0c:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b10:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b12:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003b16:	f7fd fc03 	bl	8001320 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003b1a:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b1c:	a907      	add	r1, sp, #28
 8003b1e:	4833      	ldr	r0, [pc, #204]	; (8003bec <main+0x2dc>)
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003b20:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003b22:	f44f 7a40 	mov.w	sl, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b26:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b28:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b2c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b30:	f7fd fbf6 	bl	8001320 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b34:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b36:	2312      	movs	r3, #18
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b38:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3a:	482b      	ldr	r0, [pc, #172]	; (8003be8 <main+0x2d8>)
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003b3c:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b40:	2604      	movs	r6, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b42:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b44:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b46:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b48:	f7fd fbea 	bl	8001320 <HAL_GPIO_Init>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8003b4c:	482a      	ldr	r0, [pc, #168]	; (8003bf8 <main+0x2e8>)
 8003b4e:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <main+0x2ec>)
 8003b50:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003b52:	6206      	str	r6, [r0, #32]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8003b54:	f44f 7380 	mov.w	r3, #256	; 0x100
  hi2c2.Instance = I2C2;
 8003b58:	4e29      	ldr	r6, [pc, #164]	; (8003c00 <main+0x2f0>)
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8003b5a:	7105      	strb	r5, [r0, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003b5c:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8003b5e:	60c7      	str	r7, [r0, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8003b60:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8003b62:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8003b64:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8003b66:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8003b68:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8003b6a:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8003b6c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8003b6e:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8003b70:	f7fd fb62 	bl	8001238 <HAL_DFSDM_ChannelInit>
  hi2c2.Init.Timing = 0x10909CEC;
 8003b74:	4a23      	ldr	r2, [pc, #140]	; (8003c04 <main+0x2f4>)
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <main+0x2f8>)
  hi2c2.Init.OwnAddress1 = 0;
 8003b78:	60b4      	str	r4, [r6, #8]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b7a:	4630      	mov	r0, r6
  hi2c2.Init.Timing = 0x10909CEC;
 8003b7c:	e886 000c 	stmia.w	r6, {r2, r3}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b80:	60f5      	str	r5, [r6, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b82:	6134      	str	r4, [r6, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003b84:	6174      	str	r4, [r6, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b86:	61b4      	str	r4, [r6, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b88:	61f4      	str	r4, [r6, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b8a:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b8c:	f7fd fe87 	bl	800189e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b90:	4621      	mov	r1, r4
 8003b92:	4630      	mov	r0, r6
 8003b94:	f7fe f862 	bl	8001c5c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7fe f884 	bl	8001ca8 <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Init.ClockPrescaler = 255;
 8003ba0:	491a      	ldr	r1, [pc, #104]	; (8003c0c <main+0x2fc>)
  hqspi.Instance = QUADSPI;
 8003ba2:	481b      	ldr	r0, [pc, #108]	; (8003c10 <main+0x300>)
  huart1.Instance = USART1;
 8003ba4:	4e1b      	ldr	r6, [pc, #108]	; (8003c14 <main+0x304>)
  hqspi.Init.FifoThreshold = 1;
 8003ba6:	6085      	str	r5, [r0, #8]
  hqspi.Init.ClockPrescaler = 255;
 8003ba8:	23ff      	movs	r3, #255	; 0xff
 8003baa:	e880 000a 	stmia.w	r0, {r1, r3}
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003bae:	60c4      	str	r4, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8003bb0:	6105      	str	r5, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003bb2:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003bb4:	6184      	str	r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003bb6:	f7fe f9ab 	bl	8001f10 <HAL_QSPI_Init>
  hspi3.Instance = SPI3;
 8003bba:	4817      	ldr	r0, [pc, #92]	; (8003c18 <main+0x308>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003bbc:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <main+0x30c>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003bbe:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003bc0:	f44f 7582 	mov.w	r5, #260	; 0x104
 8003bc4:	e880 0028 	stmia.w	r0, {r3, r5}
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003bcc:	f8c0 a00c 	str.w	sl, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bd0:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bd2:	6144      	str	r4, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003bd4:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd6:	61c4      	str	r4, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bd8:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bda:	6244      	str	r4, [r0, #36]	; 0x24
 8003bdc:	e022      	b.n	8003c24 <main+0x314>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	48001000 	.word	0x48001000
 8003be8:	48000400 	.word	0x48000400
 8003bec:	48000c00 	.word	0x48000c00
 8003bf0:	48000800 	.word	0x48000800
 8003bf4:	10210000 	.word	0x10210000
 8003bf8:	20000308 	.word	0x20000308
 8003bfc:	40016020 	.word	0x40016020
 8003c00:	200007c0 	.word	0x200007c0
 8003c04:	40005800 	.word	0x40005800
 8003c08:	10909cec 	.word	0x10909cec
 8003c0c:	a0001000 	.word	0xa0001000
 8003c10:	200009a4 	.word	0x200009a4
 8003c14:	20000870 	.word	0x20000870
 8003c18:	2000080c 	.word	0x2000080c
 8003c1c:	40003c00 	.word	0x40003c00
 8003c20:	10110000 	.word	0x10110000
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c24:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003c26:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c2a:	6304      	str	r4, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c2c:	f8c0 8034 	str.w	r8, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003c30:	f7ff f834 	bl	8002c9c <HAL_SPI_Init>
  huart1.Init.BaudRate = 9600;
 8003c34:	4ba6      	ldr	r3, [pc, #664]	; (8003ed0 <main+0x5c0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c36:	60b4      	str	r4, [r6, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c38:	f04f 090c 	mov.w	r9, #12
  huart1.Init.BaudRate = 9600;
 8003c3c:	f44f 5a16 	mov.w	sl, #9600	; 0x2580
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c40:	4630      	mov	r0, r6
  huart1.Init.BaudRate = 9600;
 8003c42:	e886 0408 	stmia.w	r6, {r3, sl}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c46:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c48:	6134      	str	r4, [r6, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c4a:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c4c:	61f4      	str	r4, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c4e:	6234      	str	r4, [r6, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c50:	6274      	str	r4, [r6, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c52:	f8c6 9014 	str.w	r9, [r6, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c56:	f7ff fc95 	bl	8003584 <HAL_UART_Init>
  huart3.Instance = USART3;
 8003c5a:	489e      	ldr	r0, [pc, #632]	; (8003ed4 <main+0x5c4>)
  huart3.Init.BaudRate = 115200;
 8003c5c:	4b9e      	ldr	r3, [pc, #632]	; (8003ed8 <main+0x5c8>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c5e:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8003c60:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003c64:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c68:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c6a:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c6c:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c6e:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c70:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c72:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c74:	f8c0 9014 	str.w	r9, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c78:	f7ff fc84 	bl	8003584 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003c7c:	4897      	ldr	r0, [pc, #604]	; (8003edc <main+0x5cc>)
  huart4.Instance = UART4;
 8003c7e:	4d98      	ldr	r5, [pc, #608]	; (8003ee0 <main+0x5d0>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003c80:	60c7      	str	r7, [r0, #12]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003c82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c86:	f04f 0806 	mov.w	r8, #6
 8003c8a:	e880 0108 	stmia.w	r0, {r3, r8}
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003c8e:	6144      	str	r4, [r0, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003c90:	6187      	str	r7, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003c92:	61c4      	str	r4, [r0, #28]
  htim6.Instance = TIM6;
 8003c94:	4f93      	ldr	r7, [pc, #588]	; (8003ee4 <main+0x5d4>)
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003c96:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003c98:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003c9a:	6284      	str	r4, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003c9c:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003c9e:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003ca0:	f7fe f827 	bl	8001cf2 <HAL_PCD_Init>
  htim6.Init.Prescaler = 999;
 8003ca4:	4b90      	ldr	r3, [pc, #576]	; (8003ee8 <main+0x5d8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ca6:	9407      	str	r4, [sp, #28]
  htim6.Init.Prescaler = 999;
 8003ca8:	f240 3ce7 	movw	ip, #999	; 0x3e7
 8003cac:	e887 1008 	stmia.w	r7, {r3, ip}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003cb0:	4638      	mov	r0, r7
  htim6.Init.Period = 40000;
 8003cb2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003cb6:	60fb      	str	r3, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cb8:	9408      	str	r4, [sp, #32]
 8003cba:	9409      	str	r4, [sp, #36]	; 0x24
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cbc:	60bc      	str	r4, [r7, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cbe:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003cc0:	f7ff f970 	bl	8002fa4 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003cc4:	a907      	add	r1, sp, #28
 8003cc6:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cc8:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cca:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ccc:	f7ff f984 	bl	8002fd8 <HAL_TIMEx_MasterConfigSynchronization>
  huart4.Instance = UART4;
 8003cd0:	4b86      	ldr	r3, [pc, #536]	; (8003eec <main+0x5dc>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003cd2:	60ac      	str	r4, [r5, #8]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003cd4:	4628      	mov	r0, r5
  huart4.Init.BaudRate = 9600;
 8003cd6:	e885 0408 	stmia.w	r5, {r3, sl}
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003cda:	60ec      	str	r4, [r5, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003cdc:	612c      	str	r4, [r5, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cde:	61ac      	str	r4, [r5, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ce0:	61ec      	str	r4, [r5, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ce2:	622c      	str	r4, [r5, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ce4:	626c      	str	r4, [r5, #36]	; 0x24
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003ce6:	f8c5 9014 	str.w	r9, [r5, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003cea:	f7ff fc4b 	bl	8003584 <HAL_UART_Init>
  BSP_TSENSOR_Init();
 8003cee:	f7fd f947 	bl	8000f80 <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,(uint8_t*)"\r\nAT\r\n",6,5000);
 8003cf2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cf6:	4642      	mov	r2, r8
 8003cf8:	497d      	ldr	r1, [pc, #500]	; (8003ef0 <main+0x5e0>)
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	f7ff fbb9 	bl	8003472 <HAL_UART_Transmit>
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8003d00:	6832      	ldr	r2, [r6, #0]
  HAL_UART_Transmit(&huart4,(uint8_t*)"\r\nAT\r\n",6,5000);
 8003d02:	497b      	ldr	r1, [pc, #492]	; (8003ef0 <main+0x5e0>)
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8003d04:	6813      	ldr	r3, [r2, #0]
		  char a[100] = "\r\nAT\r\n";
 8003d06:	4e7a      	ldr	r6, [pc, #488]	; (8003ef0 <main+0x5e0>)
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8003d08:	f043 0320 	orr.w	r3, r3, #32
 8003d0c:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart4,(uint8_t*)"\r\nAT\r\n",6,5000);
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d14:	4642      	mov	r2, r8
 8003d16:	f7ff fbac 	bl	8003472 <HAL_UART_Transmit>
  __HAL_UART_ENABLE_IT(&huart4,UART_IT_RXNE);
 8003d1a:	682a      	ldr	r2, [r5, #0]
	  if(RX_BUFF1[0] == '1')
 8003d1c:	4d75      	ldr	r5, [pc, #468]	; (8003ef4 <main+0x5e4>)
  __HAL_UART_ENABLE_IT(&huart4,UART_IT_RXNE);
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	f043 0320 	orr.w	r3, r3, #32
 8003d24:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 8003d26:	4638      	mov	r0, r7
 8003d28:	f7ff f80a 	bl	8002d40 <HAL_TIM_Base_Start_IT>
 8003d2c:	462c      	mov	r4, r5
	  if(RX_BUFF1[0] == '1')
 8003d2e:	782b      	ldrb	r3, [r5, #0]
 8003d30:	2b31      	cmp	r3, #49	; 0x31
 8003d32:	d121      	bne.n	8003d78 <main+0x468>
		  char a[100] = "\r\nAT\r\n";
 8003d34:	6830      	ldr	r0, [r6, #0]
 8003d36:	88b2      	ldrh	r2, [r6, #4]
 8003d38:	79b3      	ldrb	r3, [r6, #6]
 8003d3a:	9007      	str	r0, [sp, #28]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8003d42:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 8003d46:	225d      	movs	r2, #93	; 0x5d
 8003d48:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8003d4c:	f000 fbb5 	bl	80044ba <memset>
		  int lenght = strlen(a);
 8003d50:	a807      	add	r0, sp, #28
 8003d52:	f7fc fa39 	bl	80001c8 <strlen>
		  HAL_UART_Transmit(&huart1,(uint8_t*)(&a),lenght,5000);
 8003d56:	b287      	uxth	r7, r0
 8003d58:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d5c:	463a      	mov	r2, r7
 8003d5e:	a907      	add	r1, sp, #28
 8003d60:	4865      	ldr	r0, [pc, #404]	; (8003ef8 <main+0x5e8>)
 8003d62:	f7ff fb86 	bl	8003472 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4,(uint8_t*)(&a),lenght,5000);
 8003d66:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d6a:	463a      	mov	r2, r7
 8003d6c:	a907      	add	r1, sp, #28
 8003d6e:	485c      	ldr	r0, [pc, #368]	; (8003ee0 <main+0x5d0>)
 8003d70:	f7ff fb7f 	bl	8003472 <HAL_UART_Transmit>
		  RX_BUFF1[0] = '\0';
 8003d74:	2300      	movs	r3, #0
 8003d76:	702b      	strb	r3, [r5, #0]
	  if(RX_BUFF1[0] == '2')
 8003d78:	7823      	ldrb	r3, [r4, #0]
 8003d7a:	2b32      	cmp	r3, #50	; 0x32
 8003d7c:	d11f      	bne.n	8003dbe <main+0x4ae>
		  char a[100] = "\r\nAT+JOIN\r\n";
 8003d7e:	4a5f      	ldr	r2, [pc, #380]	; (8003efc <main+0x5ec>)
 8003d80:	6810      	ldr	r0, [r2, #0]
 8003d82:	6851      	ldr	r1, [r2, #4]
 8003d84:	ab07      	add	r3, sp, #28
 8003d86:	c303      	stmia	r3!, {r0, r1}
 8003d88:	6890      	ldr	r0, [r2, #8]
 8003d8a:	6018      	str	r0, [r3, #0]
 8003d8c:	2258      	movs	r2, #88	; 0x58
 8003d8e:	2100      	movs	r1, #0
 8003d90:	a80a      	add	r0, sp, #40	; 0x28
 8003d92:	f000 fb92 	bl	80044ba <memset>
	  	  int lenght = strlen(a);
 8003d96:	a807      	add	r0, sp, #28
 8003d98:	f7fc fa16 	bl	80001c8 <strlen>
	  	  HAL_UART_Transmit(&huart1,(uint8_t*)(&a),lenght,5000);
 8003d9c:	b287      	uxth	r7, r0
 8003d9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003da2:	463a      	mov	r2, r7
 8003da4:	a907      	add	r1, sp, #28
 8003da6:	4854      	ldr	r0, [pc, #336]	; (8003ef8 <main+0x5e8>)
 8003da8:	f7ff fb63 	bl	8003472 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart4,(uint8_t*)(&a),lenght,5000);
 8003dac:	f241 3388 	movw	r3, #5000	; 0x1388
 8003db0:	463a      	mov	r2, r7
 8003db2:	a907      	add	r1, sp, #28
 8003db4:	484a      	ldr	r0, [pc, #296]	; (8003ee0 <main+0x5d0>)
 8003db6:	f7ff fb5c 	bl	8003472 <HAL_UART_Transmit>
	  	  RX_BUFF1[0] = '\0';
 8003dba:	2300      	movs	r3, #0
 8003dbc:	7023      	strb	r3, [r4, #0]
	  if(RX_BUFF1[0] == '3')
 8003dbe:	7823      	ldrb	r3, [r4, #0]
 8003dc0:	2b33      	cmp	r3, #51	; 0x33
 8003dc2:	d129      	bne.n	8003e18 <main+0x508>
	  	  char a[100] = "\r\nAT+NJS=?\r\n";
 8003dc4:	4b4e      	ldr	r3, [pc, #312]	; (8003f00 <main+0x5f0>)
 8003dc6:	aa07      	add	r2, sp, #28
 8003dc8:	f103 0e08 	add.w	lr, r3, #8
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	4617      	mov	r7, r2
 8003dd2:	c703      	stmia	r7!, {r0, r1}
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	4573      	cmp	r3, lr
 8003dd8:	463a      	mov	r2, r7
 8003dda:	d1f7      	bne.n	8003dcc <main+0x4bc>
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	791b      	ldrb	r3, [r3, #4]
 8003de0:	713b      	strb	r3, [r7, #4]
 8003de2:	6038      	str	r0, [r7, #0]
 8003de4:	2257      	movs	r2, #87	; 0x57
 8003de6:	2100      	movs	r1, #0
 8003de8:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8003dec:	f000 fb65 	bl	80044ba <memset>
	   	  int lenght = strlen(a);
 8003df0:	a807      	add	r0, sp, #28
 8003df2:	f7fc f9e9 	bl	80001c8 <strlen>
	   	  HAL_UART_Transmit(&huart1,(uint8_t*)(&a),lenght,5000);
 8003df6:	b287      	uxth	r7, r0
 8003df8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dfc:	463a      	mov	r2, r7
 8003dfe:	a907      	add	r1, sp, #28
 8003e00:	483d      	ldr	r0, [pc, #244]	; (8003ef8 <main+0x5e8>)
 8003e02:	f7ff fb36 	bl	8003472 <HAL_UART_Transmit>
	   	  HAL_UART_Transmit(&huart4,(uint8_t*)(&a),lenght,5000);
 8003e06:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e0a:	463a      	mov	r2, r7
 8003e0c:	a907      	add	r1, sp, #28
 8003e0e:	4834      	ldr	r0, [pc, #208]	; (8003ee0 <main+0x5d0>)
 8003e10:	f7ff fb2f 	bl	8003472 <HAL_UART_Transmit>
	   	  RX_BUFF1[0] = '\0';
 8003e14:	2300      	movs	r3, #0
 8003e16:	7023      	strb	r3, [r4, #0]
	  if(RX_BUFF1[0] == '4')
 8003e18:	7823      	ldrb	r3, [r4, #0]
 8003e1a:	2b34      	cmp	r3, #52	; 0x34
 8003e1c:	d12b      	bne.n	8003e76 <main+0x566>
	      char a[100] = "\r\nAT+SENDB=50:0067FEDB016864020207D003020BB8\r\n";
 8003e1e:	4b39      	ldr	r3, [pc, #228]	; (8003f04 <main+0x5f4>)
 8003e20:	aa07      	add	r2, sp, #28
 8003e22:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	4617      	mov	r7, r2
 8003e2c:	c703      	stmia	r7!, {r0, r1}
 8003e2e:	3308      	adds	r3, #8
 8003e30:	4573      	cmp	r3, lr
 8003e32:	463a      	mov	r2, r7
 8003e34:	d1f7      	bne.n	8003e26 <main+0x516>
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	8899      	ldrh	r1, [r3, #4]
 8003e3a:	799b      	ldrb	r3, [r3, #6]
 8003e3c:	71bb      	strb	r3, [r7, #6]
 8003e3e:	6038      	str	r0, [r7, #0]
 8003e40:	80b9      	strh	r1, [r7, #4]
 8003e42:	2235      	movs	r2, #53	; 0x35
 8003e44:	2100      	movs	r1, #0
 8003e46:	f10d 004b 	add.w	r0, sp, #75	; 0x4b
 8003e4a:	f000 fb36 	bl	80044ba <memset>
	  	  int lenght = strlen(a);
 8003e4e:	a807      	add	r0, sp, #28
 8003e50:	f7fc f9ba 	bl	80001c8 <strlen>
	  	  HAL_UART_Transmit(&huart1,(uint8_t*)(&a),lenght,5000);
 8003e54:	b287      	uxth	r7, r0
 8003e56:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e5a:	463a      	mov	r2, r7
 8003e5c:	a907      	add	r1, sp, #28
 8003e5e:	4826      	ldr	r0, [pc, #152]	; (8003ef8 <main+0x5e8>)
 8003e60:	f7ff fb07 	bl	8003472 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart4,(uint8_t*)(&a),lenght,5000);
 8003e64:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e68:	463a      	mov	r2, r7
 8003e6a:	a907      	add	r1, sp, #28
 8003e6c:	481c      	ldr	r0, [pc, #112]	; (8003ee0 <main+0x5d0>)
 8003e6e:	f7ff fb00 	bl	8003472 <HAL_UART_Transmit>
	  	  RX_BUFF1[0] = '\0';
 8003e72:	2300      	movs	r3, #0
 8003e74:	7023      	strb	r3, [r4, #0]
	  if(RX_BUFF1[0] == '5')
 8003e76:	7823      	ldrb	r3, [r4, #0]
 8003e78:	2b35      	cmp	r3, #53	; 0x35
 8003e7a:	f47f af58 	bne.w	8003d2e <main+0x41e>
		  Temp_Value = BSP_TSENSOR_ReadTemp();
 8003e7e:	f7fd f891 	bl	8000fa4 <BSP_TSENSOR_ReadTemp>
 8003e82:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <main+0x5f8>)
		  int16_t P_Temp_Value = (int16_t)(Temp_Value * 10);
 8003e84:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
		  Temp_Value = BSP_TSENSOR_ReadTemp();
 8003e88:	ed83 0a00 	vstr	s0, [r3]
		  int16_t P_Temp_Value = (int16_t)(Temp_Value * 10);
 8003e8c:	ee20 0a27 	vmul.f32	s0, s0, s15
		  itoa (P_Temp_Value,a,16);
 8003e90:	2210      	movs	r2, #16
		  int16_t P_Temp_Value = (int16_t)(Temp_Value * 10);
 8003e92:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		  itoa (P_Temp_Value,a,16);
 8003e96:	a907      	add	r1, sp, #28
		  int16_t P_Temp_Value = (int16_t)(Temp_Value * 10);
 8003e98:	edcd 7a01 	vstr	s15, [sp, #4]
		  itoa (P_Temp_Value,a,16);
 8003e9c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8003ea0:	f000 fafe 	bl	80044a0 <itoa>
		  int lenght = strlen(a);
 8003ea4:	a807      	add	r0, sp, #28
 8003ea6:	f7fc f98f 	bl	80001c8 <strlen>
		  HAL_UART_Transmit(&huart1,(uint8_t*)(&a),lenght,5000);
 8003eaa:	b287      	uxth	r7, r0
 8003eac:	f241 3388 	movw	r3, #5000	; 0x1388
 8003eb0:	463a      	mov	r2, r7
 8003eb2:	a907      	add	r1, sp, #28
 8003eb4:	4810      	ldr	r0, [pc, #64]	; (8003ef8 <main+0x5e8>)
 8003eb6:	f7ff fadc 	bl	8003472 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4,(uint8_t*)(&a),lenght,5000);
 8003eba:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ebe:	463a      	mov	r2, r7
 8003ec0:	a907      	add	r1, sp, #28
 8003ec2:	4807      	ldr	r0, [pc, #28]	; (8003ee0 <main+0x5d0>)
 8003ec4:	f7ff fad5 	bl	8003472 <HAL_UART_Transmit>
		  RX_BUFF1[0] = '\0';
 8003ec8:	2300      	movs	r3, #0
 8003eca:	7023      	strb	r3, [r4, #0]
 8003ecc:	e72f      	b.n	8003d2e <main+0x41e>
 8003ece:	bf00      	nop
 8003ed0:	40013800 	.word	0x40013800
 8003ed4:	20000340 	.word	0x20000340
 8003ed8:	40004800 	.word	0x40004800
 8003edc:	200003b8 	.word	0x200003b8
 8003ee0:	20000928 	.word	0x20000928
 8003ee4:	200008e8 	.word	0x200008e8
 8003ee8:	40001000 	.word	0x40001000
 8003eec:	40004c00 	.word	0x40004c00
 8003ef0:	08006115 	.word	0x08006115
 8003ef4:	200009e8 	.word	0x200009e8
 8003ef8:	20000870 	.word	0x20000870
 8003efc:	08005fd8 	.word	0x08005fd8
 8003f00:	0800603c 	.word	0x0800603c
 8003f04:	080060a0 	.word	0x080060a0
 8003f08:	200009a0 	.word	0x200009a0

08003f0c <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
BSP_LED_Toggle(LED2);
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f7fc bfdb 	b.w	8000ec8 <BSP_LED_Toggle>
	...

08003f14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <HAL_MspInit+0x2c>)
 8003f16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	661a      	str	r2, [r3, #96]	; 0x60
 8003f1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003f20:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f22:	f002 0201 	and.w	r2, r2, #1
 8003f26:	9200      	str	r2, [sp, #0]
 8003f28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f30:	659a      	str	r2, [r3, #88]	; 0x58
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f3c:	b002      	add	sp, #8
 8003f3e:	4770      	bx	lr
 8003f40:	40021000 	.word	0x40021000

08003f44 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003f44:	b500      	push	{lr}
 8003f46:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f48:	2214      	movs	r2, #20
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	a803      	add	r0, sp, #12
 8003f4e:	f000 fab4 	bl	80044ba <memset>
  if(DFSDM1_Init == 0)
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <HAL_DFSDM_ChannelMspInit+0x5c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	bb03      	cbnz	r3, 8003f9a <HAL_DFSDM_ChannelMspInit+0x56>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003f58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f5c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f60:	a903      	add	r1, sp, #12
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003f62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f64:	480f      	ldr	r0, [pc, #60]	; (8003fa4 <HAL_DFSDM_ChannelMspInit+0x60>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003f66:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f6a:	661a      	str	r2, [r3, #96]	; 0x60
 8003f6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f6e:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8003f72:	9201      	str	r2, [sp, #4]
 8003f74:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f78:	f042 0210 	orr.w	r2, r2, #16
 8003f7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	9302      	str	r3, [sp, #8]
 8003f86:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003f88:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003f8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003f92:	2306      	movs	r3, #6
 8003f94:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f96:	f7fd f9c3 	bl	8001320 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8003f9a:	b009      	add	sp, #36	; 0x24
 8003f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fa0:	2000022c 	.word	0x2000022c
 8003fa4:	48001000 	.word	0x48001000

08003fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fa8:	b510      	push	{r4, lr}
 8003faa:	4604      	mov	r4, r0
 8003fac:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fae:	2214      	movs	r2, #20
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	a803      	add	r0, sp, #12
 8003fb4:	f000 fa81 	bl	80044ba <memset>
  if(hi2c->Instance==I2C2)
 8003fb8:	6822      	ldr	r2, [r4, #0]
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <HAL_I2C_MspInit+0x60>)
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d121      	bne.n	8004004 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc0:	4c12      	ldr	r4, [pc, #72]	; (800400c <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc2:	4813      	ldr	r0, [pc, #76]	; (8004010 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003fc6:	f043 0302 	orr.w	r3, r3, #2
 8003fca:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003fcc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003fd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003fda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fdc:	2312      	movs	r3, #18
 8003fde:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003fea:	2304      	movs	r3, #4
 8003fec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fee:	f7fd f997 	bl	8001320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ff4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ff8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004000:	9302      	str	r3, [sp, #8]
 8004002:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004004:	b008      	add	sp, #32
 8004006:	bd10      	pop	{r4, pc}
 8004008:	40005800 	.word	0x40005800
 800400c:	40021000 	.word	0x40021000
 8004010:	48000400 	.word	0x48000400

08004014 <HAL_I2C_MspDeInit>:
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C2)
 8004014:	6802      	ldr	r2, [r0, #0]
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <HAL_I2C_MspDeInit+0x20>)
 8004018:	429a      	cmp	r2, r3
 800401a:	d109      	bne.n	8004030 <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800401c:	4a06      	ldr	r2, [pc, #24]	; (8004038 <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 800401e:	4807      	ldr	r0, [pc, #28]	; (800403c <HAL_I2C_MspDeInit+0x28>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004020:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004022:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004026:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8004028:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800402c:	f7fd ba54 	b.w	80014d8 <HAL_GPIO_DeInit>
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40005800 	.word	0x40005800
 8004038:	40021000 	.word	0x40021000
 800403c:	48000400 	.word	0x48000400

08004040 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004040:	b510      	push	{r4, lr}
 8004042:	4604      	mov	r4, r0
 8004044:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004046:	2214      	movs	r2, #20
 8004048:	2100      	movs	r1, #0
 800404a:	a803      	add	r0, sp, #12
 800404c:	f000 fa35 	bl	80044ba <memset>
  if(hqspi->Instance==QUADSPI)
 8004050:	6822      	ldr	r2, [r4, #0]
 8004052:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <HAL_QSPI_MspInit+0x64>)
 8004054:	429a      	cmp	r2, r3
 8004056:	d122      	bne.n	800409e <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004058:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 800405c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004060:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004064:	4810      	ldr	r0, [pc, #64]	; (80040a8 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800406a:	651a      	str	r2, [r3, #80]	; 0x50
 800406c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800406e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004072:	9201      	str	r2, [sp, #4]
 8004074:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004078:	f042 0210 	orr.w	r2, r2, #16
 800407c:	64da      	str	r2, [r3, #76]	; 0x4c
 800407e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	9302      	str	r3, [sp, #8]
 8004086:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8004088:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800408c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408e:	2302      	movs	r3, #2
 8004090:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004092:	2303      	movs	r3, #3
 8004094:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004096:	230a      	movs	r3, #10
 8004098:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800409a:	f7fd f941 	bl	8001320 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800409e:	b008      	add	sp, #32
 80040a0:	bd10      	pop	{r4, pc}
 80040a2:	bf00      	nop
 80040a4:	a0001000 	.word	0xa0001000
 80040a8:	48001000 	.word	0x48001000

080040ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040ac:	b510      	push	{r4, lr}
 80040ae:	4604      	mov	r4, r0
 80040b0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b2:	2214      	movs	r2, #20
 80040b4:	2100      	movs	r1, #0
 80040b6:	a803      	add	r0, sp, #12
 80040b8:	f000 f9ff 	bl	80044ba <memset>
  if(hspi->Instance==SPI3)
 80040bc:	6822      	ldr	r2, [r4, #0]
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <HAL_SPI_MspInit+0x60>)
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d120      	bne.n	8004106 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80040c4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c8:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 80040ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040cc:	4810      	ldr	r0, [pc, #64]	; (8004110 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80040ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d2:	659a      	str	r2, [r3, #88]	; 0x58
 80040d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040d6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80040da:	9201      	str	r2, [sp, #4]
 80040dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040e0:	f042 0204 	orr.w	r2, r2, #4
 80040e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80040e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	9302      	str	r3, [sp, #8]
 80040ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80040f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80040f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f6:	2302      	movs	r3, #2
 80040f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040fa:	2303      	movs	r3, #3
 80040fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80040fe:	2306      	movs	r3, #6
 8004100:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004102:	f7fd f90d 	bl	8001320 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004106:	b008      	add	sp, #32
 8004108:	bd10      	pop	{r4, pc}
 800410a:	bf00      	nop
 800410c:	40003c00 	.word	0x40003c00
 8004110:	48000800 	.word	0x48000800

08004114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004114:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <HAL_TIM_Base_MspInit+0x38>)
 8004118:	6802      	ldr	r2, [r0, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d112      	bne.n	8004144 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800411e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004122:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004124:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004126:	f042 0210 	orr.w	r2, r2, #16
 800412a:	659a      	str	r2, [r3, #88]	; 0x58
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004134:	2200      	movs	r2, #0
 8004136:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004138:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800413a:	f7fc fffb 	bl	8001134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800413e:	2036      	movs	r0, #54	; 0x36
 8004140:	f7fd f82c 	bl	800119c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004144:	b003      	add	sp, #12
 8004146:	f85d fb04 	ldr.w	pc, [sp], #4
 800414a:	bf00      	nop
 800414c:	40001000 	.word	0x40001000

08004150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004150:	b510      	push	{r4, lr}
 8004152:	4604      	mov	r4, r0
 8004154:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004156:	2214      	movs	r2, #20
 8004158:	2100      	movs	r1, #0
 800415a:	a807      	add	r0, sp, #28
 800415c:	f000 f9ad 	bl	80044ba <memset>
  if(huart->Instance==UART4)
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	4a3c      	ldr	r2, [pc, #240]	; (8004254 <HAL_UART_MspInit+0x104>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d128      	bne.n	80041ba <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <HAL_UART_MspInit+0x108>)
 800416a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800416c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004170:	659a      	str	r2, [r3, #88]	; 0x58
 8004172:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004174:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004178:	9201      	str	r2, [sp, #4]
 800417a:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800417c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	64da      	str	r2, [r3, #76]	; 0x4c
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	9302      	str	r3, [sp, #8]
 800418c:	9b02      	ldr	r3, [sp, #8]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004190:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004192:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004194:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004196:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800419c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800419e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a0:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a2:	f7fd f8bd 	bl	8001320 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 3, 0);
 80041a6:	2034      	movs	r0, #52	; 0x34
 80041a8:	2200      	movs	r2, #0
 80041aa:	4621      	mov	r1, r4
 80041ac:	f7fc ffc2 	bl	8001134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80041b0:	2034      	movs	r0, #52	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041b2:	f7fc fff3 	bl	800119c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041b6:	b00c      	add	sp, #48	; 0x30
 80041b8:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 80041ba:	4a28      	ldr	r2, [pc, #160]	; (800425c <HAL_UART_MspInit+0x10c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d125      	bne.n	800420c <HAL_UART_MspInit+0xbc>
    __HAL_RCC_USART1_CLK_ENABLE();
 80041c0:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_UART_MspInit+0x108>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c2:	4827      	ldr	r0, [pc, #156]	; (8004260 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80041c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ca:	661a      	str	r2, [r3, #96]	; 0x60
 80041cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80041d2:	9203      	str	r2, [sp, #12]
 80041d4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041d8:	f042 0202 	orr.w	r2, r2, #2
 80041dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80041de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	9304      	str	r3, [sp, #16]
 80041e6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80041e8:	23c0      	movs	r3, #192	; 0xc0
 80041ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ec:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ee:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f0:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041f4:	2307      	movs	r3, #7
 80041f6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041fa:	f7fd f891 	bl	8001320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80041fe:	2025      	movs	r0, #37	; 0x25
 8004200:	2200      	movs	r2, #0
 8004202:	4621      	mov	r1, r4
 8004204:	f7fc ff96 	bl	8001134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004208:	2025      	movs	r0, #37	; 0x25
 800420a:	e7d2      	b.n	80041b2 <HAL_UART_MspInit+0x62>
  else if(huart->Instance==USART3)
 800420c:	4a15      	ldr	r2, [pc, #84]	; (8004264 <HAL_UART_MspInit+0x114>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d1d1      	bne.n	80041b6 <HAL_UART_MspInit+0x66>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004212:	4b11      	ldr	r3, [pc, #68]	; (8004258 <HAL_UART_MspInit+0x108>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004214:	4814      	ldr	r0, [pc, #80]	; (8004268 <HAL_UART_MspInit+0x118>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004216:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004218:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800421c:	659a      	str	r2, [r3, #88]	; 0x58
 800421e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004220:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004224:	9205      	str	r2, [sp, #20]
 8004226:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800422a:	f042 0208 	orr.w	r2, r2, #8
 800422e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	9306      	str	r3, [sp, #24]
 8004238:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800423a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800423e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004240:	2302      	movs	r3, #2
 8004242:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004244:	2303      	movs	r3, #3
 8004246:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004248:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800424a:	2307      	movs	r3, #7
 800424c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800424e:	f7fd f867 	bl	8001320 <HAL_GPIO_Init>
}
 8004252:	e7b0      	b.n	80041b6 <HAL_UART_MspInit+0x66>
 8004254:	40004c00 	.word	0x40004c00
 8004258:	40021000 	.word	0x40021000
 800425c:	40013800 	.word	0x40013800
 8004260:	48000400 	.word	0x48000400
 8004264:	40004800 	.word	0x40004800
 8004268:	48000c00 	.word	0x48000c00

0800426c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800426c:	b510      	push	{r4, lr}
 800426e:	4604      	mov	r4, r0
 8004270:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004272:	2214      	movs	r2, #20
 8004274:	2100      	movs	r1, #0
 8004276:	a803      	add	r0, sp, #12
 8004278:	f000 f91f 	bl	80044ba <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004282:	d13c      	bne.n	80042fe <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004284:	4c20      	ldr	r4, [pc, #128]	; (8004308 <HAL_PCD_MspInit+0x9c>)
 8004286:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800428e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004298:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800429a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800429e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80042a2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80042a4:	f7fd f83c 	bl	8001320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80042a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80042ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b6:	2303      	movs	r3, #3
 80042b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80042bc:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80042c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c4:	f7fd f82c 	bl	8001320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80042c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ce:	64e3      	str	r3, [r4, #76]	; 0x4c
 80042d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	d410      	bmi.n	8004302 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80042e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	9302      	str	r3, [sp, #8]
 80042f0:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 80042f2:	f7fd fddf 	bl	8001eb4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fc:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80042fe:	b008      	add	sp, #32
 8004300:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8004302:	f7fd fdd7 	bl	8001eb4 <HAL_PWREx_EnableVddUSB>
}
 8004306:	e7fa      	b.n	80042fe <HAL_PCD_MspInit+0x92>
 8004308:	40021000 	.word	0x40021000

0800430c <NMI_Handler>:
 800430c:	4770      	bx	lr

0800430e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800430e:	e7fe      	b.n	800430e <HardFault_Handler>

08004310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004310:	e7fe      	b.n	8004310 <MemManage_Handler>

08004312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004312:	e7fe      	b.n	8004312 <BusFault_Handler>

08004314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004314:	e7fe      	b.n	8004314 <UsageFault_Handler>

08004316 <SVC_Handler>:
 8004316:	4770      	bx	lr

08004318 <DebugMon_Handler>:
 8004318:	4770      	bx	lr

0800431a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800431a:	4770      	bx	lr

0800431c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800431c:	f7fc bedc 	b.w	80010d8 <HAL_IncTick>

08004320 <USART1_IRQHandler>:
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
  RX_BUFF1[0] = USART1->RDR;
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <USART1_IRQHandler+0xc>)
 8004322:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8004324:	4b02      	ldr	r3, [pc, #8]	; (8004330 <USART1_IRQHandler+0x10>)
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40013800 	.word	0x40013800
 8004330:	200009e8 	.word	0x200009e8

08004334 <UART4_IRQHandler>:
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  //HAL_UART_IRQHandler(&huart4);
  /* USER CODE BEGIN UART4_IRQn 1 */
  RX_BUFF4[0] = UART4->RDR;
 8004334:	480f      	ldr	r0, [pc, #60]	; (8004374 <UART4_IRQHandler+0x40>)
 8004336:	4910      	ldr	r1, [pc, #64]	; (8004378 <UART4_IRQHandler+0x44>)
 8004338:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800433a:	4a10      	ldr	r2, [pc, #64]	; (800437c <UART4_IRQHandler+0x48>)
 800433c:	b2db      	uxtb	r3, r3
  if(RX_BUFF4[0] == '\r')
 800433e:	2b0d      	cmp	r3, #13
  RX_BUFF4[0] = UART4->RDR;
 8004340:	700b      	strb	r3, [r1, #0]
  if(RX_BUFF4[0] == '\r')
 8004342:	d114      	bne.n	800436e <UART4_IRQHandler+0x3a>
  {
	  RX_BUFF4[1] = UART4->RDR;
 8004344:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8004346:	b2db      	uxtb	r3, r3
	  if(RX_BUFF4[1] == '\n')
 8004348:	2b0a      	cmp	r3, #10
	  RX_BUFF4[1] = UART4->RDR;
 800434a:	704b      	strb	r3, [r1, #1]
	  if(RX_BUFF4[1] == '\n')
 800434c:	d10f      	bne.n	800436e <UART4_IRQHandler+0x3a>
	  {
		  RX_BUFF4[2] = UART4->RDR;
 800434e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8004350:	b2db      	uxtb	r3, r3
		  if(RX_BUFF4[2] == '0')
 8004352:	2b30      	cmp	r3, #48	; 0x30
		  RX_BUFF4[2] = UART4->RDR;
 8004354:	708b      	strb	r3, [r1, #2]
		  if(RX_BUFF4[2] == '0')
 8004356:	d102      	bne.n	800435e <UART4_IRQHandler+0x2a>
		  {
			  flag=1;
 8004358:	2301      	movs	r3, #1
		  {
			  flag=3;
		  }
		  else
		  {
			  flag=0;
 800435a:	7013      	strb	r3, [r2, #0]
 800435c:	4770      	bx	lr
		  else if(RX_BUFF4[2] == 'O')
 800435e:	2b4f      	cmp	r3, #79	; 0x4f
 8004360:	d101      	bne.n	8004366 <UART4_IRQHandler+0x32>
			  flag=2;
 8004362:	2302      	movs	r3, #2
 8004364:	e7f9      	b.n	800435a <UART4_IRQHandler+0x26>
		  else if(RX_BUFF4[2] == '1')
 8004366:	2b31      	cmp	r3, #49	; 0x31
 8004368:	d101      	bne.n	800436e <UART4_IRQHandler+0x3a>
			  flag=3;
 800436a:	2303      	movs	r3, #3
 800436c:	e7f5      	b.n	800435a <UART4_IRQHandler+0x26>
			  flag=0;
 800436e:	2300      	movs	r3, #0
 8004370:	e7f3      	b.n	800435a <UART4_IRQHandler+0x26>
 8004372:	bf00      	nop
 8004374:	40004c00 	.word	0x40004c00
 8004378:	200009f2 	.word	0x200009f2
 800437c:	20000230 	.word	0x20000230

08004380 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004380:	4801      	ldr	r0, [pc, #4]	; (8004388 <TIM6_DAC_IRQHandler+0x8>)
 8004382:	f7fe bcf9 	b.w	8002d78 <HAL_TIM_IRQHandler>
 8004386:	bf00      	nop
 8004388:	200008e8 	.word	0x200008e8

0800438c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800438c:	490f      	ldr	r1, [pc, #60]	; (80043cc <SystemInit+0x40>)
 800438e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004392:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800439a:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <SystemInit+0x44>)
 800439c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800439e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80043a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80043ae:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80043b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80043b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043c0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80043c2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043c8:	608b      	str	r3, [r1, #8]
 80043ca:	4770      	bx	lr
 80043cc:	e000ed00 	.word	0xe000ed00
 80043d0:	40021000 	.word	0x40021000

080043d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80043d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800440c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80043d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80043da:	e003      	b.n	80043e4 <LoopCopyDataInit>

080043dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80043de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80043e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80043e2:	3104      	adds	r1, #4

080043e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80043e4:	480b      	ldr	r0, [pc, #44]	; (8004414 <LoopForever+0xa>)
	ldr	r3, =_edata
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <LoopForever+0xe>)
	adds	r2, r0, r1
 80043e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80043ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80043ec:	d3f6      	bcc.n	80043dc <CopyDataInit>
	ldr	r2, =_sbss
 80043ee:	4a0b      	ldr	r2, [pc, #44]	; (800441c <LoopForever+0x12>)
	b	LoopFillZerobss
 80043f0:	e002      	b.n	80043f8 <LoopFillZerobss>

080043f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80043f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80043f4:	f842 3b04 	str.w	r3, [r2], #4

080043f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <LoopForever+0x16>)
	cmp	r2, r3
 80043fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80043fc:	d3f9      	bcc.n	80043f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80043fe:	f7ff ffc5 	bl	800438c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004402:	f000 f811 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004406:	f7ff fa83 	bl	8003910 <main>

0800440a <LoopForever>:

LoopForever:
    b LoopForever
 800440a:	e7fe      	b.n	800440a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800440c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004410:	08006420 	.word	0x08006420
	ldr	r0, =_sdata
 8004414:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004418:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 800441c:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8004420:	20000a00 	.word	0x20000a00

08004424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004424:	e7fe      	b.n	8004424 <ADC1_2_IRQHandler>
	...

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4e0d      	ldr	r6, [pc, #52]	; (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 800442e:	1ba4      	subs	r4, r4, r6
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2500      	movs	r5, #0
 8004434:	42a5      	cmp	r5, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4e0b      	ldr	r6, [pc, #44]	; (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	; (800446c <__libc_init_array+0x44>)
 800443c:	f001 fdc0 	bl	8005fc0 <_init>
 8004440:	1ba4      	subs	r4, r4, r6
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2500      	movs	r5, #0
 8004446:	42a5      	cmp	r5, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004450:	4798      	blx	r3
 8004452:	3501      	adds	r5, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800445a:	4798      	blx	r3
 800445c:	3501      	adds	r5, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08006418 	.word	0x08006418
 8004464:	08006418 	.word	0x08006418
 8004468:	08006418 	.word	0x08006418
 800446c:	0800641c 	.word	0x0800641c

08004470 <__itoa>:
 8004470:	1e93      	subs	r3, r2, #2
 8004472:	2b22      	cmp	r3, #34	; 0x22
 8004474:	b510      	push	{r4, lr}
 8004476:	460c      	mov	r4, r1
 8004478:	d904      	bls.n	8004484 <__itoa+0x14>
 800447a:	2300      	movs	r3, #0
 800447c:	700b      	strb	r3, [r1, #0]
 800447e:	461c      	mov	r4, r3
 8004480:	4620      	mov	r0, r4
 8004482:	bd10      	pop	{r4, pc}
 8004484:	2a0a      	cmp	r2, #10
 8004486:	d109      	bne.n	800449c <__itoa+0x2c>
 8004488:	2800      	cmp	r0, #0
 800448a:	da07      	bge.n	800449c <__itoa+0x2c>
 800448c:	232d      	movs	r3, #45	; 0x2d
 800448e:	700b      	strb	r3, [r1, #0]
 8004490:	4240      	negs	r0, r0
 8004492:	2101      	movs	r1, #1
 8004494:	4421      	add	r1, r4
 8004496:	f000 fb65 	bl	8004b64 <__utoa>
 800449a:	e7f1      	b.n	8004480 <__itoa+0x10>
 800449c:	2100      	movs	r1, #0
 800449e:	e7f9      	b.n	8004494 <__itoa+0x24>

080044a0 <itoa>:
 80044a0:	f7ff bfe6 	b.w	8004470 <__itoa>

080044a4 <memcpy>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	1e43      	subs	r3, r0, #1
 80044a8:	440a      	add	r2, r1
 80044aa:	4291      	cmp	r1, r2
 80044ac:	d100      	bne.n	80044b0 <memcpy+0xc>
 80044ae:	bd10      	pop	{r4, pc}
 80044b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b8:	e7f7      	b.n	80044aa <memcpy+0x6>

080044ba <memset>:
 80044ba:	4402      	add	r2, r0
 80044bc:	4603      	mov	r3, r0
 80044be:	4293      	cmp	r3, r2
 80044c0:	d100      	bne.n	80044c4 <memset+0xa>
 80044c2:	4770      	bx	lr
 80044c4:	f803 1b01 	strb.w	r1, [r3], #1
 80044c8:	e7f9      	b.n	80044be <memset+0x4>

080044ca <__cvt>:
 80044ca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044ce:	ec55 4b10 	vmov	r4, r5, d0
 80044d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80044d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044d8:	2d00      	cmp	r5, #0
 80044da:	460e      	mov	r6, r1
 80044dc:	4691      	mov	r9, r2
 80044de:	4619      	mov	r1, r3
 80044e0:	bfb8      	it	lt
 80044e2:	4622      	movlt	r2, r4
 80044e4:	462b      	mov	r3, r5
 80044e6:	f027 0720 	bic.w	r7, r7, #32
 80044ea:	bfbb      	ittet	lt
 80044ec:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044f0:	461d      	movlt	r5, r3
 80044f2:	2300      	movge	r3, #0
 80044f4:	232d      	movlt	r3, #45	; 0x2d
 80044f6:	bfb8      	it	lt
 80044f8:	4614      	movlt	r4, r2
 80044fa:	2f46      	cmp	r7, #70	; 0x46
 80044fc:	700b      	strb	r3, [r1, #0]
 80044fe:	d004      	beq.n	800450a <__cvt+0x40>
 8004500:	2f45      	cmp	r7, #69	; 0x45
 8004502:	d100      	bne.n	8004506 <__cvt+0x3c>
 8004504:	3601      	adds	r6, #1
 8004506:	2102      	movs	r1, #2
 8004508:	e000      	b.n	800450c <__cvt+0x42>
 800450a:	2103      	movs	r1, #3
 800450c:	ab03      	add	r3, sp, #12
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	ab02      	add	r3, sp, #8
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4632      	mov	r2, r6
 8004516:	4653      	mov	r3, sl
 8004518:	ec45 4b10 	vmov	d0, r4, r5
 800451c:	f000 fbf0 	bl	8004d00 <_dtoa_r>
 8004520:	2f47      	cmp	r7, #71	; 0x47
 8004522:	4680      	mov	r8, r0
 8004524:	d102      	bne.n	800452c <__cvt+0x62>
 8004526:	f019 0f01 	tst.w	r9, #1
 800452a:	d026      	beq.n	800457a <__cvt+0xb0>
 800452c:	2f46      	cmp	r7, #70	; 0x46
 800452e:	eb08 0906 	add.w	r9, r8, r6
 8004532:	d111      	bne.n	8004558 <__cvt+0x8e>
 8004534:	f898 3000 	ldrb.w	r3, [r8]
 8004538:	2b30      	cmp	r3, #48	; 0x30
 800453a:	d10a      	bne.n	8004552 <__cvt+0x88>
 800453c:	2200      	movs	r2, #0
 800453e:	2300      	movs	r3, #0
 8004540:	4620      	mov	r0, r4
 8004542:	4629      	mov	r1, r5
 8004544:	f7fc fa68 	bl	8000a18 <__aeabi_dcmpeq>
 8004548:	b918      	cbnz	r0, 8004552 <__cvt+0x88>
 800454a:	f1c6 0601 	rsb	r6, r6, #1
 800454e:	f8ca 6000 	str.w	r6, [sl]
 8004552:	f8da 3000 	ldr.w	r3, [sl]
 8004556:	4499      	add	r9, r3
 8004558:	2200      	movs	r2, #0
 800455a:	2300      	movs	r3, #0
 800455c:	4620      	mov	r0, r4
 800455e:	4629      	mov	r1, r5
 8004560:	f7fc fa5a 	bl	8000a18 <__aeabi_dcmpeq>
 8004564:	b938      	cbnz	r0, 8004576 <__cvt+0xac>
 8004566:	2230      	movs	r2, #48	; 0x30
 8004568:	9b03      	ldr	r3, [sp, #12]
 800456a:	4599      	cmp	r9, r3
 800456c:	d905      	bls.n	800457a <__cvt+0xb0>
 800456e:	1c59      	adds	r1, r3, #1
 8004570:	9103      	str	r1, [sp, #12]
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e7f8      	b.n	8004568 <__cvt+0x9e>
 8004576:	f8cd 900c 	str.w	r9, [sp, #12]
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800457e:	eba3 0308 	sub.w	r3, r3, r8
 8004582:	4640      	mov	r0, r8
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	b004      	add	sp, #16
 8004588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800458c <__exponent>:
 800458c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800458e:	4603      	mov	r3, r0
 8004590:	2900      	cmp	r1, #0
 8004592:	bfb8      	it	lt
 8004594:	4249      	neglt	r1, r1
 8004596:	f803 2b02 	strb.w	r2, [r3], #2
 800459a:	bfb4      	ite	lt
 800459c:	222d      	movlt	r2, #45	; 0x2d
 800459e:	222b      	movge	r2, #43	; 0x2b
 80045a0:	2909      	cmp	r1, #9
 80045a2:	7042      	strb	r2, [r0, #1]
 80045a4:	dd20      	ble.n	80045e8 <__exponent+0x5c>
 80045a6:	f10d 0207 	add.w	r2, sp, #7
 80045aa:	4617      	mov	r7, r2
 80045ac:	260a      	movs	r6, #10
 80045ae:	fb91 f5f6 	sdiv	r5, r1, r6
 80045b2:	fb06 1115 	mls	r1, r6, r5, r1
 80045b6:	3130      	adds	r1, #48	; 0x30
 80045b8:	2d09      	cmp	r5, #9
 80045ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 80045be:	f102 34ff 	add.w	r4, r2, #4294967295
 80045c2:	4629      	mov	r1, r5
 80045c4:	dc09      	bgt.n	80045da <__exponent+0x4e>
 80045c6:	3130      	adds	r1, #48	; 0x30
 80045c8:	3a02      	subs	r2, #2
 80045ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045ce:	42ba      	cmp	r2, r7
 80045d0:	461c      	mov	r4, r3
 80045d2:	d304      	bcc.n	80045de <__exponent+0x52>
 80045d4:	1a20      	subs	r0, r4, r0
 80045d6:	b003      	add	sp, #12
 80045d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045da:	4622      	mov	r2, r4
 80045dc:	e7e7      	b.n	80045ae <__exponent+0x22>
 80045de:	f812 1b01 	ldrb.w	r1, [r2], #1
 80045e2:	f803 1b01 	strb.w	r1, [r3], #1
 80045e6:	e7f2      	b.n	80045ce <__exponent+0x42>
 80045e8:	2230      	movs	r2, #48	; 0x30
 80045ea:	461c      	mov	r4, r3
 80045ec:	4411      	add	r1, r2
 80045ee:	f804 2b02 	strb.w	r2, [r4], #2
 80045f2:	7059      	strb	r1, [r3, #1]
 80045f4:	e7ee      	b.n	80045d4 <__exponent+0x48>
	...

080045f8 <_printf_float>:
 80045f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fc:	b08d      	sub	sp, #52	; 0x34
 80045fe:	460c      	mov	r4, r1
 8004600:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004604:	4616      	mov	r6, r2
 8004606:	461f      	mov	r7, r3
 8004608:	4605      	mov	r5, r0
 800460a:	f001 f947 	bl	800589c <_localeconv_r>
 800460e:	6803      	ldr	r3, [r0, #0]
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fb fdd8 	bl	80001c8 <strlen>
 8004618:	2300      	movs	r3, #0
 800461a:	930a      	str	r3, [sp, #40]	; 0x28
 800461c:	f8d8 3000 	ldr.w	r3, [r8]
 8004620:	9005      	str	r0, [sp, #20]
 8004622:	3307      	adds	r3, #7
 8004624:	f023 0307 	bic.w	r3, r3, #7
 8004628:	f103 0208 	add.w	r2, r3, #8
 800462c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004630:	f8d4 b000 	ldr.w	fp, [r4]
 8004634:	f8c8 2000 	str.w	r2, [r8]
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004640:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004644:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004648:	9307      	str	r3, [sp, #28]
 800464a:	f8cd 8018 	str.w	r8, [sp, #24]
 800464e:	f04f 32ff 	mov.w	r2, #4294967295
 8004652:	4ba5      	ldr	r3, [pc, #660]	; (80048e8 <_printf_float+0x2f0>)
 8004654:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004658:	f7fc fa10 	bl	8000a7c <__aeabi_dcmpun>
 800465c:	2800      	cmp	r0, #0
 800465e:	f040 81fb 	bne.w	8004a58 <_printf_float+0x460>
 8004662:	f04f 32ff 	mov.w	r2, #4294967295
 8004666:	4ba0      	ldr	r3, [pc, #640]	; (80048e8 <_printf_float+0x2f0>)
 8004668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800466c:	f7fc f9e8 	bl	8000a40 <__aeabi_dcmple>
 8004670:	2800      	cmp	r0, #0
 8004672:	f040 81f1 	bne.w	8004a58 <_printf_float+0x460>
 8004676:	2200      	movs	r2, #0
 8004678:	2300      	movs	r3, #0
 800467a:	4640      	mov	r0, r8
 800467c:	4649      	mov	r1, r9
 800467e:	f7fc f9d5 	bl	8000a2c <__aeabi_dcmplt>
 8004682:	b110      	cbz	r0, 800468a <_printf_float+0x92>
 8004684:	232d      	movs	r3, #45	; 0x2d
 8004686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800468a:	4b98      	ldr	r3, [pc, #608]	; (80048ec <_printf_float+0x2f4>)
 800468c:	4a98      	ldr	r2, [pc, #608]	; (80048f0 <_printf_float+0x2f8>)
 800468e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004692:	bf8c      	ite	hi
 8004694:	4690      	movhi	r8, r2
 8004696:	4698      	movls	r8, r3
 8004698:	2303      	movs	r3, #3
 800469a:	f02b 0204 	bic.w	r2, fp, #4
 800469e:	6123      	str	r3, [r4, #16]
 80046a0:	6022      	str	r2, [r4, #0]
 80046a2:	f04f 0900 	mov.w	r9, #0
 80046a6:	9700      	str	r7, [sp, #0]
 80046a8:	4633      	mov	r3, r6
 80046aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80046ac:	4621      	mov	r1, r4
 80046ae:	4628      	mov	r0, r5
 80046b0:	f000 f9e2 	bl	8004a78 <_printf_common>
 80046b4:	3001      	adds	r0, #1
 80046b6:	f040 8093 	bne.w	80047e0 <_printf_float+0x1e8>
 80046ba:	f04f 30ff 	mov.w	r0, #4294967295
 80046be:	b00d      	add	sp, #52	; 0x34
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	6861      	ldr	r1, [r4, #4]
 80046c6:	1c4b      	adds	r3, r1, #1
 80046c8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80046cc:	d13f      	bne.n	800474e <_printf_float+0x156>
 80046ce:	2306      	movs	r3, #6
 80046d0:	6063      	str	r3, [r4, #4]
 80046d2:	2300      	movs	r3, #0
 80046d4:	9303      	str	r3, [sp, #12]
 80046d6:	ab0a      	add	r3, sp, #40	; 0x28
 80046d8:	9302      	str	r3, [sp, #8]
 80046da:	ab09      	add	r3, sp, #36	; 0x24
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	ec49 8b10 	vmov	d0, r8, r9
 80046e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046e6:	6022      	str	r2, [r4, #0]
 80046e8:	f8cd a004 	str.w	sl, [sp, #4]
 80046ec:	6861      	ldr	r1, [r4, #4]
 80046ee:	4628      	mov	r0, r5
 80046f0:	f7ff feeb 	bl	80044ca <__cvt>
 80046f4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80046f8:	2b47      	cmp	r3, #71	; 0x47
 80046fa:	4680      	mov	r8, r0
 80046fc:	d109      	bne.n	8004712 <_printf_float+0x11a>
 80046fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004700:	1cd8      	adds	r0, r3, #3
 8004702:	db02      	blt.n	800470a <_printf_float+0x112>
 8004704:	6862      	ldr	r2, [r4, #4]
 8004706:	4293      	cmp	r3, r2
 8004708:	dd57      	ble.n	80047ba <_printf_float+0x1c2>
 800470a:	f1aa 0a02 	sub.w	sl, sl, #2
 800470e:	fa5f fa8a 	uxtb.w	sl, sl
 8004712:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004718:	d834      	bhi.n	8004784 <_printf_float+0x18c>
 800471a:	3901      	subs	r1, #1
 800471c:	4652      	mov	r2, sl
 800471e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004722:	9109      	str	r1, [sp, #36]	; 0x24
 8004724:	f7ff ff32 	bl	800458c <__exponent>
 8004728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800472a:	1883      	adds	r3, r0, r2
 800472c:	2a01      	cmp	r2, #1
 800472e:	4681      	mov	r9, r0
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	dc02      	bgt.n	800473a <_printf_float+0x142>
 8004734:	6822      	ldr	r2, [r4, #0]
 8004736:	07d1      	lsls	r1, r2, #31
 8004738:	d501      	bpl.n	800473e <_printf_float+0x146>
 800473a:	3301      	adds	r3, #1
 800473c:	6123      	str	r3, [r4, #16]
 800473e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0af      	beq.n	80046a6 <_printf_float+0xae>
 8004746:	232d      	movs	r3, #45	; 0x2d
 8004748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800474c:	e7ab      	b.n	80046a6 <_printf_float+0xae>
 800474e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004752:	d002      	beq.n	800475a <_printf_float+0x162>
 8004754:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004758:	d1bb      	bne.n	80046d2 <_printf_float+0xda>
 800475a:	b189      	cbz	r1, 8004780 <_printf_float+0x188>
 800475c:	2300      	movs	r3, #0
 800475e:	9303      	str	r3, [sp, #12]
 8004760:	ab0a      	add	r3, sp, #40	; 0x28
 8004762:	9302      	str	r3, [sp, #8]
 8004764:	ab09      	add	r3, sp, #36	; 0x24
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	ec49 8b10 	vmov	d0, r8, r9
 800476c:	6022      	str	r2, [r4, #0]
 800476e:	f8cd a004 	str.w	sl, [sp, #4]
 8004772:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004776:	4628      	mov	r0, r5
 8004778:	f7ff fea7 	bl	80044ca <__cvt>
 800477c:	4680      	mov	r8, r0
 800477e:	e7be      	b.n	80046fe <_printf_float+0x106>
 8004780:	2301      	movs	r3, #1
 8004782:	e7a5      	b.n	80046d0 <_printf_float+0xd8>
 8004784:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004788:	d119      	bne.n	80047be <_printf_float+0x1c6>
 800478a:	2900      	cmp	r1, #0
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	dd0c      	ble.n	80047aa <_printf_float+0x1b2>
 8004790:	6121      	str	r1, [r4, #16]
 8004792:	b913      	cbnz	r3, 800479a <_printf_float+0x1a2>
 8004794:	6822      	ldr	r2, [r4, #0]
 8004796:	07d2      	lsls	r2, r2, #31
 8004798:	d502      	bpl.n	80047a0 <_printf_float+0x1a8>
 800479a:	3301      	adds	r3, #1
 800479c:	440b      	add	r3, r1
 800479e:	6123      	str	r3, [r4, #16]
 80047a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80047a4:	f04f 0900 	mov.w	r9, #0
 80047a8:	e7c9      	b.n	800473e <_printf_float+0x146>
 80047aa:	b913      	cbnz	r3, 80047b2 <_printf_float+0x1ba>
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	07d0      	lsls	r0, r2, #31
 80047b0:	d501      	bpl.n	80047b6 <_printf_float+0x1be>
 80047b2:	3302      	adds	r3, #2
 80047b4:	e7f3      	b.n	800479e <_printf_float+0x1a6>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e7f1      	b.n	800479e <_printf_float+0x1a6>
 80047ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80047be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047c2:	4293      	cmp	r3, r2
 80047c4:	db05      	blt.n	80047d2 <_printf_float+0x1da>
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	07d1      	lsls	r1, r2, #31
 80047cc:	d5e8      	bpl.n	80047a0 <_printf_float+0x1a8>
 80047ce:	3301      	adds	r3, #1
 80047d0:	e7e5      	b.n	800479e <_printf_float+0x1a6>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bfd4      	ite	le
 80047d6:	f1c3 0302 	rsble	r3, r3, #2
 80047da:	2301      	movgt	r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	e7de      	b.n	800479e <_printf_float+0x1a6>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	055a      	lsls	r2, r3, #21
 80047e4:	d407      	bmi.n	80047f6 <_printf_float+0x1fe>
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	4642      	mov	r2, r8
 80047ea:	4631      	mov	r1, r6
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b8      	blx	r7
 80047f0:	3001      	adds	r0, #1
 80047f2:	d12b      	bne.n	800484c <_printf_float+0x254>
 80047f4:	e761      	b.n	80046ba <_printf_float+0xc2>
 80047f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80047fa:	f240 80e2 	bls.w	80049c2 <_printf_float+0x3ca>
 80047fe:	2200      	movs	r2, #0
 8004800:	2300      	movs	r3, #0
 8004802:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004806:	f7fc f907 	bl	8000a18 <__aeabi_dcmpeq>
 800480a:	2800      	cmp	r0, #0
 800480c:	d03c      	beq.n	8004888 <_printf_float+0x290>
 800480e:	2301      	movs	r3, #1
 8004810:	4a38      	ldr	r2, [pc, #224]	; (80048f4 <_printf_float+0x2fc>)
 8004812:	4631      	mov	r1, r6
 8004814:	4628      	mov	r0, r5
 8004816:	47b8      	blx	r7
 8004818:	3001      	adds	r0, #1
 800481a:	f43f af4e 	beq.w	80046ba <_printf_float+0xc2>
 800481e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004822:	429a      	cmp	r2, r3
 8004824:	db02      	blt.n	800482c <_printf_float+0x234>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	07d8      	lsls	r0, r3, #31
 800482a:	d50f      	bpl.n	800484c <_printf_float+0x254>
 800482c:	9b05      	ldr	r3, [sp, #20]
 800482e:	9a04      	ldr	r2, [sp, #16]
 8004830:	4631      	mov	r1, r6
 8004832:	4628      	mov	r0, r5
 8004834:	47b8      	blx	r7
 8004836:	3001      	adds	r0, #1
 8004838:	f43f af3f 	beq.w	80046ba <_printf_float+0xc2>
 800483c:	f04f 0800 	mov.w	r8, #0
 8004840:	f104 091a 	add.w	r9, r4, #26
 8004844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004846:	3b01      	subs	r3, #1
 8004848:	4598      	cmp	r8, r3
 800484a:	db12      	blt.n	8004872 <_printf_float+0x27a>
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	079b      	lsls	r3, r3, #30
 8004850:	d509      	bpl.n	8004866 <_printf_float+0x26e>
 8004852:	f04f 0800 	mov.w	r8, #0
 8004856:	f104 0919 	add.w	r9, r4, #25
 800485a:	68e3      	ldr	r3, [r4, #12]
 800485c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	4598      	cmp	r8, r3
 8004862:	f2c0 80ee 	blt.w	8004a42 <_printf_float+0x44a>
 8004866:	68e0      	ldr	r0, [r4, #12]
 8004868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800486a:	4298      	cmp	r0, r3
 800486c:	bfb8      	it	lt
 800486e:	4618      	movlt	r0, r3
 8004870:	e725      	b.n	80046be <_printf_float+0xc6>
 8004872:	2301      	movs	r3, #1
 8004874:	464a      	mov	r2, r9
 8004876:	4631      	mov	r1, r6
 8004878:	4628      	mov	r0, r5
 800487a:	47b8      	blx	r7
 800487c:	3001      	adds	r0, #1
 800487e:	f43f af1c 	beq.w	80046ba <_printf_float+0xc2>
 8004882:	f108 0801 	add.w	r8, r8, #1
 8004886:	e7dd      	b.n	8004844 <_printf_float+0x24c>
 8004888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	dc34      	bgt.n	80048f8 <_printf_float+0x300>
 800488e:	2301      	movs	r3, #1
 8004890:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <_printf_float+0x2fc>)
 8004892:	4631      	mov	r1, r6
 8004894:	4628      	mov	r0, r5
 8004896:	47b8      	blx	r7
 8004898:	3001      	adds	r0, #1
 800489a:	f43f af0e 	beq.w	80046ba <_printf_float+0xc2>
 800489e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a0:	b923      	cbnz	r3, 80048ac <_printf_float+0x2b4>
 80048a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a4:	b913      	cbnz	r3, 80048ac <_printf_float+0x2b4>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	07d9      	lsls	r1, r3, #31
 80048aa:	d5cf      	bpl.n	800484c <_printf_float+0x254>
 80048ac:	9b05      	ldr	r3, [sp, #20]
 80048ae:	9a04      	ldr	r2, [sp, #16]
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	f43f aeff 	beq.w	80046ba <_printf_float+0xc2>
 80048bc:	f04f 0900 	mov.w	r9, #0
 80048c0:	f104 0a1a 	add.w	sl, r4, #26
 80048c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c6:	425b      	negs	r3, r3
 80048c8:	4599      	cmp	r9, r3
 80048ca:	db01      	blt.n	80048d0 <_printf_float+0x2d8>
 80048cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ce:	e78b      	b.n	80047e8 <_printf_float+0x1f0>
 80048d0:	2301      	movs	r3, #1
 80048d2:	4652      	mov	r2, sl
 80048d4:	4631      	mov	r1, r6
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b8      	blx	r7
 80048da:	3001      	adds	r0, #1
 80048dc:	f43f aeed 	beq.w	80046ba <_printf_float+0xc2>
 80048e0:	f109 0901 	add.w	r9, r9, #1
 80048e4:	e7ee      	b.n	80048c4 <_printf_float+0x2cc>
 80048e6:	bf00      	nop
 80048e8:	7fefffff 	.word	0x7fefffff
 80048ec:	08006164 	.word	0x08006164
 80048f0:	08006168 	.word	0x08006168
 80048f4:	08006174 	.word	0x08006174
 80048f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048fc:	429a      	cmp	r2, r3
 80048fe:	bfa8      	it	ge
 8004900:	461a      	movge	r2, r3
 8004902:	2a00      	cmp	r2, #0
 8004904:	4691      	mov	r9, r2
 8004906:	dc38      	bgt.n	800497a <_printf_float+0x382>
 8004908:	f104 031a 	add.w	r3, r4, #26
 800490c:	f04f 0b00 	mov.w	fp, #0
 8004910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004914:	9306      	str	r3, [sp, #24]
 8004916:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800491a:	ebaa 0309 	sub.w	r3, sl, r9
 800491e:	459b      	cmp	fp, r3
 8004920:	db33      	blt.n	800498a <_printf_float+0x392>
 8004922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004926:	429a      	cmp	r2, r3
 8004928:	db3a      	blt.n	80049a0 <_printf_float+0x3a8>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	07da      	lsls	r2, r3, #31
 800492e:	d437      	bmi.n	80049a0 <_printf_float+0x3a8>
 8004930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004932:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004934:	eba3 020a 	sub.w	r2, r3, sl
 8004938:	eba3 0901 	sub.w	r9, r3, r1
 800493c:	4591      	cmp	r9, r2
 800493e:	bfa8      	it	ge
 8004940:	4691      	movge	r9, r2
 8004942:	f1b9 0f00 	cmp.w	r9, #0
 8004946:	dc33      	bgt.n	80049b0 <_printf_float+0x3b8>
 8004948:	f04f 0800 	mov.w	r8, #0
 800494c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004950:	f104 0a1a 	add.w	sl, r4, #26
 8004954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	eba3 0309 	sub.w	r3, r3, r9
 800495e:	4598      	cmp	r8, r3
 8004960:	f6bf af74 	bge.w	800484c <_printf_float+0x254>
 8004964:	2301      	movs	r3, #1
 8004966:	4652      	mov	r2, sl
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f aea3 	beq.w	80046ba <_printf_float+0xc2>
 8004974:	f108 0801 	add.w	r8, r8, #1
 8004978:	e7ec      	b.n	8004954 <_printf_float+0x35c>
 800497a:	4613      	mov	r3, r2
 800497c:	4631      	mov	r1, r6
 800497e:	4642      	mov	r2, r8
 8004980:	4628      	mov	r0, r5
 8004982:	47b8      	blx	r7
 8004984:	3001      	adds	r0, #1
 8004986:	d1bf      	bne.n	8004908 <_printf_float+0x310>
 8004988:	e697      	b.n	80046ba <_printf_float+0xc2>
 800498a:	2301      	movs	r3, #1
 800498c:	9a06      	ldr	r2, [sp, #24]
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f ae90 	beq.w	80046ba <_printf_float+0xc2>
 800499a:	f10b 0b01 	add.w	fp, fp, #1
 800499e:	e7ba      	b.n	8004916 <_printf_float+0x31e>
 80049a0:	9b05      	ldr	r3, [sp, #20]
 80049a2:	9a04      	ldr	r2, [sp, #16]
 80049a4:	4631      	mov	r1, r6
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	d1c0      	bne.n	8004930 <_printf_float+0x338>
 80049ae:	e684      	b.n	80046ba <_printf_float+0xc2>
 80049b0:	464b      	mov	r3, r9
 80049b2:	eb08 020a 	add.w	r2, r8, sl
 80049b6:	4631      	mov	r1, r6
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	d1c3      	bne.n	8004948 <_printf_float+0x350>
 80049c0:	e67b      	b.n	80046ba <_printf_float+0xc2>
 80049c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049c4:	2a01      	cmp	r2, #1
 80049c6:	dc01      	bgt.n	80049cc <_printf_float+0x3d4>
 80049c8:	07db      	lsls	r3, r3, #31
 80049ca:	d537      	bpl.n	8004a3c <_printf_float+0x444>
 80049cc:	2301      	movs	r3, #1
 80049ce:	4642      	mov	r2, r8
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	f43f ae6f 	beq.w	80046ba <_printf_float+0xc2>
 80049dc:	9b05      	ldr	r3, [sp, #20]
 80049de:	9a04      	ldr	r2, [sp, #16]
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f ae67 	beq.w	80046ba <_printf_float+0xc2>
 80049ec:	2200      	movs	r2, #0
 80049ee:	2300      	movs	r3, #0
 80049f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049f4:	f7fc f810 	bl	8000a18 <__aeabi_dcmpeq>
 80049f8:	b158      	cbz	r0, 8004a12 <_printf_float+0x41a>
 80049fa:	f04f 0800 	mov.w	r8, #0
 80049fe:	f104 0a1a 	add.w	sl, r4, #26
 8004a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a04:	3b01      	subs	r3, #1
 8004a06:	4598      	cmp	r8, r3
 8004a08:	db0d      	blt.n	8004a26 <_printf_float+0x42e>
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a10:	e6eb      	b.n	80047ea <_printf_float+0x1f2>
 8004a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a14:	f108 0201 	add.w	r2, r8, #1
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	47b8      	blx	r7
 8004a20:	3001      	adds	r0, #1
 8004a22:	d1f2      	bne.n	8004a0a <_printf_float+0x412>
 8004a24:	e649      	b.n	80046ba <_printf_float+0xc2>
 8004a26:	2301      	movs	r3, #1
 8004a28:	4652      	mov	r2, sl
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	47b8      	blx	r7
 8004a30:	3001      	adds	r0, #1
 8004a32:	f43f ae42 	beq.w	80046ba <_printf_float+0xc2>
 8004a36:	f108 0801 	add.w	r8, r8, #1
 8004a3a:	e7e2      	b.n	8004a02 <_printf_float+0x40a>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4642      	mov	r2, r8
 8004a40:	e7eb      	b.n	8004a1a <_printf_float+0x422>
 8004a42:	2301      	movs	r3, #1
 8004a44:	464a      	mov	r2, r9
 8004a46:	4631      	mov	r1, r6
 8004a48:	4628      	mov	r0, r5
 8004a4a:	47b8      	blx	r7
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	f43f ae34 	beq.w	80046ba <_printf_float+0xc2>
 8004a52:	f108 0801 	add.w	r8, r8, #1
 8004a56:	e700      	b.n	800485a <_printf_float+0x262>
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	4649      	mov	r1, r9
 8004a60:	f7fc f80c 	bl	8000a7c <__aeabi_dcmpun>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	f43f ae2d 	beq.w	80046c4 <_printf_float+0xcc>
 8004a6a:	4b01      	ldr	r3, [pc, #4]	; (8004a70 <_printf_float+0x478>)
 8004a6c:	4a01      	ldr	r2, [pc, #4]	; (8004a74 <_printf_float+0x47c>)
 8004a6e:	e60e      	b.n	800468e <_printf_float+0x96>
 8004a70:	0800616c 	.word	0x0800616c
 8004a74:	08006170 	.word	0x08006170

08004a78 <_printf_common>:
 8004a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a7c:	4691      	mov	r9, r2
 8004a7e:	461f      	mov	r7, r3
 8004a80:	688a      	ldr	r2, [r1, #8]
 8004a82:	690b      	ldr	r3, [r1, #16]
 8004a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	bfb8      	it	lt
 8004a8c:	4613      	movlt	r3, r2
 8004a8e:	f8c9 3000 	str.w	r3, [r9]
 8004a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a96:	4606      	mov	r6, r0
 8004a98:	460c      	mov	r4, r1
 8004a9a:	b112      	cbz	r2, 8004aa2 <_printf_common+0x2a>
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f8c9 3000 	str.w	r3, [r9]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	0699      	lsls	r1, r3, #26
 8004aa6:	bf42      	ittt	mi
 8004aa8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004aac:	3302      	addmi	r3, #2
 8004aae:	f8c9 3000 	strmi.w	r3, [r9]
 8004ab2:	6825      	ldr	r5, [r4, #0]
 8004ab4:	f015 0506 	ands.w	r5, r5, #6
 8004ab8:	d107      	bne.n	8004aca <_printf_common+0x52>
 8004aba:	f104 0a19 	add.w	sl, r4, #25
 8004abe:	68e3      	ldr	r3, [r4, #12]
 8004ac0:	f8d9 2000 	ldr.w	r2, [r9]
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	429d      	cmp	r5, r3
 8004ac8:	db29      	blt.n	8004b1e <_printf_common+0xa6>
 8004aca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	3300      	adds	r3, #0
 8004ad2:	bf18      	it	ne
 8004ad4:	2301      	movne	r3, #1
 8004ad6:	0692      	lsls	r2, r2, #26
 8004ad8:	d42e      	bmi.n	8004b38 <_printf_common+0xc0>
 8004ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ade:	4639      	mov	r1, r7
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	47c0      	blx	r8
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d021      	beq.n	8004b2c <_printf_common+0xb4>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	68e5      	ldr	r5, [r4, #12]
 8004aec:	f8d9 2000 	ldr.w	r2, [r9]
 8004af0:	f003 0306 	and.w	r3, r3, #6
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	bf08      	it	eq
 8004af8:	1aad      	subeq	r5, r5, r2
 8004afa:	68a3      	ldr	r3, [r4, #8]
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	bf0c      	ite	eq
 8004b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b04:	2500      	movne	r5, #0
 8004b06:	4293      	cmp	r3, r2
 8004b08:	bfc4      	itt	gt
 8004b0a:	1a9b      	subgt	r3, r3, r2
 8004b0c:	18ed      	addgt	r5, r5, r3
 8004b0e:	f04f 0900 	mov.w	r9, #0
 8004b12:	341a      	adds	r4, #26
 8004b14:	454d      	cmp	r5, r9
 8004b16:	d11b      	bne.n	8004b50 <_printf_common+0xd8>
 8004b18:	2000      	movs	r0, #0
 8004b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4652      	mov	r2, sl
 8004b22:	4639      	mov	r1, r7
 8004b24:	4630      	mov	r0, r6
 8004b26:	47c0      	blx	r8
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d103      	bne.n	8004b34 <_printf_common+0xbc>
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b34:	3501      	adds	r5, #1
 8004b36:	e7c2      	b.n	8004abe <_printf_common+0x46>
 8004b38:	18e1      	adds	r1, r4, r3
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	2030      	movs	r0, #48	; 0x30
 8004b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b42:	4422      	add	r2, r4
 8004b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b4c:	3302      	adds	r3, #2
 8004b4e:	e7c4      	b.n	8004ada <_printf_common+0x62>
 8004b50:	2301      	movs	r3, #1
 8004b52:	4622      	mov	r2, r4
 8004b54:	4639      	mov	r1, r7
 8004b56:	4630      	mov	r0, r6
 8004b58:	47c0      	blx	r8
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d0e6      	beq.n	8004b2c <_printf_common+0xb4>
 8004b5e:	f109 0901 	add.w	r9, r9, #1
 8004b62:	e7d7      	b.n	8004b14 <_printf_common+0x9c>

08004b64 <__utoa>:
 8004b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b66:	4c1e      	ldr	r4, [pc, #120]	; (8004be0 <__utoa+0x7c>)
 8004b68:	b08b      	sub	sp, #44	; 0x2c
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	460f      	mov	r7, r1
 8004b6e:	466d      	mov	r5, sp
 8004b70:	f104 0e20 	add.w	lr, r4, #32
 8004b74:	6820      	ldr	r0, [r4, #0]
 8004b76:	6861      	ldr	r1, [r4, #4]
 8004b78:	462e      	mov	r6, r5
 8004b7a:	c603      	stmia	r6!, {r0, r1}
 8004b7c:	3408      	adds	r4, #8
 8004b7e:	4574      	cmp	r4, lr
 8004b80:	4635      	mov	r5, r6
 8004b82:	d1f7      	bne.n	8004b74 <__utoa+0x10>
 8004b84:	7921      	ldrb	r1, [r4, #4]
 8004b86:	7131      	strb	r1, [r6, #4]
 8004b88:	1e91      	subs	r1, r2, #2
 8004b8a:	6820      	ldr	r0, [r4, #0]
 8004b8c:	6030      	str	r0, [r6, #0]
 8004b8e:	2922      	cmp	r1, #34	; 0x22
 8004b90:	f04f 0100 	mov.w	r1, #0
 8004b94:	d904      	bls.n	8004ba0 <__utoa+0x3c>
 8004b96:	7039      	strb	r1, [r7, #0]
 8004b98:	460f      	mov	r7, r1
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	b00b      	add	sp, #44	; 0x2c
 8004b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba0:	1e78      	subs	r0, r7, #1
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	fbb3 f5f2 	udiv	r5, r3, r2
 8004ba8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004bac:	fb02 3315 	mls	r3, r2, r5, r3
 8004bb0:	4473      	add	r3, lr
 8004bb2:	1c4c      	adds	r4, r1, #1
 8004bb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bb8:	f806 3f01 	strb.w	r3, [r6, #1]!
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	b965      	cbnz	r5, 8004bda <__utoa+0x76>
 8004bc0:	553d      	strb	r5, [r7, r4]
 8004bc2:	187a      	adds	r2, r7, r1
 8004bc4:	1acc      	subs	r4, r1, r3
 8004bc6:	42a3      	cmp	r3, r4
 8004bc8:	dae7      	bge.n	8004b9a <__utoa+0x36>
 8004bca:	7844      	ldrb	r4, [r0, #1]
 8004bcc:	7815      	ldrb	r5, [r2, #0]
 8004bce:	f800 5f01 	strb.w	r5, [r0, #1]!
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	f802 4901 	strb.w	r4, [r2], #-1
 8004bd8:	e7f4      	b.n	8004bc4 <__utoa+0x60>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	e7e2      	b.n	8004ba4 <__utoa+0x40>
 8004bde:	bf00      	nop
 8004be0:	08006176 	.word	0x08006176

08004be4 <quorem>:
 8004be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be8:	6903      	ldr	r3, [r0, #16]
 8004bea:	690c      	ldr	r4, [r1, #16]
 8004bec:	429c      	cmp	r4, r3
 8004bee:	4680      	mov	r8, r0
 8004bf0:	f300 8082 	bgt.w	8004cf8 <quorem+0x114>
 8004bf4:	3c01      	subs	r4, #1
 8004bf6:	f101 0714 	add.w	r7, r1, #20
 8004bfa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004bfe:	f100 0614 	add.w	r6, r0, #20
 8004c02:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004c06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004c0a:	eb06 030e 	add.w	r3, r6, lr
 8004c0e:	3501      	adds	r5, #1
 8004c10:	eb07 090e 	add.w	r9, r7, lr
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	fbb0 f5f5 	udiv	r5, r0, r5
 8004c1a:	b395      	cbz	r5, 8004c82 <quorem+0x9e>
 8004c1c:	f04f 0a00 	mov.w	sl, #0
 8004c20:	4638      	mov	r0, r7
 8004c22:	46b4      	mov	ip, r6
 8004c24:	46d3      	mov	fp, sl
 8004c26:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c2a:	b293      	uxth	r3, r2
 8004c2c:	fb05 a303 	mla	r3, r5, r3, sl
 8004c30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	ebab 0303 	sub.w	r3, fp, r3
 8004c3a:	0c12      	lsrs	r2, r2, #16
 8004c3c:	f8bc b000 	ldrh.w	fp, [ip]
 8004c40:	fb05 a202 	mla	r2, r5, r2, sl
 8004c44:	fa13 f38b 	uxtah	r3, r3, fp
 8004c48:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004c4c:	fa1f fb82 	uxth.w	fp, r2
 8004c50:	f8dc 2000 	ldr.w	r2, [ip]
 8004c54:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004c58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c62:	4581      	cmp	r9, r0
 8004c64:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004c68:	f84c 3b04 	str.w	r3, [ip], #4
 8004c6c:	d2db      	bcs.n	8004c26 <quorem+0x42>
 8004c6e:	f856 300e 	ldr.w	r3, [r6, lr]
 8004c72:	b933      	cbnz	r3, 8004c82 <quorem+0x9e>
 8004c74:	9b01      	ldr	r3, [sp, #4]
 8004c76:	3b04      	subs	r3, #4
 8004c78:	429e      	cmp	r6, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	d330      	bcc.n	8004ce0 <quorem+0xfc>
 8004c7e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c82:	4640      	mov	r0, r8
 8004c84:	f001 f829 	bl	8005cda <__mcmp>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	db25      	blt.n	8004cd8 <quorem+0xf4>
 8004c8c:	3501      	adds	r5, #1
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f04f 0e00 	mov.w	lr, #0
 8004c94:	f857 2b04 	ldr.w	r2, [r7], #4
 8004c98:	f8d0 c000 	ldr.w	ip, [r0]
 8004c9c:	b293      	uxth	r3, r2
 8004c9e:	ebae 0303 	sub.w	r3, lr, r3
 8004ca2:	0c12      	lsrs	r2, r2, #16
 8004ca4:	fa13 f38c 	uxtah	r3, r3, ip
 8004ca8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004cac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cb6:	45b9      	cmp	r9, r7
 8004cb8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004cbc:	f840 3b04 	str.w	r3, [r0], #4
 8004cc0:	d2e8      	bcs.n	8004c94 <quorem+0xb0>
 8004cc2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004cc6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004cca:	b92a      	cbnz	r2, 8004cd8 <quorem+0xf4>
 8004ccc:	3b04      	subs	r3, #4
 8004cce:	429e      	cmp	r6, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	d30b      	bcc.n	8004cec <quorem+0x108>
 8004cd4:	f8c8 4010 	str.w	r4, [r8, #16]
 8004cd8:	4628      	mov	r0, r5
 8004cda:	b003      	add	sp, #12
 8004cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	3b04      	subs	r3, #4
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	d1ca      	bne.n	8004c7e <quorem+0x9a>
 8004ce8:	3c01      	subs	r4, #1
 8004cea:	e7c5      	b.n	8004c78 <quorem+0x94>
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	3b04      	subs	r3, #4
 8004cf0:	2a00      	cmp	r2, #0
 8004cf2:	d1ef      	bne.n	8004cd4 <quorem+0xf0>
 8004cf4:	3c01      	subs	r4, #1
 8004cf6:	e7ea      	b.n	8004cce <quorem+0xea>
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	e7ee      	b.n	8004cda <quorem+0xf6>
 8004cfc:	0000      	movs	r0, r0
	...

08004d00 <_dtoa_r>:
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	ec57 6b10 	vmov	r6, r7, d0
 8004d08:	b097      	sub	sp, #92	; 0x5c
 8004d0a:	e9cd 6700 	strd	r6, r7, [sp]
 8004d0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d10:	9107      	str	r1, [sp, #28]
 8004d12:	4604      	mov	r4, r0
 8004d14:	920a      	str	r2, [sp, #40]	; 0x28
 8004d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d18:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004d1a:	b93e      	cbnz	r6, 8004d2c <_dtoa_r+0x2c>
 8004d1c:	2010      	movs	r0, #16
 8004d1e:	f000 fdcb 	bl	80058b8 <malloc>
 8004d22:	6260      	str	r0, [r4, #36]	; 0x24
 8004d24:	6046      	str	r6, [r0, #4]
 8004d26:	6086      	str	r6, [r0, #8]
 8004d28:	6006      	str	r6, [r0, #0]
 8004d2a:	60c6      	str	r6, [r0, #12]
 8004d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	b151      	cbz	r1, 8004d48 <_dtoa_r+0x48>
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	604a      	str	r2, [r1, #4]
 8004d36:	2301      	movs	r3, #1
 8004d38:	4093      	lsls	r3, r2
 8004d3a:	608b      	str	r3, [r1, #8]
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f000 fdf7 	bl	8005930 <_Bfree>
 8004d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	9b01      	ldr	r3, [sp, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bfbf      	itttt	lt
 8004d4e:	2301      	movlt	r3, #1
 8004d50:	602b      	strlt	r3, [r5, #0]
 8004d52:	9b01      	ldrlt	r3, [sp, #4]
 8004d54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d58:	bfb2      	itee	lt
 8004d5a:	9301      	strlt	r3, [sp, #4]
 8004d5c:	2300      	movge	r3, #0
 8004d5e:	602b      	strge	r3, [r5, #0]
 8004d60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d64:	4ba8      	ldr	r3, [pc, #672]	; (8005008 <_dtoa_r+0x308>)
 8004d66:	ea33 0308 	bics.w	r3, r3, r8
 8004d6a:	d11b      	bne.n	8004da4 <_dtoa_r+0xa4>
 8004d6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	9b00      	ldr	r3, [sp, #0]
 8004d76:	b923      	cbnz	r3, 8004d82 <_dtoa_r+0x82>
 8004d78:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	f000 8578 	beq.w	8005872 <_dtoa_r+0xb72>
 8004d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d84:	b953      	cbnz	r3, 8004d9c <_dtoa_r+0x9c>
 8004d86:	4ba1      	ldr	r3, [pc, #644]	; (800500c <_dtoa_r+0x30c>)
 8004d88:	e021      	b.n	8004dce <_dtoa_r+0xce>
 8004d8a:	4ba1      	ldr	r3, [pc, #644]	; (8005010 <_dtoa_r+0x310>)
 8004d8c:	9302      	str	r3, [sp, #8]
 8004d8e:	3308      	adds	r3, #8
 8004d90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	9802      	ldr	r0, [sp, #8]
 8004d96:	b017      	add	sp, #92	; 0x5c
 8004d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9c:	4b9b      	ldr	r3, [pc, #620]	; (800500c <_dtoa_r+0x30c>)
 8004d9e:	9302      	str	r3, [sp, #8]
 8004da0:	3303      	adds	r3, #3
 8004da2:	e7f5      	b.n	8004d90 <_dtoa_r+0x90>
 8004da4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004da8:	2200      	movs	r2, #0
 8004daa:	2300      	movs	r3, #0
 8004dac:	4630      	mov	r0, r6
 8004dae:	4639      	mov	r1, r7
 8004db0:	f7fb fe32 	bl	8000a18 <__aeabi_dcmpeq>
 8004db4:	4681      	mov	r9, r0
 8004db6:	b160      	cbz	r0, 8004dd2 <_dtoa_r+0xd2>
 8004db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dba:	2301      	movs	r3, #1
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8553 	beq.w	800586c <_dtoa_r+0xb6c>
 8004dc6:	4b93      	ldr	r3, [pc, #588]	; (8005014 <_dtoa_r+0x314>)
 8004dc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	9302      	str	r3, [sp, #8]
 8004dd0:	e7e0      	b.n	8004d94 <_dtoa_r+0x94>
 8004dd2:	aa14      	add	r2, sp, #80	; 0x50
 8004dd4:	a915      	add	r1, sp, #84	; 0x54
 8004dd6:	ec47 6b10 	vmov	d0, r6, r7
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f000 fff5 	bl	8005dca <__d2b>
 8004de0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004de4:	4682      	mov	sl, r0
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	d07e      	beq.n	8004ee8 <_dtoa_r+0x1e8>
 8004dea:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004dee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004df2:	4630      	mov	r0, r6
 8004df4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004df8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004dfc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004e00:	2200      	movs	r2, #0
 8004e02:	4b85      	ldr	r3, [pc, #532]	; (8005018 <_dtoa_r+0x318>)
 8004e04:	f7fb f9ec 	bl	80001e0 <__aeabi_dsub>
 8004e08:	a379      	add	r3, pc, #484	; (adr r3, 8004ff0 <_dtoa_r+0x2f0>)
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f7fb fb9b 	bl	8000548 <__aeabi_dmul>
 8004e12:	a379      	add	r3, pc, #484	; (adr r3, 8004ff8 <_dtoa_r+0x2f8>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f7fb f9e4 	bl	80001e4 <__adddf3>
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	4628      	mov	r0, r5
 8004e20:	460f      	mov	r7, r1
 8004e22:	f7fb fb2b 	bl	800047c <__aeabi_i2d>
 8004e26:	a376      	add	r3, pc, #472	; (adr r3, 8005000 <_dtoa_r+0x300>)
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f7fb fb8c 	bl	8000548 <__aeabi_dmul>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4630      	mov	r0, r6
 8004e36:	4639      	mov	r1, r7
 8004e38:	f7fb f9d4 	bl	80001e4 <__adddf3>
 8004e3c:	4606      	mov	r6, r0
 8004e3e:	460f      	mov	r7, r1
 8004e40:	f7fb fe32 	bl	8000aa8 <__aeabi_d2iz>
 8004e44:	2200      	movs	r2, #0
 8004e46:	4683      	mov	fp, r0
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	f7fb fded 	bl	8000a2c <__aeabi_dcmplt>
 8004e52:	b158      	cbz	r0, 8004e6c <_dtoa_r+0x16c>
 8004e54:	4658      	mov	r0, fp
 8004e56:	f7fb fb11 	bl	800047c <__aeabi_i2d>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4630      	mov	r0, r6
 8004e60:	4639      	mov	r1, r7
 8004e62:	f7fb fdd9 	bl	8000a18 <__aeabi_dcmpeq>
 8004e66:	b908      	cbnz	r0, 8004e6c <_dtoa_r+0x16c>
 8004e68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e6c:	f1bb 0f16 	cmp.w	fp, #22
 8004e70:	d859      	bhi.n	8004f26 <_dtoa_r+0x226>
 8004e72:	496a      	ldr	r1, [pc, #424]	; (800501c <_dtoa_r+0x31c>)
 8004e74:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e80:	f7fb fdf2 	bl	8000a68 <__aeabi_dcmpgt>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d050      	beq.n	8004f2a <_dtoa_r+0x22a>
 8004e88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	930e      	str	r3, [sp, #56]	; 0x38
 8004e90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e92:	1b5d      	subs	r5, r3, r5
 8004e94:	1e6b      	subs	r3, r5, #1
 8004e96:	9306      	str	r3, [sp, #24]
 8004e98:	bf45      	ittet	mi
 8004e9a:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e9e:	9305      	strmi	r3, [sp, #20]
 8004ea0:	2300      	movpl	r3, #0
 8004ea2:	2300      	movmi	r3, #0
 8004ea4:	bf4c      	ite	mi
 8004ea6:	9306      	strmi	r3, [sp, #24]
 8004ea8:	9305      	strpl	r3, [sp, #20]
 8004eaa:	f1bb 0f00 	cmp.w	fp, #0
 8004eae:	db3e      	blt.n	8004f2e <_dtoa_r+0x22e>
 8004eb0:	9b06      	ldr	r3, [sp, #24]
 8004eb2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004eb6:	445b      	add	r3, fp
 8004eb8:	9306      	str	r3, [sp, #24]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9308      	str	r3, [sp, #32]
 8004ebe:	9b07      	ldr	r3, [sp, #28]
 8004ec0:	2b09      	cmp	r3, #9
 8004ec2:	f200 80af 	bhi.w	8005024 <_dtoa_r+0x324>
 8004ec6:	2b05      	cmp	r3, #5
 8004ec8:	bfc4      	itt	gt
 8004eca:	3b04      	subgt	r3, #4
 8004ecc:	9307      	strgt	r3, [sp, #28]
 8004ece:	9b07      	ldr	r3, [sp, #28]
 8004ed0:	f1a3 0302 	sub.w	r3, r3, #2
 8004ed4:	bfcc      	ite	gt
 8004ed6:	2600      	movgt	r6, #0
 8004ed8:	2601      	movle	r6, #1
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	f200 80ae 	bhi.w	800503c <_dtoa_r+0x33c>
 8004ee0:	e8df f003 	tbb	[pc, r3]
 8004ee4:	772f8482 	.word	0x772f8482
 8004ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004eea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004eec:	441d      	add	r5, r3
 8004eee:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	dd11      	ble.n	8004f1a <_dtoa_r+0x21a>
 8004ef6:	9a00      	ldr	r2, [sp, #0]
 8004ef8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004efc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004f00:	fa22 f000 	lsr.w	r0, r2, r0
 8004f04:	fa08 f303 	lsl.w	r3, r8, r3
 8004f08:	4318      	orrs	r0, r3
 8004f0a:	f7fb faa7 	bl	800045c <__aeabi_ui2d>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004f14:	3d01      	subs	r5, #1
 8004f16:	9312      	str	r3, [sp, #72]	; 0x48
 8004f18:	e772      	b.n	8004e00 <_dtoa_r+0x100>
 8004f1a:	f1c3 0020 	rsb	r0, r3, #32
 8004f1e:	9b00      	ldr	r3, [sp, #0]
 8004f20:	fa03 f000 	lsl.w	r0, r3, r0
 8004f24:	e7f1      	b.n	8004f0a <_dtoa_r+0x20a>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e7b1      	b.n	8004e8e <_dtoa_r+0x18e>
 8004f2a:	900e      	str	r0, [sp, #56]	; 0x38
 8004f2c:	e7b0      	b.n	8004e90 <_dtoa_r+0x190>
 8004f2e:	9b05      	ldr	r3, [sp, #20]
 8004f30:	eba3 030b 	sub.w	r3, r3, fp
 8004f34:	9305      	str	r3, [sp, #20]
 8004f36:	f1cb 0300 	rsb	r3, fp, #0
 8004f3a:	9308      	str	r3, [sp, #32]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f40:	e7bd      	b.n	8004ebe <_dtoa_r+0x1be>
 8004f42:	2301      	movs	r3, #1
 8004f44:	9309      	str	r3, [sp, #36]	; 0x24
 8004f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	dd7a      	ble.n	8005042 <_dtoa_r+0x342>
 8004f4c:	9304      	str	r3, [sp, #16]
 8004f4e:	9303      	str	r3, [sp, #12]
 8004f50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004f52:	2200      	movs	r2, #0
 8004f54:	606a      	str	r2, [r5, #4]
 8004f56:	2104      	movs	r1, #4
 8004f58:	f101 0214 	add.w	r2, r1, #20
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d975      	bls.n	800504c <_dtoa_r+0x34c>
 8004f60:	6869      	ldr	r1, [r5, #4]
 8004f62:	4620      	mov	r0, r4
 8004f64:	f000 fcb0 	bl	80058c8 <_Balloc>
 8004f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f6a:	6028      	str	r0, [r5, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	9302      	str	r3, [sp, #8]
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	2b0e      	cmp	r3, #14
 8004f74:	f200 80e5 	bhi.w	8005142 <_dtoa_r+0x442>
 8004f78:	2e00      	cmp	r6, #0
 8004f7a:	f000 80e2 	beq.w	8005142 <_dtoa_r+0x442>
 8004f7e:	ed9d 7b00 	vldr	d7, [sp]
 8004f82:	f1bb 0f00 	cmp.w	fp, #0
 8004f86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004f8a:	dd74      	ble.n	8005076 <_dtoa_r+0x376>
 8004f8c:	4a23      	ldr	r2, [pc, #140]	; (800501c <_dtoa_r+0x31c>)
 8004f8e:	f00b 030f 	and.w	r3, fp, #15
 8004f92:	ea4f 162b 	mov.w	r6, fp, asr #4
 8004f96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f9a:	06f0      	lsls	r0, r6, #27
 8004f9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fa0:	d559      	bpl.n	8005056 <_dtoa_r+0x356>
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <_dtoa_r+0x320>)
 8004fa4:	ec51 0b17 	vmov	r0, r1, d7
 8004fa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fac:	f7fb fbf6 	bl	800079c <__aeabi_ddiv>
 8004fb0:	e9cd 0100 	strd	r0, r1, [sp]
 8004fb4:	f006 060f 	and.w	r6, r6, #15
 8004fb8:	2503      	movs	r5, #3
 8004fba:	4f19      	ldr	r7, [pc, #100]	; (8005020 <_dtoa_r+0x320>)
 8004fbc:	2e00      	cmp	r6, #0
 8004fbe:	d14c      	bne.n	800505a <_dtoa_r+0x35a>
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fc8:	f7fb fbe8 	bl	800079c <__aeabi_ddiv>
 8004fcc:	e9cd 0100 	strd	r0, r1, [sp]
 8004fd0:	e06a      	b.n	80050a8 <_dtoa_r+0x3a8>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd8:	445b      	add	r3, fp
 8004fda:	9304      	str	r3, [sp, #16]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	9303      	str	r3, [sp, #12]
 8004fe2:	bfb8      	it	lt
 8004fe4:	2301      	movlt	r3, #1
 8004fe6:	e7b3      	b.n	8004f50 <_dtoa_r+0x250>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e7ab      	b.n	8004f44 <_dtoa_r+0x244>
 8004fec:	2300      	movs	r3, #0
 8004fee:	e7f1      	b.n	8004fd4 <_dtoa_r+0x2d4>
 8004ff0:	636f4361 	.word	0x636f4361
 8004ff4:	3fd287a7 	.word	0x3fd287a7
 8004ff8:	8b60c8b3 	.word	0x8b60c8b3
 8004ffc:	3fc68a28 	.word	0x3fc68a28
 8005000:	509f79fb 	.word	0x509f79fb
 8005004:	3fd34413 	.word	0x3fd34413
 8005008:	7ff00000 	.word	0x7ff00000
 800500c:	080061a4 	.word	0x080061a4
 8005010:	0800619b 	.word	0x0800619b
 8005014:	08006175 	.word	0x08006175
 8005018:	3ff80000 	.word	0x3ff80000
 800501c:	08006230 	.word	0x08006230
 8005020:	08006208 	.word	0x08006208
 8005024:	2601      	movs	r6, #1
 8005026:	2300      	movs	r3, #0
 8005028:	9307      	str	r3, [sp, #28]
 800502a:	9609      	str	r6, [sp, #36]	; 0x24
 800502c:	f04f 33ff 	mov.w	r3, #4294967295
 8005030:	9304      	str	r3, [sp, #16]
 8005032:	9303      	str	r3, [sp, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	2312      	movs	r3, #18
 8005038:	920a      	str	r2, [sp, #40]	; 0x28
 800503a:	e789      	b.n	8004f50 <_dtoa_r+0x250>
 800503c:	2301      	movs	r3, #1
 800503e:	9309      	str	r3, [sp, #36]	; 0x24
 8005040:	e7f4      	b.n	800502c <_dtoa_r+0x32c>
 8005042:	2301      	movs	r3, #1
 8005044:	9304      	str	r3, [sp, #16]
 8005046:	9303      	str	r3, [sp, #12]
 8005048:	461a      	mov	r2, r3
 800504a:	e7f5      	b.n	8005038 <_dtoa_r+0x338>
 800504c:	686a      	ldr	r2, [r5, #4]
 800504e:	3201      	adds	r2, #1
 8005050:	606a      	str	r2, [r5, #4]
 8005052:	0049      	lsls	r1, r1, #1
 8005054:	e780      	b.n	8004f58 <_dtoa_r+0x258>
 8005056:	2502      	movs	r5, #2
 8005058:	e7af      	b.n	8004fba <_dtoa_r+0x2ba>
 800505a:	07f1      	lsls	r1, r6, #31
 800505c:	d508      	bpl.n	8005070 <_dtoa_r+0x370>
 800505e:	4640      	mov	r0, r8
 8005060:	4649      	mov	r1, r9
 8005062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005066:	f7fb fa6f 	bl	8000548 <__aeabi_dmul>
 800506a:	3501      	adds	r5, #1
 800506c:	4680      	mov	r8, r0
 800506e:	4689      	mov	r9, r1
 8005070:	1076      	asrs	r6, r6, #1
 8005072:	3708      	adds	r7, #8
 8005074:	e7a2      	b.n	8004fbc <_dtoa_r+0x2bc>
 8005076:	f000 809d 	beq.w	80051b4 <_dtoa_r+0x4b4>
 800507a:	f1cb 0600 	rsb	r6, fp, #0
 800507e:	4b9f      	ldr	r3, [pc, #636]	; (80052fc <_dtoa_r+0x5fc>)
 8005080:	4f9f      	ldr	r7, [pc, #636]	; (8005300 <_dtoa_r+0x600>)
 8005082:	f006 020f 	and.w	r2, r6, #15
 8005086:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005092:	f7fb fa59 	bl	8000548 <__aeabi_dmul>
 8005096:	e9cd 0100 	strd	r0, r1, [sp]
 800509a:	1136      	asrs	r6, r6, #4
 800509c:	2300      	movs	r3, #0
 800509e:	2502      	movs	r5, #2
 80050a0:	2e00      	cmp	r6, #0
 80050a2:	d17c      	bne.n	800519e <_dtoa_r+0x49e>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d191      	bne.n	8004fcc <_dtoa_r+0x2cc>
 80050a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8084 	beq.w	80051b8 <_dtoa_r+0x4b8>
 80050b0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80050b4:	2200      	movs	r2, #0
 80050b6:	4b93      	ldr	r3, [pc, #588]	; (8005304 <_dtoa_r+0x604>)
 80050b8:	4640      	mov	r0, r8
 80050ba:	4649      	mov	r1, r9
 80050bc:	f7fb fcb6 	bl	8000a2c <__aeabi_dcmplt>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d079      	beq.n	80051b8 <_dtoa_r+0x4b8>
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d076      	beq.n	80051b8 <_dtoa_r+0x4b8>
 80050ca:	9b04      	ldr	r3, [sp, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	dd34      	ble.n	800513a <_dtoa_r+0x43a>
 80050d0:	2200      	movs	r2, #0
 80050d2:	4b8d      	ldr	r3, [pc, #564]	; (8005308 <_dtoa_r+0x608>)
 80050d4:	4640      	mov	r0, r8
 80050d6:	4649      	mov	r1, r9
 80050d8:	f7fb fa36 	bl	8000548 <__aeabi_dmul>
 80050dc:	e9cd 0100 	strd	r0, r1, [sp]
 80050e0:	9e04      	ldr	r6, [sp, #16]
 80050e2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80050e6:	3501      	adds	r5, #1
 80050e8:	4628      	mov	r0, r5
 80050ea:	f7fb f9c7 	bl	800047c <__aeabi_i2d>
 80050ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f2:	f7fb fa29 	bl	8000548 <__aeabi_dmul>
 80050f6:	2200      	movs	r2, #0
 80050f8:	4b84      	ldr	r3, [pc, #528]	; (800530c <_dtoa_r+0x60c>)
 80050fa:	f7fb f873 	bl	80001e4 <__adddf3>
 80050fe:	4680      	mov	r8, r0
 8005100:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005104:	2e00      	cmp	r6, #0
 8005106:	d15a      	bne.n	80051be <_dtoa_r+0x4be>
 8005108:	2200      	movs	r2, #0
 800510a:	4b81      	ldr	r3, [pc, #516]	; (8005310 <_dtoa_r+0x610>)
 800510c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005110:	f7fb f866 	bl	80001e0 <__aeabi_dsub>
 8005114:	4642      	mov	r2, r8
 8005116:	464b      	mov	r3, r9
 8005118:	e9cd 0100 	strd	r0, r1, [sp]
 800511c:	f7fb fca4 	bl	8000a68 <__aeabi_dcmpgt>
 8005120:	2800      	cmp	r0, #0
 8005122:	f040 829b 	bne.w	800565c <_dtoa_r+0x95c>
 8005126:	4642      	mov	r2, r8
 8005128:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800512c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005130:	f7fb fc7c 	bl	8000a2c <__aeabi_dcmplt>
 8005134:	2800      	cmp	r0, #0
 8005136:	f040 828f 	bne.w	8005658 <_dtoa_r+0x958>
 800513a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800513e:	e9cd 2300 	strd	r2, r3, [sp]
 8005142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005144:	2b00      	cmp	r3, #0
 8005146:	f2c0 8150 	blt.w	80053ea <_dtoa_r+0x6ea>
 800514a:	f1bb 0f0e 	cmp.w	fp, #14
 800514e:	f300 814c 	bgt.w	80053ea <_dtoa_r+0x6ea>
 8005152:	4b6a      	ldr	r3, [pc, #424]	; (80052fc <_dtoa_r+0x5fc>)
 8005154:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005158:	e9d3 8900 	ldrd	r8, r9, [r3]
 800515c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800515e:	2b00      	cmp	r3, #0
 8005160:	f280 80da 	bge.w	8005318 <_dtoa_r+0x618>
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f300 80d6 	bgt.w	8005318 <_dtoa_r+0x618>
 800516c:	f040 8273 	bne.w	8005656 <_dtoa_r+0x956>
 8005170:	2200      	movs	r2, #0
 8005172:	4b67      	ldr	r3, [pc, #412]	; (8005310 <_dtoa_r+0x610>)
 8005174:	4640      	mov	r0, r8
 8005176:	4649      	mov	r1, r9
 8005178:	f7fb f9e6 	bl	8000548 <__aeabi_dmul>
 800517c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005180:	f7fb fc68 	bl	8000a54 <__aeabi_dcmpge>
 8005184:	9e03      	ldr	r6, [sp, #12]
 8005186:	4637      	mov	r7, r6
 8005188:	2800      	cmp	r0, #0
 800518a:	f040 824a 	bne.w	8005622 <_dtoa_r+0x922>
 800518e:	9b02      	ldr	r3, [sp, #8]
 8005190:	9a02      	ldr	r2, [sp, #8]
 8005192:	1c5d      	adds	r5, r3, #1
 8005194:	2331      	movs	r3, #49	; 0x31
 8005196:	7013      	strb	r3, [r2, #0]
 8005198:	f10b 0b01 	add.w	fp, fp, #1
 800519c:	e245      	b.n	800562a <_dtoa_r+0x92a>
 800519e:	07f2      	lsls	r2, r6, #31
 80051a0:	d505      	bpl.n	80051ae <_dtoa_r+0x4ae>
 80051a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a6:	f7fb f9cf 	bl	8000548 <__aeabi_dmul>
 80051aa:	3501      	adds	r5, #1
 80051ac:	2301      	movs	r3, #1
 80051ae:	1076      	asrs	r6, r6, #1
 80051b0:	3708      	adds	r7, #8
 80051b2:	e775      	b.n	80050a0 <_dtoa_r+0x3a0>
 80051b4:	2502      	movs	r5, #2
 80051b6:	e777      	b.n	80050a8 <_dtoa_r+0x3a8>
 80051b8:	465f      	mov	r7, fp
 80051ba:	9e03      	ldr	r6, [sp, #12]
 80051bc:	e794      	b.n	80050e8 <_dtoa_r+0x3e8>
 80051be:	9a02      	ldr	r2, [sp, #8]
 80051c0:	4b4e      	ldr	r3, [pc, #312]	; (80052fc <_dtoa_r+0x5fc>)
 80051c2:	4432      	add	r2, r6
 80051c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80051c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c8:	1e71      	subs	r1, r6, #1
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	d048      	beq.n	8005260 <_dtoa_r+0x560>
 80051ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	2000      	movs	r0, #0
 80051d8:	494e      	ldr	r1, [pc, #312]	; (8005314 <_dtoa_r+0x614>)
 80051da:	f7fb fadf 	bl	800079c <__aeabi_ddiv>
 80051de:	4642      	mov	r2, r8
 80051e0:	464b      	mov	r3, r9
 80051e2:	f7fa fffd 	bl	80001e0 <__aeabi_dsub>
 80051e6:	9d02      	ldr	r5, [sp, #8]
 80051e8:	4680      	mov	r8, r0
 80051ea:	4689      	mov	r9, r1
 80051ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051f0:	f7fb fc5a 	bl	8000aa8 <__aeabi_d2iz>
 80051f4:	4606      	mov	r6, r0
 80051f6:	f7fb f941 	bl	800047c <__aeabi_i2d>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005202:	f7fa ffed 	bl	80001e0 <__aeabi_dsub>
 8005206:	3630      	adds	r6, #48	; 0x30
 8005208:	f805 6b01 	strb.w	r6, [r5], #1
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	e9cd 0100 	strd	r0, r1, [sp]
 8005214:	f7fb fc0a 	bl	8000a2c <__aeabi_dcmplt>
 8005218:	2800      	cmp	r0, #0
 800521a:	d165      	bne.n	80052e8 <_dtoa_r+0x5e8>
 800521c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005220:	2000      	movs	r0, #0
 8005222:	4938      	ldr	r1, [pc, #224]	; (8005304 <_dtoa_r+0x604>)
 8005224:	f7fa ffdc 	bl	80001e0 <__aeabi_dsub>
 8005228:	4642      	mov	r2, r8
 800522a:	464b      	mov	r3, r9
 800522c:	f7fb fbfe 	bl	8000a2c <__aeabi_dcmplt>
 8005230:	2800      	cmp	r0, #0
 8005232:	f040 80ba 	bne.w	80053aa <_dtoa_r+0x6aa>
 8005236:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005238:	429d      	cmp	r5, r3
 800523a:	f43f af7e 	beq.w	800513a <_dtoa_r+0x43a>
 800523e:	2200      	movs	r2, #0
 8005240:	4b31      	ldr	r3, [pc, #196]	; (8005308 <_dtoa_r+0x608>)
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fb f97f 	bl	8000548 <__aeabi_dmul>
 800524a:	2200      	movs	r2, #0
 800524c:	4680      	mov	r8, r0
 800524e:	4689      	mov	r9, r1
 8005250:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <_dtoa_r+0x608>)
 8005252:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005256:	f7fb f977 	bl	8000548 <__aeabi_dmul>
 800525a:	e9cd 0100 	strd	r0, r1, [sp]
 800525e:	e7c5      	b.n	80051ec <_dtoa_r+0x4ec>
 8005260:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800526c:	f7fb f96c 	bl	8000548 <__aeabi_dmul>
 8005270:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005274:	9d02      	ldr	r5, [sp, #8]
 8005276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800527a:	f7fb fc15 	bl	8000aa8 <__aeabi_d2iz>
 800527e:	4606      	mov	r6, r0
 8005280:	f7fb f8fc 	bl	800047c <__aeabi_i2d>
 8005284:	3630      	adds	r6, #48	; 0x30
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800528e:	f7fa ffa7 	bl	80001e0 <__aeabi_dsub>
 8005292:	f805 6b01 	strb.w	r6, [r5], #1
 8005296:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005298:	42ab      	cmp	r3, r5
 800529a:	4680      	mov	r8, r0
 800529c:	4689      	mov	r9, r1
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	d125      	bne.n	80052f0 <_dtoa_r+0x5f0>
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <_dtoa_r+0x614>)
 80052a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052aa:	f7fa ff9b 	bl	80001e4 <__adddf3>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4640      	mov	r0, r8
 80052b4:	4649      	mov	r1, r9
 80052b6:	f7fb fbd7 	bl	8000a68 <__aeabi_dcmpgt>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d175      	bne.n	80053aa <_dtoa_r+0x6aa>
 80052be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052c2:	2000      	movs	r0, #0
 80052c4:	4913      	ldr	r1, [pc, #76]	; (8005314 <_dtoa_r+0x614>)
 80052c6:	f7fa ff8b 	bl	80001e0 <__aeabi_dsub>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4640      	mov	r0, r8
 80052d0:	4649      	mov	r1, r9
 80052d2:	f7fb fbab 	bl	8000a2c <__aeabi_dcmplt>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	f43f af2f 	beq.w	800513a <_dtoa_r+0x43a>
 80052dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052e0:	2b30      	cmp	r3, #48	; 0x30
 80052e2:	f105 32ff 	add.w	r2, r5, #4294967295
 80052e6:	d001      	beq.n	80052ec <_dtoa_r+0x5ec>
 80052e8:	46bb      	mov	fp, r7
 80052ea:	e04d      	b.n	8005388 <_dtoa_r+0x688>
 80052ec:	4615      	mov	r5, r2
 80052ee:	e7f5      	b.n	80052dc <_dtoa_r+0x5dc>
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <_dtoa_r+0x608>)
 80052f2:	f7fb f929 	bl	8000548 <__aeabi_dmul>
 80052f6:	e9cd 0100 	strd	r0, r1, [sp]
 80052fa:	e7bc      	b.n	8005276 <_dtoa_r+0x576>
 80052fc:	08006230 	.word	0x08006230
 8005300:	08006208 	.word	0x08006208
 8005304:	3ff00000 	.word	0x3ff00000
 8005308:	40240000 	.word	0x40240000
 800530c:	401c0000 	.word	0x401c0000
 8005310:	40140000 	.word	0x40140000
 8005314:	3fe00000 	.word	0x3fe00000
 8005318:	e9dd 6700 	ldrd	r6, r7, [sp]
 800531c:	9d02      	ldr	r5, [sp, #8]
 800531e:	4642      	mov	r2, r8
 8005320:	464b      	mov	r3, r9
 8005322:	4630      	mov	r0, r6
 8005324:	4639      	mov	r1, r7
 8005326:	f7fb fa39 	bl	800079c <__aeabi_ddiv>
 800532a:	f7fb fbbd 	bl	8000aa8 <__aeabi_d2iz>
 800532e:	9000      	str	r0, [sp, #0]
 8005330:	f7fb f8a4 	bl	800047c <__aeabi_i2d>
 8005334:	4642      	mov	r2, r8
 8005336:	464b      	mov	r3, r9
 8005338:	f7fb f906 	bl	8000548 <__aeabi_dmul>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4630      	mov	r0, r6
 8005342:	4639      	mov	r1, r7
 8005344:	f7fa ff4c 	bl	80001e0 <__aeabi_dsub>
 8005348:	9e00      	ldr	r6, [sp, #0]
 800534a:	9f03      	ldr	r7, [sp, #12]
 800534c:	3630      	adds	r6, #48	; 0x30
 800534e:	f805 6b01 	strb.w	r6, [r5], #1
 8005352:	9e02      	ldr	r6, [sp, #8]
 8005354:	1bae      	subs	r6, r5, r6
 8005356:	42b7      	cmp	r7, r6
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	d138      	bne.n	80053d0 <_dtoa_r+0x6d0>
 800535e:	f7fa ff41 	bl	80001e4 <__adddf3>
 8005362:	4606      	mov	r6, r0
 8005364:	460f      	mov	r7, r1
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	f7fb fb5d 	bl	8000a2c <__aeabi_dcmplt>
 8005372:	b9c8      	cbnz	r0, 80053a8 <_dtoa_r+0x6a8>
 8005374:	4632      	mov	r2, r6
 8005376:	463b      	mov	r3, r7
 8005378:	4640      	mov	r0, r8
 800537a:	4649      	mov	r1, r9
 800537c:	f7fb fb4c 	bl	8000a18 <__aeabi_dcmpeq>
 8005380:	b110      	cbz	r0, 8005388 <_dtoa_r+0x688>
 8005382:	9b00      	ldr	r3, [sp, #0]
 8005384:	07db      	lsls	r3, r3, #31
 8005386:	d40f      	bmi.n	80053a8 <_dtoa_r+0x6a8>
 8005388:	4651      	mov	r1, sl
 800538a:	4620      	mov	r0, r4
 800538c:	f000 fad0 	bl	8005930 <_Bfree>
 8005390:	2300      	movs	r3, #0
 8005392:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005394:	702b      	strb	r3, [r5, #0]
 8005396:	f10b 0301 	add.w	r3, fp, #1
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f43f acf8 	beq.w	8004d94 <_dtoa_r+0x94>
 80053a4:	601d      	str	r5, [r3, #0]
 80053a6:	e4f5      	b.n	8004d94 <_dtoa_r+0x94>
 80053a8:	465f      	mov	r7, fp
 80053aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80053ae:	2a39      	cmp	r2, #57	; 0x39
 80053b0:	f105 33ff 	add.w	r3, r5, #4294967295
 80053b4:	d106      	bne.n	80053c4 <_dtoa_r+0x6c4>
 80053b6:	9a02      	ldr	r2, [sp, #8]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d107      	bne.n	80053cc <_dtoa_r+0x6cc>
 80053bc:	2330      	movs	r3, #48	; 0x30
 80053be:	7013      	strb	r3, [r2, #0]
 80053c0:	3701      	adds	r7, #1
 80053c2:	4613      	mov	r3, r2
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	3201      	adds	r2, #1
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	e78d      	b.n	80052e8 <_dtoa_r+0x5e8>
 80053cc:	461d      	mov	r5, r3
 80053ce:	e7ec      	b.n	80053aa <_dtoa_r+0x6aa>
 80053d0:	2200      	movs	r2, #0
 80053d2:	4ba4      	ldr	r3, [pc, #656]	; (8005664 <_dtoa_r+0x964>)
 80053d4:	f7fb f8b8 	bl	8000548 <__aeabi_dmul>
 80053d8:	2200      	movs	r2, #0
 80053da:	2300      	movs	r3, #0
 80053dc:	4606      	mov	r6, r0
 80053de:	460f      	mov	r7, r1
 80053e0:	f7fb fb1a 	bl	8000a18 <__aeabi_dcmpeq>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d09a      	beq.n	800531e <_dtoa_r+0x61e>
 80053e8:	e7ce      	b.n	8005388 <_dtoa_r+0x688>
 80053ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	f000 80cd 	beq.w	800558c <_dtoa_r+0x88c>
 80053f2:	9a07      	ldr	r2, [sp, #28]
 80053f4:	2a01      	cmp	r2, #1
 80053f6:	f300 80af 	bgt.w	8005558 <_dtoa_r+0x858>
 80053fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053fc:	2a00      	cmp	r2, #0
 80053fe:	f000 80a7 	beq.w	8005550 <_dtoa_r+0x850>
 8005402:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005406:	9e08      	ldr	r6, [sp, #32]
 8005408:	9d05      	ldr	r5, [sp, #20]
 800540a:	9a05      	ldr	r2, [sp, #20]
 800540c:	441a      	add	r2, r3
 800540e:	9205      	str	r2, [sp, #20]
 8005410:	9a06      	ldr	r2, [sp, #24]
 8005412:	2101      	movs	r1, #1
 8005414:	441a      	add	r2, r3
 8005416:	4620      	mov	r0, r4
 8005418:	9206      	str	r2, [sp, #24]
 800541a:	f000 fb29 	bl	8005a70 <__i2b>
 800541e:	4607      	mov	r7, r0
 8005420:	2d00      	cmp	r5, #0
 8005422:	dd0c      	ble.n	800543e <_dtoa_r+0x73e>
 8005424:	9b06      	ldr	r3, [sp, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	dd09      	ble.n	800543e <_dtoa_r+0x73e>
 800542a:	42ab      	cmp	r3, r5
 800542c:	9a05      	ldr	r2, [sp, #20]
 800542e:	bfa8      	it	ge
 8005430:	462b      	movge	r3, r5
 8005432:	1ad2      	subs	r2, r2, r3
 8005434:	9205      	str	r2, [sp, #20]
 8005436:	9a06      	ldr	r2, [sp, #24]
 8005438:	1aed      	subs	r5, r5, r3
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	9306      	str	r3, [sp, #24]
 800543e:	9b08      	ldr	r3, [sp, #32]
 8005440:	b1f3      	cbz	r3, 8005480 <_dtoa_r+0x780>
 8005442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80a5 	beq.w	8005594 <_dtoa_r+0x894>
 800544a:	2e00      	cmp	r6, #0
 800544c:	dd10      	ble.n	8005470 <_dtoa_r+0x770>
 800544e:	4639      	mov	r1, r7
 8005450:	4632      	mov	r2, r6
 8005452:	4620      	mov	r0, r4
 8005454:	f000 fba2 	bl	8005b9c <__pow5mult>
 8005458:	4652      	mov	r2, sl
 800545a:	4601      	mov	r1, r0
 800545c:	4607      	mov	r7, r0
 800545e:	4620      	mov	r0, r4
 8005460:	f000 fb0f 	bl	8005a82 <__multiply>
 8005464:	4651      	mov	r1, sl
 8005466:	4680      	mov	r8, r0
 8005468:	4620      	mov	r0, r4
 800546a:	f000 fa61 	bl	8005930 <_Bfree>
 800546e:	46c2      	mov	sl, r8
 8005470:	9b08      	ldr	r3, [sp, #32]
 8005472:	1b9a      	subs	r2, r3, r6
 8005474:	d004      	beq.n	8005480 <_dtoa_r+0x780>
 8005476:	4651      	mov	r1, sl
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fb8f 	bl	8005b9c <__pow5mult>
 800547e:	4682      	mov	sl, r0
 8005480:	2101      	movs	r1, #1
 8005482:	4620      	mov	r0, r4
 8005484:	f000 faf4 	bl	8005a70 <__i2b>
 8005488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800548a:	2b00      	cmp	r3, #0
 800548c:	4606      	mov	r6, r0
 800548e:	f340 8083 	ble.w	8005598 <_dtoa_r+0x898>
 8005492:	461a      	mov	r2, r3
 8005494:	4601      	mov	r1, r0
 8005496:	4620      	mov	r0, r4
 8005498:	f000 fb80 	bl	8005b9c <__pow5mult>
 800549c:	9b07      	ldr	r3, [sp, #28]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	4606      	mov	r6, r0
 80054a2:	dd7c      	ble.n	800559e <_dtoa_r+0x89e>
 80054a4:	f04f 0800 	mov.w	r8, #0
 80054a8:	6933      	ldr	r3, [r6, #16]
 80054aa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80054ae:	6918      	ldr	r0, [r3, #16]
 80054b0:	f000 fa90 	bl	80059d4 <__hi0bits>
 80054b4:	f1c0 0020 	rsb	r0, r0, #32
 80054b8:	9b06      	ldr	r3, [sp, #24]
 80054ba:	4418      	add	r0, r3
 80054bc:	f010 001f 	ands.w	r0, r0, #31
 80054c0:	f000 8096 	beq.w	80055f0 <_dtoa_r+0x8f0>
 80054c4:	f1c0 0320 	rsb	r3, r0, #32
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	f340 8087 	ble.w	80055dc <_dtoa_r+0x8dc>
 80054ce:	9b05      	ldr	r3, [sp, #20]
 80054d0:	f1c0 001c 	rsb	r0, r0, #28
 80054d4:	4403      	add	r3, r0
 80054d6:	9305      	str	r3, [sp, #20]
 80054d8:	9b06      	ldr	r3, [sp, #24]
 80054da:	4405      	add	r5, r0
 80054dc:	4403      	add	r3, r0
 80054de:	9306      	str	r3, [sp, #24]
 80054e0:	9b05      	ldr	r3, [sp, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	dd05      	ble.n	80054f2 <_dtoa_r+0x7f2>
 80054e6:	4651      	mov	r1, sl
 80054e8:	461a      	mov	r2, r3
 80054ea:	4620      	mov	r0, r4
 80054ec:	f000 fba4 	bl	8005c38 <__lshift>
 80054f0:	4682      	mov	sl, r0
 80054f2:	9b06      	ldr	r3, [sp, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	dd05      	ble.n	8005504 <_dtoa_r+0x804>
 80054f8:	4631      	mov	r1, r6
 80054fa:	461a      	mov	r2, r3
 80054fc:	4620      	mov	r0, r4
 80054fe:	f000 fb9b 	bl	8005c38 <__lshift>
 8005502:	4606      	mov	r6, r0
 8005504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d074      	beq.n	80055f4 <_dtoa_r+0x8f4>
 800550a:	4631      	mov	r1, r6
 800550c:	4650      	mov	r0, sl
 800550e:	f000 fbe4 	bl	8005cda <__mcmp>
 8005512:	2800      	cmp	r0, #0
 8005514:	da6e      	bge.n	80055f4 <_dtoa_r+0x8f4>
 8005516:	2300      	movs	r3, #0
 8005518:	4651      	mov	r1, sl
 800551a:	220a      	movs	r2, #10
 800551c:	4620      	mov	r0, r4
 800551e:	f000 fa1e 	bl	800595e <__multadd>
 8005522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005524:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005528:	4682      	mov	sl, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 81a8 	beq.w	8005880 <_dtoa_r+0xb80>
 8005530:	2300      	movs	r3, #0
 8005532:	4639      	mov	r1, r7
 8005534:	220a      	movs	r2, #10
 8005536:	4620      	mov	r0, r4
 8005538:	f000 fa11 	bl	800595e <__multadd>
 800553c:	9b04      	ldr	r3, [sp, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	4607      	mov	r7, r0
 8005542:	f300 80c8 	bgt.w	80056d6 <_dtoa_r+0x9d6>
 8005546:	9b07      	ldr	r3, [sp, #28]
 8005548:	2b02      	cmp	r3, #2
 800554a:	f340 80c4 	ble.w	80056d6 <_dtoa_r+0x9d6>
 800554e:	e059      	b.n	8005604 <_dtoa_r+0x904>
 8005550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005552:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005556:	e756      	b.n	8005406 <_dtoa_r+0x706>
 8005558:	9b03      	ldr	r3, [sp, #12]
 800555a:	1e5e      	subs	r6, r3, #1
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	42b3      	cmp	r3, r6
 8005560:	bfbf      	itttt	lt
 8005562:	9b08      	ldrlt	r3, [sp, #32]
 8005564:	9608      	strlt	r6, [sp, #32]
 8005566:	1af2      	sublt	r2, r6, r3
 8005568:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800556a:	bfb6      	itet	lt
 800556c:	189b      	addlt	r3, r3, r2
 800556e:	1b9e      	subge	r6, r3, r6
 8005570:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8005572:	9b03      	ldr	r3, [sp, #12]
 8005574:	bfb8      	it	lt
 8005576:	2600      	movlt	r6, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	bfb9      	ittee	lt
 800557c:	9b05      	ldrlt	r3, [sp, #20]
 800557e:	9a03      	ldrlt	r2, [sp, #12]
 8005580:	9d05      	ldrge	r5, [sp, #20]
 8005582:	9b03      	ldrge	r3, [sp, #12]
 8005584:	bfbc      	itt	lt
 8005586:	1a9d      	sublt	r5, r3, r2
 8005588:	2300      	movlt	r3, #0
 800558a:	e73e      	b.n	800540a <_dtoa_r+0x70a>
 800558c:	9e08      	ldr	r6, [sp, #32]
 800558e:	9d05      	ldr	r5, [sp, #20]
 8005590:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005592:	e745      	b.n	8005420 <_dtoa_r+0x720>
 8005594:	9a08      	ldr	r2, [sp, #32]
 8005596:	e76e      	b.n	8005476 <_dtoa_r+0x776>
 8005598:	9b07      	ldr	r3, [sp, #28]
 800559a:	2b01      	cmp	r3, #1
 800559c:	dc19      	bgt.n	80055d2 <_dtoa_r+0x8d2>
 800559e:	9b00      	ldr	r3, [sp, #0]
 80055a0:	b9bb      	cbnz	r3, 80055d2 <_dtoa_r+0x8d2>
 80055a2:	9b01      	ldr	r3, [sp, #4]
 80055a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055a8:	b99b      	cbnz	r3, 80055d2 <_dtoa_r+0x8d2>
 80055aa:	9b01      	ldr	r3, [sp, #4]
 80055ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055b0:	0d1b      	lsrs	r3, r3, #20
 80055b2:	051b      	lsls	r3, r3, #20
 80055b4:	b183      	cbz	r3, 80055d8 <_dtoa_r+0x8d8>
 80055b6:	9b05      	ldr	r3, [sp, #20]
 80055b8:	3301      	adds	r3, #1
 80055ba:	9305      	str	r3, [sp, #20]
 80055bc:	9b06      	ldr	r3, [sp, #24]
 80055be:	3301      	adds	r3, #1
 80055c0:	9306      	str	r3, [sp, #24]
 80055c2:	f04f 0801 	mov.w	r8, #1
 80055c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f47f af6d 	bne.w	80054a8 <_dtoa_r+0x7a8>
 80055ce:	2001      	movs	r0, #1
 80055d0:	e772      	b.n	80054b8 <_dtoa_r+0x7b8>
 80055d2:	f04f 0800 	mov.w	r8, #0
 80055d6:	e7f6      	b.n	80055c6 <_dtoa_r+0x8c6>
 80055d8:	4698      	mov	r8, r3
 80055da:	e7f4      	b.n	80055c6 <_dtoa_r+0x8c6>
 80055dc:	d080      	beq.n	80054e0 <_dtoa_r+0x7e0>
 80055de:	9a05      	ldr	r2, [sp, #20]
 80055e0:	331c      	adds	r3, #28
 80055e2:	441a      	add	r2, r3
 80055e4:	9205      	str	r2, [sp, #20]
 80055e6:	9a06      	ldr	r2, [sp, #24]
 80055e8:	441a      	add	r2, r3
 80055ea:	441d      	add	r5, r3
 80055ec:	4613      	mov	r3, r2
 80055ee:	e776      	b.n	80054de <_dtoa_r+0x7de>
 80055f0:	4603      	mov	r3, r0
 80055f2:	e7f4      	b.n	80055de <_dtoa_r+0x8de>
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	dc36      	bgt.n	8005668 <_dtoa_r+0x968>
 80055fa:	9b07      	ldr	r3, [sp, #28]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	dd33      	ble.n	8005668 <_dtoa_r+0x968>
 8005600:	9b03      	ldr	r3, [sp, #12]
 8005602:	9304      	str	r3, [sp, #16]
 8005604:	9b04      	ldr	r3, [sp, #16]
 8005606:	b963      	cbnz	r3, 8005622 <_dtoa_r+0x922>
 8005608:	4631      	mov	r1, r6
 800560a:	2205      	movs	r2, #5
 800560c:	4620      	mov	r0, r4
 800560e:	f000 f9a6 	bl	800595e <__multadd>
 8005612:	4601      	mov	r1, r0
 8005614:	4606      	mov	r6, r0
 8005616:	4650      	mov	r0, sl
 8005618:	f000 fb5f 	bl	8005cda <__mcmp>
 800561c:	2800      	cmp	r0, #0
 800561e:	f73f adb6 	bgt.w	800518e <_dtoa_r+0x48e>
 8005622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005624:	9d02      	ldr	r5, [sp, #8]
 8005626:	ea6f 0b03 	mvn.w	fp, r3
 800562a:	2300      	movs	r3, #0
 800562c:	9303      	str	r3, [sp, #12]
 800562e:	4631      	mov	r1, r6
 8005630:	4620      	mov	r0, r4
 8005632:	f000 f97d 	bl	8005930 <_Bfree>
 8005636:	2f00      	cmp	r7, #0
 8005638:	f43f aea6 	beq.w	8005388 <_dtoa_r+0x688>
 800563c:	9b03      	ldr	r3, [sp, #12]
 800563e:	b12b      	cbz	r3, 800564c <_dtoa_r+0x94c>
 8005640:	42bb      	cmp	r3, r7
 8005642:	d003      	beq.n	800564c <_dtoa_r+0x94c>
 8005644:	4619      	mov	r1, r3
 8005646:	4620      	mov	r0, r4
 8005648:	f000 f972 	bl	8005930 <_Bfree>
 800564c:	4639      	mov	r1, r7
 800564e:	4620      	mov	r0, r4
 8005650:	f000 f96e 	bl	8005930 <_Bfree>
 8005654:	e698      	b.n	8005388 <_dtoa_r+0x688>
 8005656:	2600      	movs	r6, #0
 8005658:	4637      	mov	r7, r6
 800565a:	e7e2      	b.n	8005622 <_dtoa_r+0x922>
 800565c:	46bb      	mov	fp, r7
 800565e:	4637      	mov	r7, r6
 8005660:	e595      	b.n	800518e <_dtoa_r+0x48e>
 8005662:	bf00      	nop
 8005664:	40240000 	.word	0x40240000
 8005668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566a:	bb93      	cbnz	r3, 80056d2 <_dtoa_r+0x9d2>
 800566c:	9b03      	ldr	r3, [sp, #12]
 800566e:	9304      	str	r3, [sp, #16]
 8005670:	9d02      	ldr	r5, [sp, #8]
 8005672:	4631      	mov	r1, r6
 8005674:	4650      	mov	r0, sl
 8005676:	f7ff fab5 	bl	8004be4 <quorem>
 800567a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800567e:	f805 9b01 	strb.w	r9, [r5], #1
 8005682:	9b02      	ldr	r3, [sp, #8]
 8005684:	9a04      	ldr	r2, [sp, #16]
 8005686:	1aeb      	subs	r3, r5, r3
 8005688:	429a      	cmp	r2, r3
 800568a:	f300 80dc 	bgt.w	8005846 <_dtoa_r+0xb46>
 800568e:	9b02      	ldr	r3, [sp, #8]
 8005690:	2a01      	cmp	r2, #1
 8005692:	bfac      	ite	ge
 8005694:	189b      	addge	r3, r3, r2
 8005696:	3301      	addlt	r3, #1
 8005698:	4698      	mov	r8, r3
 800569a:	2300      	movs	r3, #0
 800569c:	9303      	str	r3, [sp, #12]
 800569e:	4651      	mov	r1, sl
 80056a0:	2201      	movs	r2, #1
 80056a2:	4620      	mov	r0, r4
 80056a4:	f000 fac8 	bl	8005c38 <__lshift>
 80056a8:	4631      	mov	r1, r6
 80056aa:	4682      	mov	sl, r0
 80056ac:	f000 fb15 	bl	8005cda <__mcmp>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	f300 808d 	bgt.w	80057d0 <_dtoa_r+0xad0>
 80056b6:	d103      	bne.n	80056c0 <_dtoa_r+0x9c0>
 80056b8:	f019 0f01 	tst.w	r9, #1
 80056bc:	f040 8088 	bne.w	80057d0 <_dtoa_r+0xad0>
 80056c0:	4645      	mov	r5, r8
 80056c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056c6:	2b30      	cmp	r3, #48	; 0x30
 80056c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80056cc:	d1af      	bne.n	800562e <_dtoa_r+0x92e>
 80056ce:	4615      	mov	r5, r2
 80056d0:	e7f7      	b.n	80056c2 <_dtoa_r+0x9c2>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	9304      	str	r3, [sp, #16]
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	dd05      	ble.n	80056e6 <_dtoa_r+0x9e6>
 80056da:	4639      	mov	r1, r7
 80056dc:	462a      	mov	r2, r5
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 faaa 	bl	8005c38 <__lshift>
 80056e4:	4607      	mov	r7, r0
 80056e6:	f1b8 0f00 	cmp.w	r8, #0
 80056ea:	d04c      	beq.n	8005786 <_dtoa_r+0xa86>
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 f8ea 	bl	80058c8 <_Balloc>
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	3202      	adds	r2, #2
 80056f8:	4605      	mov	r5, r0
 80056fa:	0092      	lsls	r2, r2, #2
 80056fc:	f107 010c 	add.w	r1, r7, #12
 8005700:	300c      	adds	r0, #12
 8005702:	f7fe fecf 	bl	80044a4 <memcpy>
 8005706:	2201      	movs	r2, #1
 8005708:	4629      	mov	r1, r5
 800570a:	4620      	mov	r0, r4
 800570c:	f000 fa94 	bl	8005c38 <__lshift>
 8005710:	9b00      	ldr	r3, [sp, #0]
 8005712:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005716:	9703      	str	r7, [sp, #12]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	4607      	mov	r7, r0
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	4631      	mov	r1, r6
 8005722:	4650      	mov	r0, sl
 8005724:	f7ff fa5e 	bl	8004be4 <quorem>
 8005728:	9903      	ldr	r1, [sp, #12]
 800572a:	4605      	mov	r5, r0
 800572c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005730:	4650      	mov	r0, sl
 8005732:	f000 fad2 	bl	8005cda <__mcmp>
 8005736:	463a      	mov	r2, r7
 8005738:	9000      	str	r0, [sp, #0]
 800573a:	4631      	mov	r1, r6
 800573c:	4620      	mov	r0, r4
 800573e:	f000 fae6 	bl	8005d0e <__mdiff>
 8005742:	68c3      	ldr	r3, [r0, #12]
 8005744:	4602      	mov	r2, r0
 8005746:	bb03      	cbnz	r3, 800578a <_dtoa_r+0xa8a>
 8005748:	4601      	mov	r1, r0
 800574a:	9006      	str	r0, [sp, #24]
 800574c:	4650      	mov	r0, sl
 800574e:	f000 fac4 	bl	8005cda <__mcmp>
 8005752:	9a06      	ldr	r2, [sp, #24]
 8005754:	4603      	mov	r3, r0
 8005756:	4611      	mov	r1, r2
 8005758:	4620      	mov	r0, r4
 800575a:	9306      	str	r3, [sp, #24]
 800575c:	f000 f8e8 	bl	8005930 <_Bfree>
 8005760:	9b06      	ldr	r3, [sp, #24]
 8005762:	b9a3      	cbnz	r3, 800578e <_dtoa_r+0xa8e>
 8005764:	9a07      	ldr	r2, [sp, #28]
 8005766:	b992      	cbnz	r2, 800578e <_dtoa_r+0xa8e>
 8005768:	9a05      	ldr	r2, [sp, #20]
 800576a:	b982      	cbnz	r2, 800578e <_dtoa_r+0xa8e>
 800576c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005770:	d029      	beq.n	80057c6 <_dtoa_r+0xac6>
 8005772:	9b00      	ldr	r3, [sp, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	dd01      	ble.n	800577c <_dtoa_r+0xa7c>
 8005778:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800577c:	f108 0501 	add.w	r5, r8, #1
 8005780:	f888 9000 	strb.w	r9, [r8]
 8005784:	e753      	b.n	800562e <_dtoa_r+0x92e>
 8005786:	4638      	mov	r0, r7
 8005788:	e7c2      	b.n	8005710 <_dtoa_r+0xa10>
 800578a:	2301      	movs	r3, #1
 800578c:	e7e3      	b.n	8005756 <_dtoa_r+0xa56>
 800578e:	9a00      	ldr	r2, [sp, #0]
 8005790:	2a00      	cmp	r2, #0
 8005792:	db04      	blt.n	800579e <_dtoa_r+0xa9e>
 8005794:	d125      	bne.n	80057e2 <_dtoa_r+0xae2>
 8005796:	9a07      	ldr	r2, [sp, #28]
 8005798:	bb1a      	cbnz	r2, 80057e2 <_dtoa_r+0xae2>
 800579a:	9a05      	ldr	r2, [sp, #20]
 800579c:	bb0a      	cbnz	r2, 80057e2 <_dtoa_r+0xae2>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	ddec      	ble.n	800577c <_dtoa_r+0xa7c>
 80057a2:	4651      	mov	r1, sl
 80057a4:	2201      	movs	r2, #1
 80057a6:	4620      	mov	r0, r4
 80057a8:	f000 fa46 	bl	8005c38 <__lshift>
 80057ac:	4631      	mov	r1, r6
 80057ae:	4682      	mov	sl, r0
 80057b0:	f000 fa93 	bl	8005cda <__mcmp>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	dc03      	bgt.n	80057c0 <_dtoa_r+0xac0>
 80057b8:	d1e0      	bne.n	800577c <_dtoa_r+0xa7c>
 80057ba:	f019 0f01 	tst.w	r9, #1
 80057be:	d0dd      	beq.n	800577c <_dtoa_r+0xa7c>
 80057c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80057c4:	d1d8      	bne.n	8005778 <_dtoa_r+0xa78>
 80057c6:	2339      	movs	r3, #57	; 0x39
 80057c8:	f888 3000 	strb.w	r3, [r8]
 80057cc:	f108 0801 	add.w	r8, r8, #1
 80057d0:	4645      	mov	r5, r8
 80057d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057d6:	2b39      	cmp	r3, #57	; 0x39
 80057d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80057dc:	d03b      	beq.n	8005856 <_dtoa_r+0xb56>
 80057de:	3301      	adds	r3, #1
 80057e0:	e040      	b.n	8005864 <_dtoa_r+0xb64>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f108 0501 	add.w	r5, r8, #1
 80057e8:	dd05      	ble.n	80057f6 <_dtoa_r+0xaf6>
 80057ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80057ee:	d0ea      	beq.n	80057c6 <_dtoa_r+0xac6>
 80057f0:	f109 0901 	add.w	r9, r9, #1
 80057f4:	e7c4      	b.n	8005780 <_dtoa_r+0xa80>
 80057f6:	9b02      	ldr	r3, [sp, #8]
 80057f8:	9a04      	ldr	r2, [sp, #16]
 80057fa:	f805 9c01 	strb.w	r9, [r5, #-1]
 80057fe:	1aeb      	subs	r3, r5, r3
 8005800:	4293      	cmp	r3, r2
 8005802:	46a8      	mov	r8, r5
 8005804:	f43f af4b 	beq.w	800569e <_dtoa_r+0x99e>
 8005808:	4651      	mov	r1, sl
 800580a:	2300      	movs	r3, #0
 800580c:	220a      	movs	r2, #10
 800580e:	4620      	mov	r0, r4
 8005810:	f000 f8a5 	bl	800595e <__multadd>
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	9903      	ldr	r1, [sp, #12]
 8005818:	42bb      	cmp	r3, r7
 800581a:	4682      	mov	sl, r0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	f04f 020a 	mov.w	r2, #10
 8005824:	4620      	mov	r0, r4
 8005826:	d104      	bne.n	8005832 <_dtoa_r+0xb32>
 8005828:	f000 f899 	bl	800595e <__multadd>
 800582c:	9003      	str	r0, [sp, #12]
 800582e:	4607      	mov	r7, r0
 8005830:	e776      	b.n	8005720 <_dtoa_r+0xa20>
 8005832:	f000 f894 	bl	800595e <__multadd>
 8005836:	2300      	movs	r3, #0
 8005838:	9003      	str	r0, [sp, #12]
 800583a:	220a      	movs	r2, #10
 800583c:	4639      	mov	r1, r7
 800583e:	4620      	mov	r0, r4
 8005840:	f000 f88d 	bl	800595e <__multadd>
 8005844:	e7f3      	b.n	800582e <_dtoa_r+0xb2e>
 8005846:	4651      	mov	r1, sl
 8005848:	2300      	movs	r3, #0
 800584a:	220a      	movs	r2, #10
 800584c:	4620      	mov	r0, r4
 800584e:	f000 f886 	bl	800595e <__multadd>
 8005852:	4682      	mov	sl, r0
 8005854:	e70d      	b.n	8005672 <_dtoa_r+0x972>
 8005856:	9b02      	ldr	r3, [sp, #8]
 8005858:	4293      	cmp	r3, r2
 800585a:	d105      	bne.n	8005868 <_dtoa_r+0xb68>
 800585c:	9a02      	ldr	r2, [sp, #8]
 800585e:	f10b 0b01 	add.w	fp, fp, #1
 8005862:	2331      	movs	r3, #49	; 0x31
 8005864:	7013      	strb	r3, [r2, #0]
 8005866:	e6e2      	b.n	800562e <_dtoa_r+0x92e>
 8005868:	4615      	mov	r5, r2
 800586a:	e7b2      	b.n	80057d2 <_dtoa_r+0xad2>
 800586c:	4b09      	ldr	r3, [pc, #36]	; (8005894 <_dtoa_r+0xb94>)
 800586e:	f7ff baae 	b.w	8004dce <_dtoa_r+0xce>
 8005872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005874:	2b00      	cmp	r3, #0
 8005876:	f47f aa88 	bne.w	8004d8a <_dtoa_r+0x8a>
 800587a:	4b07      	ldr	r3, [pc, #28]	; (8005898 <_dtoa_r+0xb98>)
 800587c:	f7ff baa7 	b.w	8004dce <_dtoa_r+0xce>
 8005880:	9b04      	ldr	r3, [sp, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f73f aef4 	bgt.w	8005670 <_dtoa_r+0x970>
 8005888:	9b07      	ldr	r3, [sp, #28]
 800588a:	2b02      	cmp	r3, #2
 800588c:	f77f aef0 	ble.w	8005670 <_dtoa_r+0x970>
 8005890:	e6b8      	b.n	8005604 <_dtoa_r+0x904>
 8005892:	bf00      	nop
 8005894:	08006174 	.word	0x08006174
 8005898:	0800619b 	.word	0x0800619b

0800589c <_localeconv_r>:
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <_localeconv_r+0x14>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6a18      	ldr	r0, [r3, #32]
 80058a2:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <_localeconv_r+0x18>)
 80058a4:	2800      	cmp	r0, #0
 80058a6:	bf08      	it	eq
 80058a8:	4618      	moveq	r0, r3
 80058aa:	30f0      	adds	r0, #240	; 0xf0
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000018 	.word	0x20000018
 80058b4:	2000007c 	.word	0x2000007c

080058b8 <malloc>:
 80058b8:	4b02      	ldr	r3, [pc, #8]	; (80058c4 <malloc+0xc>)
 80058ba:	4601      	mov	r1, r0
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	f000 bae1 	b.w	8005e84 <_malloc_r>
 80058c2:	bf00      	nop
 80058c4:	20000018 	.word	0x20000018

080058c8 <_Balloc>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058cc:	4604      	mov	r4, r0
 80058ce:	460e      	mov	r6, r1
 80058d0:	b93d      	cbnz	r5, 80058e2 <_Balloc+0x1a>
 80058d2:	2010      	movs	r0, #16
 80058d4:	f7ff fff0 	bl	80058b8 <malloc>
 80058d8:	6260      	str	r0, [r4, #36]	; 0x24
 80058da:	6045      	str	r5, [r0, #4]
 80058dc:	6085      	str	r5, [r0, #8]
 80058de:	6005      	str	r5, [r0, #0]
 80058e0:	60c5      	str	r5, [r0, #12]
 80058e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80058e4:	68eb      	ldr	r3, [r5, #12]
 80058e6:	b183      	cbz	r3, 800590a <_Balloc+0x42>
 80058e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058f0:	b9b8      	cbnz	r0, 8005922 <_Balloc+0x5a>
 80058f2:	2101      	movs	r1, #1
 80058f4:	fa01 f506 	lsl.w	r5, r1, r6
 80058f8:	1d6a      	adds	r2, r5, #5
 80058fa:	0092      	lsls	r2, r2, #2
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 fab3 	bl	8005e68 <_calloc_r>
 8005902:	b160      	cbz	r0, 800591e <_Balloc+0x56>
 8005904:	6046      	str	r6, [r0, #4]
 8005906:	6085      	str	r5, [r0, #8]
 8005908:	e00e      	b.n	8005928 <_Balloc+0x60>
 800590a:	2221      	movs	r2, #33	; 0x21
 800590c:	2104      	movs	r1, #4
 800590e:	4620      	mov	r0, r4
 8005910:	f000 faaa 	bl	8005e68 <_calloc_r>
 8005914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005916:	60e8      	str	r0, [r5, #12]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e4      	bne.n	80058e8 <_Balloc+0x20>
 800591e:	2000      	movs	r0, #0
 8005920:	bd70      	pop	{r4, r5, r6, pc}
 8005922:	6802      	ldr	r2, [r0, #0]
 8005924:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005928:	2300      	movs	r3, #0
 800592a:	6103      	str	r3, [r0, #16]
 800592c:	60c3      	str	r3, [r0, #12]
 800592e:	bd70      	pop	{r4, r5, r6, pc}

08005930 <_Bfree>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005934:	4606      	mov	r6, r0
 8005936:	460d      	mov	r5, r1
 8005938:	b93c      	cbnz	r4, 800594a <_Bfree+0x1a>
 800593a:	2010      	movs	r0, #16
 800593c:	f7ff ffbc 	bl	80058b8 <malloc>
 8005940:	6270      	str	r0, [r6, #36]	; 0x24
 8005942:	6044      	str	r4, [r0, #4]
 8005944:	6084      	str	r4, [r0, #8]
 8005946:	6004      	str	r4, [r0, #0]
 8005948:	60c4      	str	r4, [r0, #12]
 800594a:	b13d      	cbz	r5, 800595c <_Bfree+0x2c>
 800594c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800594e:	686a      	ldr	r2, [r5, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005956:	6029      	str	r1, [r5, #0]
 8005958:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800595c:	bd70      	pop	{r4, r5, r6, pc}

0800595e <__multadd>:
 800595e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005962:	690d      	ldr	r5, [r1, #16]
 8005964:	461f      	mov	r7, r3
 8005966:	4606      	mov	r6, r0
 8005968:	460c      	mov	r4, r1
 800596a:	f101 0e14 	add.w	lr, r1, #20
 800596e:	2300      	movs	r3, #0
 8005970:	f8de 0000 	ldr.w	r0, [lr]
 8005974:	b281      	uxth	r1, r0
 8005976:	fb02 7101 	mla	r1, r2, r1, r7
 800597a:	0c0f      	lsrs	r7, r1, #16
 800597c:	0c00      	lsrs	r0, r0, #16
 800597e:	fb02 7000 	mla	r0, r2, r0, r7
 8005982:	b289      	uxth	r1, r1
 8005984:	3301      	adds	r3, #1
 8005986:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800598a:	429d      	cmp	r5, r3
 800598c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005990:	f84e 1b04 	str.w	r1, [lr], #4
 8005994:	dcec      	bgt.n	8005970 <__multadd+0x12>
 8005996:	b1d7      	cbz	r7, 80059ce <__multadd+0x70>
 8005998:	68a3      	ldr	r3, [r4, #8]
 800599a:	429d      	cmp	r5, r3
 800599c:	db12      	blt.n	80059c4 <__multadd+0x66>
 800599e:	6861      	ldr	r1, [r4, #4]
 80059a0:	4630      	mov	r0, r6
 80059a2:	3101      	adds	r1, #1
 80059a4:	f7ff ff90 	bl	80058c8 <_Balloc>
 80059a8:	6922      	ldr	r2, [r4, #16]
 80059aa:	3202      	adds	r2, #2
 80059ac:	f104 010c 	add.w	r1, r4, #12
 80059b0:	4680      	mov	r8, r0
 80059b2:	0092      	lsls	r2, r2, #2
 80059b4:	300c      	adds	r0, #12
 80059b6:	f7fe fd75 	bl	80044a4 <memcpy>
 80059ba:	4621      	mov	r1, r4
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff ffb7 	bl	8005930 <_Bfree>
 80059c2:	4644      	mov	r4, r8
 80059c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059c8:	3501      	adds	r5, #1
 80059ca:	615f      	str	r7, [r3, #20]
 80059cc:	6125      	str	r5, [r4, #16]
 80059ce:	4620      	mov	r0, r4
 80059d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059d4 <__hi0bits>:
 80059d4:	0c02      	lsrs	r2, r0, #16
 80059d6:	0412      	lsls	r2, r2, #16
 80059d8:	4603      	mov	r3, r0
 80059da:	b9b2      	cbnz	r2, 8005a0a <__hi0bits+0x36>
 80059dc:	0403      	lsls	r3, r0, #16
 80059de:	2010      	movs	r0, #16
 80059e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059e4:	bf04      	itt	eq
 80059e6:	021b      	lsleq	r3, r3, #8
 80059e8:	3008      	addeq	r0, #8
 80059ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059ee:	bf04      	itt	eq
 80059f0:	011b      	lsleq	r3, r3, #4
 80059f2:	3004      	addeq	r0, #4
 80059f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80059f8:	bf04      	itt	eq
 80059fa:	009b      	lsleq	r3, r3, #2
 80059fc:	3002      	addeq	r0, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	db06      	blt.n	8005a10 <__hi0bits+0x3c>
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	d503      	bpl.n	8005a0e <__hi0bits+0x3a>
 8005a06:	3001      	adds	r0, #1
 8005a08:	4770      	bx	lr
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e7e8      	b.n	80059e0 <__hi0bits+0xc>
 8005a0e:	2020      	movs	r0, #32
 8005a10:	4770      	bx	lr

08005a12 <__lo0bits>:
 8005a12:	6803      	ldr	r3, [r0, #0]
 8005a14:	f013 0207 	ands.w	r2, r3, #7
 8005a18:	4601      	mov	r1, r0
 8005a1a:	d00b      	beq.n	8005a34 <__lo0bits+0x22>
 8005a1c:	07da      	lsls	r2, r3, #31
 8005a1e:	d423      	bmi.n	8005a68 <__lo0bits+0x56>
 8005a20:	0798      	lsls	r0, r3, #30
 8005a22:	bf49      	itett	mi
 8005a24:	085b      	lsrmi	r3, r3, #1
 8005a26:	089b      	lsrpl	r3, r3, #2
 8005a28:	2001      	movmi	r0, #1
 8005a2a:	600b      	strmi	r3, [r1, #0]
 8005a2c:	bf5c      	itt	pl
 8005a2e:	600b      	strpl	r3, [r1, #0]
 8005a30:	2002      	movpl	r0, #2
 8005a32:	4770      	bx	lr
 8005a34:	b298      	uxth	r0, r3
 8005a36:	b9a8      	cbnz	r0, 8005a64 <__lo0bits+0x52>
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	2010      	movs	r0, #16
 8005a3c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a40:	bf04      	itt	eq
 8005a42:	0a1b      	lsreq	r3, r3, #8
 8005a44:	3008      	addeq	r0, #8
 8005a46:	071a      	lsls	r2, r3, #28
 8005a48:	bf04      	itt	eq
 8005a4a:	091b      	lsreq	r3, r3, #4
 8005a4c:	3004      	addeq	r0, #4
 8005a4e:	079a      	lsls	r2, r3, #30
 8005a50:	bf04      	itt	eq
 8005a52:	089b      	lsreq	r3, r3, #2
 8005a54:	3002      	addeq	r0, #2
 8005a56:	07da      	lsls	r2, r3, #31
 8005a58:	d402      	bmi.n	8005a60 <__lo0bits+0x4e>
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	d006      	beq.n	8005a6c <__lo0bits+0x5a>
 8005a5e:	3001      	adds	r0, #1
 8005a60:	600b      	str	r3, [r1, #0]
 8005a62:	4770      	bx	lr
 8005a64:	4610      	mov	r0, r2
 8005a66:	e7e9      	b.n	8005a3c <__lo0bits+0x2a>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	4770      	bx	lr
 8005a6c:	2020      	movs	r0, #32
 8005a6e:	4770      	bx	lr

08005a70 <__i2b>:
 8005a70:	b510      	push	{r4, lr}
 8005a72:	460c      	mov	r4, r1
 8005a74:	2101      	movs	r1, #1
 8005a76:	f7ff ff27 	bl	80058c8 <_Balloc>
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	6144      	str	r4, [r0, #20]
 8005a7e:	6102      	str	r2, [r0, #16]
 8005a80:	bd10      	pop	{r4, pc}

08005a82 <__multiply>:
 8005a82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a86:	4614      	mov	r4, r2
 8005a88:	690a      	ldr	r2, [r1, #16]
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	bfb8      	it	lt
 8005a90:	460b      	movlt	r3, r1
 8005a92:	4689      	mov	r9, r1
 8005a94:	bfbc      	itt	lt
 8005a96:	46a1      	movlt	r9, r4
 8005a98:	461c      	movlt	r4, r3
 8005a9a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005a9e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005aa2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005aa6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005aaa:	eb07 060a 	add.w	r6, r7, sl
 8005aae:	429e      	cmp	r6, r3
 8005ab0:	bfc8      	it	gt
 8005ab2:	3101      	addgt	r1, #1
 8005ab4:	f7ff ff08 	bl	80058c8 <_Balloc>
 8005ab8:	f100 0514 	add.w	r5, r0, #20
 8005abc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ac0:	462b      	mov	r3, r5
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	4543      	cmp	r3, r8
 8005ac6:	d316      	bcc.n	8005af6 <__multiply+0x74>
 8005ac8:	f104 0214 	add.w	r2, r4, #20
 8005acc:	f109 0114 	add.w	r1, r9, #20
 8005ad0:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005ad4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005ad8:	9301      	str	r3, [sp, #4]
 8005ada:	9c01      	ldr	r4, [sp, #4]
 8005adc:	4294      	cmp	r4, r2
 8005ade:	4613      	mov	r3, r2
 8005ae0:	d80c      	bhi.n	8005afc <__multiply+0x7a>
 8005ae2:	2e00      	cmp	r6, #0
 8005ae4:	dd03      	ble.n	8005aee <__multiply+0x6c>
 8005ae6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d054      	beq.n	8005b98 <__multiply+0x116>
 8005aee:	6106      	str	r6, [r0, #16]
 8005af0:	b003      	add	sp, #12
 8005af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af6:	f843 2b04 	str.w	r2, [r3], #4
 8005afa:	e7e3      	b.n	8005ac4 <__multiply+0x42>
 8005afc:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b00:	3204      	adds	r2, #4
 8005b02:	f1ba 0f00 	cmp.w	sl, #0
 8005b06:	d020      	beq.n	8005b4a <__multiply+0xc8>
 8005b08:	46ae      	mov	lr, r5
 8005b0a:	4689      	mov	r9, r1
 8005b0c:	f04f 0c00 	mov.w	ip, #0
 8005b10:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b14:	f8be b000 	ldrh.w	fp, [lr]
 8005b18:	b2a3      	uxth	r3, r4
 8005b1a:	fb0a b303 	mla	r3, sl, r3, fp
 8005b1e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005b22:	f8de 4000 	ldr.w	r4, [lr]
 8005b26:	4463      	add	r3, ip
 8005b28:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005b2c:	fb0a c40b 	mla	r4, sl, fp, ip
 8005b30:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b3a:	454f      	cmp	r7, r9
 8005b3c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005b40:	f84e 3b04 	str.w	r3, [lr], #4
 8005b44:	d8e4      	bhi.n	8005b10 <__multiply+0x8e>
 8005b46:	f8ce c000 	str.w	ip, [lr]
 8005b4a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005b4e:	f1b9 0f00 	cmp.w	r9, #0
 8005b52:	d01f      	beq.n	8005b94 <__multiply+0x112>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	46ae      	mov	lr, r5
 8005b58:	468c      	mov	ip, r1
 8005b5a:	f04f 0a00 	mov.w	sl, #0
 8005b5e:	f8bc 4000 	ldrh.w	r4, [ip]
 8005b62:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005b66:	fb09 b404 	mla	r4, r9, r4, fp
 8005b6a:	44a2      	add	sl, r4
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005b72:	f84e 3b04 	str.w	r3, [lr], #4
 8005b76:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b7a:	f8be 4000 	ldrh.w	r4, [lr]
 8005b7e:	0c1b      	lsrs	r3, r3, #16
 8005b80:	fb09 4303 	mla	r3, r9, r3, r4
 8005b84:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005b88:	4567      	cmp	r7, ip
 8005b8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b8e:	d8e6      	bhi.n	8005b5e <__multiply+0xdc>
 8005b90:	f8ce 3000 	str.w	r3, [lr]
 8005b94:	3504      	adds	r5, #4
 8005b96:	e7a0      	b.n	8005ada <__multiply+0x58>
 8005b98:	3e01      	subs	r6, #1
 8005b9a:	e7a2      	b.n	8005ae2 <__multiply+0x60>

08005b9c <__pow5mult>:
 8005b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba0:	4615      	mov	r5, r2
 8005ba2:	f012 0203 	ands.w	r2, r2, #3
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	460f      	mov	r7, r1
 8005baa:	d007      	beq.n	8005bbc <__pow5mult+0x20>
 8005bac:	3a01      	subs	r2, #1
 8005bae:	4c21      	ldr	r4, [pc, #132]	; (8005c34 <__pow5mult+0x98>)
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bb6:	f7ff fed2 	bl	800595e <__multadd>
 8005bba:	4607      	mov	r7, r0
 8005bbc:	10ad      	asrs	r5, r5, #2
 8005bbe:	d035      	beq.n	8005c2c <__pow5mult+0x90>
 8005bc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bc2:	b93c      	cbnz	r4, 8005bd4 <__pow5mult+0x38>
 8005bc4:	2010      	movs	r0, #16
 8005bc6:	f7ff fe77 	bl	80058b8 <malloc>
 8005bca:	6270      	str	r0, [r6, #36]	; 0x24
 8005bcc:	6044      	str	r4, [r0, #4]
 8005bce:	6084      	str	r4, [r0, #8]
 8005bd0:	6004      	str	r4, [r0, #0]
 8005bd2:	60c4      	str	r4, [r0, #12]
 8005bd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005bd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bdc:	b94c      	cbnz	r4, 8005bf2 <__pow5mult+0x56>
 8005bde:	f240 2171 	movw	r1, #625	; 0x271
 8005be2:	4630      	mov	r0, r6
 8005be4:	f7ff ff44 	bl	8005a70 <__i2b>
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bee:	4604      	mov	r4, r0
 8005bf0:	6003      	str	r3, [r0, #0]
 8005bf2:	f04f 0800 	mov.w	r8, #0
 8005bf6:	07eb      	lsls	r3, r5, #31
 8005bf8:	d50a      	bpl.n	8005c10 <__pow5mult+0x74>
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	4622      	mov	r2, r4
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f7ff ff3f 	bl	8005a82 <__multiply>
 8005c04:	4639      	mov	r1, r7
 8005c06:	4681      	mov	r9, r0
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff fe91 	bl	8005930 <_Bfree>
 8005c0e:	464f      	mov	r7, r9
 8005c10:	106d      	asrs	r5, r5, #1
 8005c12:	d00b      	beq.n	8005c2c <__pow5mult+0x90>
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	b938      	cbnz	r0, 8005c28 <__pow5mult+0x8c>
 8005c18:	4622      	mov	r2, r4
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f7ff ff30 	bl	8005a82 <__multiply>
 8005c22:	6020      	str	r0, [r4, #0]
 8005c24:	f8c0 8000 	str.w	r8, [r0]
 8005c28:	4604      	mov	r4, r0
 8005c2a:	e7e4      	b.n	8005bf6 <__pow5mult+0x5a>
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c32:	bf00      	nop
 8005c34:	080062f8 	.word	0x080062f8

08005c38 <__lshift>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c42:	6923      	ldr	r3, [r4, #16]
 8005c44:	6849      	ldr	r1, [r1, #4]
 8005c46:	eb0a 0903 	add.w	r9, sl, r3
 8005c4a:	68a3      	ldr	r3, [r4, #8]
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	4616      	mov	r6, r2
 8005c50:	f109 0501 	add.w	r5, r9, #1
 8005c54:	42ab      	cmp	r3, r5
 8005c56:	db31      	blt.n	8005cbc <__lshift+0x84>
 8005c58:	4638      	mov	r0, r7
 8005c5a:	f7ff fe35 	bl	80058c8 <_Balloc>
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4680      	mov	r8, r0
 8005c62:	f100 0314 	add.w	r3, r0, #20
 8005c66:	4611      	mov	r1, r2
 8005c68:	4552      	cmp	r2, sl
 8005c6a:	db2a      	blt.n	8005cc2 <__lshift+0x8a>
 8005c6c:	6920      	ldr	r0, [r4, #16]
 8005c6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c72:	f104 0114 	add.w	r1, r4, #20
 8005c76:	f016 021f 	ands.w	r2, r6, #31
 8005c7a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005c7e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005c82:	d022      	beq.n	8005cca <__lshift+0x92>
 8005c84:	f1c2 0c20 	rsb	ip, r2, #32
 8005c88:	2000      	movs	r0, #0
 8005c8a:	680e      	ldr	r6, [r1, #0]
 8005c8c:	4096      	lsls	r6, r2
 8005c8e:	4330      	orrs	r0, r6
 8005c90:	f843 0b04 	str.w	r0, [r3], #4
 8005c94:	f851 0b04 	ldr.w	r0, [r1], #4
 8005c98:	458e      	cmp	lr, r1
 8005c9a:	fa20 f00c 	lsr.w	r0, r0, ip
 8005c9e:	d8f4      	bhi.n	8005c8a <__lshift+0x52>
 8005ca0:	6018      	str	r0, [r3, #0]
 8005ca2:	b108      	cbz	r0, 8005ca8 <__lshift+0x70>
 8005ca4:	f109 0502 	add.w	r5, r9, #2
 8005ca8:	3d01      	subs	r5, #1
 8005caa:	4638      	mov	r0, r7
 8005cac:	f8c8 5010 	str.w	r5, [r8, #16]
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	f7ff fe3d 	bl	8005930 <_Bfree>
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	3101      	adds	r1, #1
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	e7c8      	b.n	8005c54 <__lshift+0x1c>
 8005cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005cc6:	3201      	adds	r2, #1
 8005cc8:	e7ce      	b.n	8005c68 <__lshift+0x30>
 8005cca:	3b04      	subs	r3, #4
 8005ccc:	f851 2b04 	ldr.w	r2, [r1], #4
 8005cd0:	f843 2f04 	str.w	r2, [r3, #4]!
 8005cd4:	458e      	cmp	lr, r1
 8005cd6:	d8f9      	bhi.n	8005ccc <__lshift+0x94>
 8005cd8:	e7e6      	b.n	8005ca8 <__lshift+0x70>

08005cda <__mcmp>:
 8005cda:	6903      	ldr	r3, [r0, #16]
 8005cdc:	690a      	ldr	r2, [r1, #16]
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	b530      	push	{r4, r5, lr}
 8005ce2:	d10c      	bne.n	8005cfe <__mcmp+0x24>
 8005ce4:	0092      	lsls	r2, r2, #2
 8005ce6:	3014      	adds	r0, #20
 8005ce8:	3114      	adds	r1, #20
 8005cea:	1884      	adds	r4, r0, r2
 8005cec:	4411      	add	r1, r2
 8005cee:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005cf2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005cf6:	4295      	cmp	r5, r2
 8005cf8:	d003      	beq.n	8005d02 <__mcmp+0x28>
 8005cfa:	d305      	bcc.n	8005d08 <__mcmp+0x2e>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	4618      	mov	r0, r3
 8005d00:	bd30      	pop	{r4, r5, pc}
 8005d02:	42a0      	cmp	r0, r4
 8005d04:	d3f3      	bcc.n	8005cee <__mcmp+0x14>
 8005d06:	e7fa      	b.n	8005cfe <__mcmp+0x24>
 8005d08:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0c:	e7f7      	b.n	8005cfe <__mcmp+0x24>

08005d0e <__mdiff>:
 8005d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d12:	460d      	mov	r5, r1
 8005d14:	4607      	mov	r7, r0
 8005d16:	4611      	mov	r1, r2
 8005d18:	4628      	mov	r0, r5
 8005d1a:	4614      	mov	r4, r2
 8005d1c:	f7ff ffdd 	bl	8005cda <__mcmp>
 8005d20:	1e06      	subs	r6, r0, #0
 8005d22:	d108      	bne.n	8005d36 <__mdiff+0x28>
 8005d24:	4631      	mov	r1, r6
 8005d26:	4638      	mov	r0, r7
 8005d28:	f7ff fdce 	bl	80058c8 <_Balloc>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	6103      	str	r3, [r0, #16]
 8005d30:	6146      	str	r6, [r0, #20]
 8005d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d36:	bfa4      	itt	ge
 8005d38:	4623      	movge	r3, r4
 8005d3a:	462c      	movge	r4, r5
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	6861      	ldr	r1, [r4, #4]
 8005d40:	bfa6      	itte	ge
 8005d42:	461d      	movge	r5, r3
 8005d44:	2600      	movge	r6, #0
 8005d46:	2601      	movlt	r6, #1
 8005d48:	f7ff fdbe 	bl	80058c8 <_Balloc>
 8005d4c:	692b      	ldr	r3, [r5, #16]
 8005d4e:	60c6      	str	r6, [r0, #12]
 8005d50:	6926      	ldr	r6, [r4, #16]
 8005d52:	f105 0914 	add.w	r9, r5, #20
 8005d56:	f104 0214 	add.w	r2, r4, #20
 8005d5a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005d5e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005d62:	f100 0514 	add.w	r5, r0, #20
 8005d66:	f04f 0c00 	mov.w	ip, #0
 8005d6a:	f852 ab04 	ldr.w	sl, [r2], #4
 8005d6e:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d72:	fa1c f18a 	uxtah	r1, ip, sl
 8005d76:	b2a3      	uxth	r3, r4
 8005d78:	1ac9      	subs	r1, r1, r3
 8005d7a:	0c23      	lsrs	r3, r4, #16
 8005d7c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005d80:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005d84:	b289      	uxth	r1, r1
 8005d86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005d8a:	45c8      	cmp	r8, r9
 8005d8c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005d90:	4696      	mov	lr, r2
 8005d92:	f845 3b04 	str.w	r3, [r5], #4
 8005d96:	d8e8      	bhi.n	8005d6a <__mdiff+0x5c>
 8005d98:	45be      	cmp	lr, r7
 8005d9a:	d305      	bcc.n	8005da8 <__mdiff+0x9a>
 8005d9c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005da0:	b18b      	cbz	r3, 8005dc6 <__mdiff+0xb8>
 8005da2:	6106      	str	r6, [r0, #16]
 8005da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da8:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005dac:	fa1c f381 	uxtah	r3, ip, r1
 8005db0:	141a      	asrs	r2, r3, #16
 8005db2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005dc0:	f845 3b04 	str.w	r3, [r5], #4
 8005dc4:	e7e8      	b.n	8005d98 <__mdiff+0x8a>
 8005dc6:	3e01      	subs	r6, #1
 8005dc8:	e7e8      	b.n	8005d9c <__mdiff+0x8e>

08005dca <__d2b>:
 8005dca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dce:	460e      	mov	r6, r1
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	ec59 8b10 	vmov	r8, r9, d0
 8005dd6:	4615      	mov	r5, r2
 8005dd8:	f7ff fd76 	bl	80058c8 <_Balloc>
 8005ddc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005de0:	4607      	mov	r7, r0
 8005de2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005de6:	bb34      	cbnz	r4, 8005e36 <__d2b+0x6c>
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	f1b8 0f00 	cmp.w	r8, #0
 8005dee:	d027      	beq.n	8005e40 <__d2b+0x76>
 8005df0:	a802      	add	r0, sp, #8
 8005df2:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005df6:	f7ff fe0c 	bl	8005a12 <__lo0bits>
 8005dfa:	9900      	ldr	r1, [sp, #0]
 8005dfc:	b1f0      	cbz	r0, 8005e3c <__d2b+0x72>
 8005dfe:	9a01      	ldr	r2, [sp, #4]
 8005e00:	f1c0 0320 	rsb	r3, r0, #32
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	40c2      	lsrs	r2, r0
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	9201      	str	r2, [sp, #4]
 8005e10:	9b01      	ldr	r3, [sp, #4]
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bf14      	ite	ne
 8005e18:	2102      	movne	r1, #2
 8005e1a:	2101      	moveq	r1, #1
 8005e1c:	6139      	str	r1, [r7, #16]
 8005e1e:	b1c4      	cbz	r4, 8005e52 <__d2b+0x88>
 8005e20:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e24:	4404      	add	r4, r0
 8005e26:	6034      	str	r4, [r6, #0]
 8005e28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e2c:	6028      	str	r0, [r5, #0]
 8005e2e:	4638      	mov	r0, r7
 8005e30:	b003      	add	sp, #12
 8005e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e3a:	e7d5      	b.n	8005de8 <__d2b+0x1e>
 8005e3c:	6179      	str	r1, [r7, #20]
 8005e3e:	e7e7      	b.n	8005e10 <__d2b+0x46>
 8005e40:	a801      	add	r0, sp, #4
 8005e42:	f7ff fde6 	bl	8005a12 <__lo0bits>
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	6139      	str	r1, [r7, #16]
 8005e4e:	3020      	adds	r0, #32
 8005e50:	e7e5      	b.n	8005e1e <__d2b+0x54>
 8005e52:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005e56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e5a:	6030      	str	r0, [r6, #0]
 8005e5c:	6918      	ldr	r0, [r3, #16]
 8005e5e:	f7ff fdb9 	bl	80059d4 <__hi0bits>
 8005e62:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005e66:	e7e1      	b.n	8005e2c <__d2b+0x62>

08005e68 <_calloc_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	fb02 f401 	mul.w	r4, r2, r1
 8005e6e:	4621      	mov	r1, r4
 8005e70:	f000 f808 	bl	8005e84 <_malloc_r>
 8005e74:	4605      	mov	r5, r0
 8005e76:	b118      	cbz	r0, 8005e80 <_calloc_r+0x18>
 8005e78:	4622      	mov	r2, r4
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	f7fe fb1d 	bl	80044ba <memset>
 8005e80:	4628      	mov	r0, r5
 8005e82:	bd38      	pop	{r3, r4, r5, pc}

08005e84 <_malloc_r>:
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	1ccd      	adds	r5, r1, #3
 8005e88:	f025 0503 	bic.w	r5, r5, #3
 8005e8c:	3508      	adds	r5, #8
 8005e8e:	2d0c      	cmp	r5, #12
 8005e90:	bf38      	it	cc
 8005e92:	250c      	movcc	r5, #12
 8005e94:	2d00      	cmp	r5, #0
 8005e96:	4606      	mov	r6, r0
 8005e98:	db01      	blt.n	8005e9e <_malloc_r+0x1a>
 8005e9a:	42a9      	cmp	r1, r5
 8005e9c:	d903      	bls.n	8005ea6 <_malloc_r+0x22>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	6033      	str	r3, [r6, #0]
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	f000 f86d 	bl	8005f84 <__malloc_lock>
 8005eaa:	4a23      	ldr	r2, [pc, #140]	; (8005f38 <_malloc_r+0xb4>)
 8005eac:	6814      	ldr	r4, [r2, #0]
 8005eae:	4621      	mov	r1, r4
 8005eb0:	b991      	cbnz	r1, 8005ed8 <_malloc_r+0x54>
 8005eb2:	4c22      	ldr	r4, [pc, #136]	; (8005f3c <_malloc_r+0xb8>)
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	b91b      	cbnz	r3, 8005ec0 <_malloc_r+0x3c>
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f000 f841 	bl	8005f40 <_sbrk_r>
 8005ebe:	6020      	str	r0, [r4, #0]
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f000 f83c 	bl	8005f40 <_sbrk_r>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d126      	bne.n	8005f1a <_malloc_r+0x96>
 8005ecc:	230c      	movs	r3, #12
 8005ece:	6033      	str	r3, [r6, #0]
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 f858 	bl	8005f86 <__malloc_unlock>
 8005ed6:	e7e4      	b.n	8005ea2 <_malloc_r+0x1e>
 8005ed8:	680b      	ldr	r3, [r1, #0]
 8005eda:	1b5b      	subs	r3, r3, r5
 8005edc:	d41a      	bmi.n	8005f14 <_malloc_r+0x90>
 8005ede:	2b0b      	cmp	r3, #11
 8005ee0:	d90f      	bls.n	8005f02 <_malloc_r+0x7e>
 8005ee2:	600b      	str	r3, [r1, #0]
 8005ee4:	50cd      	str	r5, [r1, r3]
 8005ee6:	18cc      	adds	r4, r1, r3
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 f84c 	bl	8005f86 <__malloc_unlock>
 8005eee:	f104 000b 	add.w	r0, r4, #11
 8005ef2:	1d23      	adds	r3, r4, #4
 8005ef4:	f020 0007 	bic.w	r0, r0, #7
 8005ef8:	1ac3      	subs	r3, r0, r3
 8005efa:	d01b      	beq.n	8005f34 <_malloc_r+0xb0>
 8005efc:	425a      	negs	r2, r3
 8005efe:	50e2      	str	r2, [r4, r3]
 8005f00:	bd70      	pop	{r4, r5, r6, pc}
 8005f02:	428c      	cmp	r4, r1
 8005f04:	bf0d      	iteet	eq
 8005f06:	6863      	ldreq	r3, [r4, #4]
 8005f08:	684b      	ldrne	r3, [r1, #4]
 8005f0a:	6063      	strne	r3, [r4, #4]
 8005f0c:	6013      	streq	r3, [r2, #0]
 8005f0e:	bf18      	it	ne
 8005f10:	460c      	movne	r4, r1
 8005f12:	e7e9      	b.n	8005ee8 <_malloc_r+0x64>
 8005f14:	460c      	mov	r4, r1
 8005f16:	6849      	ldr	r1, [r1, #4]
 8005f18:	e7ca      	b.n	8005eb0 <_malloc_r+0x2c>
 8005f1a:	1cc4      	adds	r4, r0, #3
 8005f1c:	f024 0403 	bic.w	r4, r4, #3
 8005f20:	42a0      	cmp	r0, r4
 8005f22:	d005      	beq.n	8005f30 <_malloc_r+0xac>
 8005f24:	1a21      	subs	r1, r4, r0
 8005f26:	4630      	mov	r0, r6
 8005f28:	f000 f80a 	bl	8005f40 <_sbrk_r>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d0cd      	beq.n	8005ecc <_malloc_r+0x48>
 8005f30:	6025      	str	r5, [r4, #0]
 8005f32:	e7d9      	b.n	8005ee8 <_malloc_r+0x64>
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
 8005f36:	bf00      	nop
 8005f38:	20000234 	.word	0x20000234
 8005f3c:	20000238 	.word	0x20000238

08005f40 <_sbrk_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4c06      	ldr	r4, [pc, #24]	; (8005f5c <_sbrk_r+0x1c>)
 8005f44:	2300      	movs	r3, #0
 8005f46:	4605      	mov	r5, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	f000 f82a 	bl	8005fa4 <_sbrk>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_sbrk_r+0x1a>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_sbrk_r+0x1a>
 8005f58:	602b      	str	r3, [r5, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	200009fc 	.word	0x200009fc

08005f60 <__ascii_mbtowc>:
 8005f60:	b082      	sub	sp, #8
 8005f62:	b901      	cbnz	r1, 8005f66 <__ascii_mbtowc+0x6>
 8005f64:	a901      	add	r1, sp, #4
 8005f66:	b142      	cbz	r2, 8005f7a <__ascii_mbtowc+0x1a>
 8005f68:	b14b      	cbz	r3, 8005f7e <__ascii_mbtowc+0x1e>
 8005f6a:	7813      	ldrb	r3, [r2, #0]
 8005f6c:	600b      	str	r3, [r1, #0]
 8005f6e:	7812      	ldrb	r2, [r2, #0]
 8005f70:	1c10      	adds	r0, r2, #0
 8005f72:	bf18      	it	ne
 8005f74:	2001      	movne	r0, #1
 8005f76:	b002      	add	sp, #8
 8005f78:	4770      	bx	lr
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	e7fb      	b.n	8005f76 <__ascii_mbtowc+0x16>
 8005f7e:	f06f 0001 	mvn.w	r0, #1
 8005f82:	e7f8      	b.n	8005f76 <__ascii_mbtowc+0x16>

08005f84 <__malloc_lock>:
 8005f84:	4770      	bx	lr

08005f86 <__malloc_unlock>:
 8005f86:	4770      	bx	lr

08005f88 <__ascii_wctomb>:
 8005f88:	b149      	cbz	r1, 8005f9e <__ascii_wctomb+0x16>
 8005f8a:	2aff      	cmp	r2, #255	; 0xff
 8005f8c:	bf85      	ittet	hi
 8005f8e:	238a      	movhi	r3, #138	; 0x8a
 8005f90:	6003      	strhi	r3, [r0, #0]
 8005f92:	700a      	strbls	r2, [r1, #0]
 8005f94:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f98:	bf98      	it	ls
 8005f9a:	2001      	movls	r0, #1
 8005f9c:	4770      	bx	lr
 8005f9e:	4608      	mov	r0, r1
 8005fa0:	4770      	bx	lr
	...

08005fa4 <_sbrk>:
 8005fa4:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <_sbrk+0x14>)
 8005fa6:	6819      	ldr	r1, [r3, #0]
 8005fa8:	4602      	mov	r2, r0
 8005faa:	b909      	cbnz	r1, 8005fb0 <_sbrk+0xc>
 8005fac:	4903      	ldr	r1, [pc, #12]	; (8005fbc <_sbrk+0x18>)
 8005fae:	6019      	str	r1, [r3, #0]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	4402      	add	r2, r0
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	4770      	bx	lr
 8005fb8:	2000023c 	.word	0x2000023c
 8005fbc:	20000a00 	.word	0x20000a00

08005fc0 <_init>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr

08005fcc <_fini>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr
