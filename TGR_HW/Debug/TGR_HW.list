
TGR_HW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006744  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080068d8  080068d8  000168d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000268  20000000  08006c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007a8  20000268  08006ec8  00020268  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a10  08006ec8  00020a10  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025f97  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004a9a  00000000  00000000  0004622f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000134ac  00000000  00000000  0004acc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001848  00000000  00000000  0005e178  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c70  00000000  00000000  0005f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d1df  00000000  00000000  00061630  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008d6a  00000000  00000000  0006e80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00077579  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005270  00000000  00000000  000775f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068bc 	.word	0x080068bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	080068bc 	.word	0x080068bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <I2Cx_Init.constprop.8>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
  i2c_handler->Init.OwnAddress1      = 0;
 8000eb2:	482a      	ldr	r0, [pc, #168]	; (8000f5c <I2Cx_Init.constprop.8+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000eb4:	4c2a      	ldr	r4, [pc, #168]	; (8000f60 <I2Cx_Init.constprop.8+0xb0>)
  i2c_handler->Init.OwnAddress1      = 0;
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <I2Cx_Init.constprop.8+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000eb8:	4d2b      	ldr	r5, [pc, #172]	; (8000f68 <I2Cx_Init.constprop.8+0xb8>)
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000eba:	4f2c      	ldr	r7, [pc, #176]	; (8000f6c <I2Cx_Init.constprop.8+0xbc>)
  i2c_handler->Init.OwnAddress1      = 0;
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e884 0049 	stmia.w	r4, {r0, r3, r6}
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	60e2      	str	r2, [r4, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000ec6:	6126      	str	r6, [r4, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000ec8:	6166      	str	r6, [r4, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000eca:	61e6      	str	r6, [r4, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ecc:	6226      	str	r6, [r4, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ece:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000ed6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000ed8:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ee2:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000ee4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ee8:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000eea:	2312      	movs	r3, #18
 8000eec:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ef2:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ef4:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ef6:	4638      	mov	r0, r7
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ef8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000efa:	f000 fcb3 	bl	8001864 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000efe:	a903      	add	r1, sp, #12
 8000f00:	4638      	mov	r0, r7
 8000f02:	f000 fcaf 	bl	8001864 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000f06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f0c:	65ab      	str	r3, [r5, #88]	; 0x58
 8000f0e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8000f18:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000f1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f1e:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000f20:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000f22:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f26:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000f28:	4632      	mov	r2, r6
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	2021      	movs	r0, #33	; 0x21
 8000f2e:	f000 fba3 	bl	8001678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000f32:	2021      	movs	r0, #33	; 0x21
 8000f34:	f000 fbd4 	bl	80016e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000f38:	4632      	mov	r2, r6
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	2022      	movs	r0, #34	; 0x22
 8000f3e:	f000 fb9b 	bl	8001678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000f42:	2022      	movs	r0, #34	; 0x22
 8000f44:	f000 fbcc 	bl	80016e0 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f000 ff4a 	bl	8001de2 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000f4e:	4631      	mov	r1, r6
 8000f50:	4620      	mov	r0, r4
 8000f52:	f001 f925 	bl	80021a0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000f56:	b009      	add	sp, #36	; 0x24
 8000f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40005800 	.word	0x40005800
 8000f60:	20000348 	.word	0x20000348
 8000f64:	00702681 	.word	0x00702681
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000400 	.word	0x48000400

08000f70 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <BSP_LED_Toggle+0x10>)
 8000f72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000f7a:	f000 bdee 	b.w	8001b5a <HAL_GPIO_TogglePin>
 8000f7e:	bf00      	nop
 8000f80:	20000000 	.word	0x20000000

08000f84 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8000f84:	f7ff bf94 	b.w	8000eb0 <I2Cx_Init.constprop.8>

08000f88 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000f92:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	460a      	mov	r2, r1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	4601      	mov	r1, r0
 8000fa0:	9400      	str	r4, [sp, #0]
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <SENSOR_IO_Write+0x30>)
 8000fa4:	f000 ff87 	bl	8001eb6 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000fa8:	b120      	cbz	r0, 8000fb4 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <SENSOR_IO_Write+0x30>)
 8000fac:	f000 ff6a 	bl	8001e84 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000fb0:	f7ff ff7e 	bl	8000eb0 <I2Cx_Init.constprop.8>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8000fb4:	b006      	add	sp, #24
 8000fb6:	bd10      	pop	{r4, pc}
 8000fb8:	20000348 	.word	0x20000348

08000fbc <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 8000fbe:	aa06      	add	r2, sp, #24
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	4601      	mov	r1, r0
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <SENSOR_IO_Read+0x38>)
 8000fd8:	f001 f824 	bl	8002024 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000fdc:	b120      	cbz	r0, 8000fe8 <SENSOR_IO_Read+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <SENSOR_IO_Read+0x38>)
 8000fe0:	f000 ff50 	bl	8001e84 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000fe4:	f7ff ff64 	bl	8000eb0 <I2Cx_Init.constprop.8>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8000fe8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000fec:	b007      	add	sp, #28
 8000fee:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ff2:	bf00      	nop
 8000ff4:	20000348 	.word	0x20000348

08000ff8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000ffa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000ffe:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8001002:	460a      	mov	r2, r1
 8001004:	2301      	movs	r3, #1
 8001006:	4601      	mov	r1, r0
 8001008:	4806      	ldr	r0, [pc, #24]	; (8001024 <SENSOR_IO_ReadMultiple+0x2c>)
 800100a:	f001 f80b 	bl	8002024 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800100e:	4604      	mov	r4, r0
 8001010:	b120      	cbz	r0, 800101c <SENSOR_IO_ReadMultiple+0x24>
  HAL_I2C_DeInit(i2c_handler);
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <SENSOR_IO_ReadMultiple+0x2c>)
 8001014:	f000 ff36 	bl	8001e84 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001018:	f7ff ff4a 	bl	8000eb0 <I2Cx_Init.constprop.8>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 800101c:	4620      	mov	r0, r4
 800101e:	b004      	add	sp, #16
 8001020:	bd10      	pop	{r4, pc}
 8001022:	bf00      	nop
 8001024:	20000348 	.word	0x20000348

08001028 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001028:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800102a:	4c07      	ldr	r4, [pc, #28]	; (8001048 <BSP_ACCELERO_Init+0x20>)
 800102c:	68a3      	ldr	r3, [r4, #8]
 800102e:	4798      	blx	r3
 8001030:	286a      	cmp	r0, #106	; 0x6a
 8001032:	d107      	bne.n	8001044 <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001036:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 800103a:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001040:	2000      	movs	r0, #0
 8001042:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 8001044:	2001      	movs	r0, #1
  }  

  return ret;
}
 8001046:	bd10      	pop	{r4, pc}
 8001048:	2000002c 	.word	0x2000002c
 800104c:	20000284 	.word	0x20000284

08001050 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001050:	b510      	push	{r4, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001052:	4c07      	ldr	r4, [pc, #28]	; (8001070 <BSP_GYRO_Init+0x20>)
 8001054:	68a3      	ldr	r3, [r4, #8]
 8001056:	4798      	blx	r3
 8001058:	286a      	cmp	r0, #106	; 0x6a
 800105a:	d107      	bne.n	800106c <BSP_GYRO_Init+0x1c>
    ret = GYRO_ERROR;
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <BSP_GYRO_Init+0x24>)

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800105e:	f244 403c 	movw	r0, #17468	; 0x443c
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001062:	601c      	str	r4, [r3, #0]
    GyroscopeDrv->Init(ctrl);
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001068:	2000      	movs	r0, #0
 800106a:	bd10      	pop	{r4, pc}
    ret = GYRO_ERROR;
 800106c:	2001      	movs	r0, #1
  }
  
  return ret;
}
 800106e:	bd10      	pop	{r4, pc}
 8001070:	20000060 	.word	0x20000060
 8001074:	20000288 	.word	0x20000288

08001078 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001078:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800107a:	4c07      	ldr	r4, [pc, #28]	; (8001098 <BSP_HSENSOR_Init+0x20>)
 800107c:	20be      	movs	r0, #190	; 0xbe
 800107e:	6863      	ldr	r3, [r4, #4]
 8001080:	4798      	blx	r3
 8001082:	28bc      	cmp	r0, #188	; 0xbc
 8001084:	d106      	bne.n	8001094 <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001088:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 800108a:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001090:	2000      	movs	r0, #0
 8001092:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 8001094:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8001096:	bd10      	pop	{r4, pc}
 8001098:	20000004 	.word	0x20000004
 800109c:	2000028c 	.word	0x2000028c

080010a0 <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <BSP_HSENSOR_ReadHumidity+0xc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	20be      	movs	r0, #190	; 0xbe
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4718      	bx	r3
 80010aa:	bf00      	nop
 80010ac:	2000028c 	.word	0x2000028c

080010b0 <BSP_MAGNETO_DeInit>:
  * @brief  DeInitialize the MAGNETO.
  */
void BSP_MAGNETO_DeInit(void)
{
  /* DeInitialize the  magnetometer IO interfaces */
  if(MagnetoDrv != NULL)
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <BSP_MAGNETO_DeInit+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	b113      	cbz	r3, 80010bc <BSP_MAGNETO_DeInit+0xc>
  {
    if(MagnetoDrv->DeInit != NULL)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	b103      	cbz	r3, 80010bc <BSP_MAGNETO_DeInit+0xc>
    {
      MagnetoDrv->DeInit();
 80010ba:	4718      	bx	r3
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000290 	.word	0x20000290

080010c4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80010c4:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80010c6:	4c07      	ldr	r4, [pc, #28]	; (80010e4 <BSP_PSENSOR_Init+0x20>)
 80010c8:	20ba      	movs	r0, #186	; 0xba
 80010ca:	6863      	ldr	r3, [r4, #4]
 80010cc:	4798      	blx	r3
 80010ce:	28b1      	cmp	r0, #177	; 0xb1
 80010d0:	d106      	bne.n	80010e0 <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80010d4:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 80010d6:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	4798      	blx	r3
    ret = PSENSOR_OK;
 80010dc:	2000      	movs	r0, #0
 80010de:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 80010e0:	2001      	movs	r0, #1
  }
  
  return ret;
}
 80010e2:	bd10      	pop	{r4, pc}
 80010e4:	20000020 	.word	0x20000020
 80010e8:	20000294 	.word	0x20000294

080010ec <BSP_PSENSOR_ReadPressure>:
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <BSP_PSENSOR_ReadPressure+0xc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	20ba      	movs	r0, #186	; 0xba
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	4718      	bx	r3
 80010f6:	bf00      	nop
 80010f8:	20000294 	.word	0x20000294

080010fc <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80010fc:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80010fe:	4c06      	ldr	r4, [pc, #24]	; (8001118 <BSP_TSENSOR_Init+0x1c>)
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <BSP_TSENSOR_Init+0x20>)
 8001102:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001104:	f7ff ff3e 	bl	8000f84 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	2100      	movs	r1, #0
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	20be      	movs	r0, #190	; 0xbe
 8001110:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8001112:	2000      	movs	r0, #0
 8001114:	bd10      	pop	{r4, pc}
 8001116:	bf00      	nop
 8001118:	20000298 	.word	0x20000298
 800111c:	20000010 	.word	0x20000010

08001120 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001120:	4b02      	ldr	r3, [pc, #8]	; (800112c <BSP_TSENSOR_ReadTemp+0xc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	20be      	movs	r0, #190	; 0xbe
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4718      	bx	r3
 800112a:	bf00      	nop
 800112c:	20000298 	.word	0x20000298

08001130 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001130:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001132:	b2c4      	uxtb	r4, r0
 8001134:	2120      	movs	r1, #32
 8001136:	4620      	mov	r0, r4
 8001138:	f7ff ff40 	bl	8000fbc <SENSOR_IO_Read>
 800113c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001140:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8001144:	4620      	mov	r0, r4
 8001146:	2120      	movs	r1, #32
}
 8001148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800114c:	f7ff bf1c 	b.w	8000f88 <SENSOR_IO_Write>

08001150 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001150:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001152:	b2c4      	uxtb	r4, r0
 8001154:	2120      	movs	r1, #32
 8001156:	4620      	mov	r0, r4
 8001158:	f7ff ff30 	bl	8000fbc <SENSOR_IO_Read>
 800115c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001160:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8001164:	4620      	mov	r0, r4
 8001166:	2120      	movs	r1, #32
}
 8001168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800116c:	f7ff bf0c 	b.w	8000f88 <SENSOR_IO_Write>

08001170 <HTS221_H_ReadID>:
{  
 8001170:	b510      	push	{r4, lr}
 8001172:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8001174:	f7ff ff06 	bl	8000f84 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001178:	b2e0      	uxtb	r0, r4
 800117a:	210f      	movs	r1, #15
}
 800117c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001180:	f7ff bf1c 	b.w	8000fbc <SENSOR_IO_Read>

08001184 <HTS221_H_ReadHumidity>:
{
 8001184:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001188:	fa5f f880 	uxtb.w	r8, r0
 800118c:	2302      	movs	r3, #2
 800118e:	aa01      	add	r2, sp, #4
 8001190:	21b0      	movs	r1, #176	; 0xb0
 8001192:	4640      	mov	r0, r8
 8001194:	f7ff ff30 	bl	8000ff8 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001198:	2302      	movs	r3, #2
 800119a:	aa01      	add	r2, sp, #4
 800119c:	21b6      	movs	r1, #182	; 0xb6
 800119e:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 80011a0:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 80011a4:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80011a8:	f7ff ff26 	bl	8000ff8 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80011ac:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80011b0:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80011b4:	2302      	movs	r3, #2
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80011b6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80011ba:	aa01      	add	r2, sp, #4
 80011bc:	21ba      	movs	r1, #186	; 0xba
 80011be:	4640      	mov	r0, r8
 80011c0:	f7ff ff1a 	bl	8000ff8 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80011c4:	b227      	sxth	r7, r4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80011c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80011ca:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80011ce:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80011d0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80011d4:	21a8      	movs	r1, #168	; 0xa8
 80011d6:	2302      	movs	r3, #2
 80011d8:	4640      	mov	r0, r8
 80011da:	f7ff ff0d 	bl	8000ff8 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80011de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80011e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	1bdb      	subs	r3, r3, r7
 80011ee:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 80011f2:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 80011f4:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80011f6:	1bab      	subs	r3, r5, r6
 80011f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fc:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001200:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001206:	1be4      	subs	r4, r4, r7
 8001208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120c:	ee07 4a10 	vmov	s14, r4
 8001210:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001214:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8001218:	ee07 6a90 	vmov	s15, r6
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 8001220:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800125c <HTS221_H_ReadHumidity+0xd8>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001224:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8001228:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800122c:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8001230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	dc0d      	bgt.n	8001256 <HTS221_H_ReadHumidity+0xd2>
        : tmp_f;
 800123a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800123e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001260 <HTS221_H_ReadHumidity+0xdc>
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	bf48      	it	mi
 8001248:	eef0 7a47 	vmovmi.f32	s15, s14
}
 800124c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001250:	b002      	add	sp, #8
 8001252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        : ( tmp_f <    0.0f ) ?    0.0f
 8001256:	eef0 7a47 	vmov.f32	s15, s14
 800125a:	e7f7      	b.n	800124c <HTS221_H_ReadHumidity+0xc8>
 800125c:	447a0000 	.word	0x447a0000
 8001260:	00000000 	.word	0x00000000

08001264 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001264:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001268:	fa5f f880 	uxtb.w	r8, r0
 800126c:	aa01      	add	r2, sp, #4
 800126e:	2302      	movs	r3, #2
 8001270:	21b2      	movs	r1, #178	; 0xb2
 8001272:	4640      	mov	r0, r8
 8001274:	f7ff fec0 	bl	8000ff8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001278:	2135      	movs	r1, #53	; 0x35
 800127a:	4640      	mov	r0, r8
 800127c:	f7ff fe9e 	bl	8000fbc <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001280:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001282:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001286:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800128a:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800128c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001290:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8001294:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8001296:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001298:	2304      	movs	r3, #4
 800129a:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 800129e:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80012a0:	21bc      	movs	r1, #188	; 0xbc
 80012a2:	4640      	mov	r0, r8
 80012a4:	f7ff fea8 	bl	8000ff8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80012a8:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80012ac:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80012b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80012b4:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80012b8:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80012bc:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80012be:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80012c2:	21aa      	movs	r1, #170	; 0xaa
 80012c4:	2302      	movs	r3, #2
 80012c6:	4640      	mov	r0, r8
 80012c8:	f7ff fe96 	bl	8000ff8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80012cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80012d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80012d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80012d8:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80012da:	b21b      	sxth	r3, r3
 80012dc:	1bdb      	subs	r3, r3, r7
  T0_degC = T0_degC_x8_u16 >> 3;
 80012de:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80012e0:	ee07 3a90 	vmov	s15, r3
 80012e4:	1bab      	subs	r3, r5, r6
 80012e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ea:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80012ee:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f4:	1be4      	subs	r4, r4, r7
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	ee07 4a10 	vmov	s14, r4
 80012fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001302:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001306:	ee07 6a90 	vmov	s15, r6
 800130a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 800130e:	ee36 0a80 	vadd.f32	s0, s13, s0
 8001312:	b002      	add	sp, #8
 8001314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001318 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001318:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800131a:	2400      	movs	r4, #0
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800131c:	b2c6      	uxtb	r6, r0
 800131e:	ad01      	add	r5, sp, #4
 8001320:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001324:	b2c9      	uxtb	r1, r1
 8001326:	4630      	mov	r0, r6
 8001328:	f7ff fe48 	bl	8000fbc <SENSOR_IO_Read>
 800132c:	5528      	strb	r0, [r5, r4]
 800132e:	3401      	adds	r4, #1
  for(i = 0; i < 3; i++)
 8001330:	2c03      	cmp	r4, #3
 8001332:	d1f5      	bne.n	8001320 <LPS22HB_P_ReadPressure+0x8>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001334:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001338:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001342:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001346:	4313      	orrs	r3, r2

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001348:	021a      	lsls	r2, r3, #8
    tmp |= 0xFF000000;
 800134a:	bf48      	it	mi
 800134c:	f043 437f 	orrmi.w	r3, r3, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 8001350:	2264      	movs	r2, #100	; 0x64
 8001352:	4353      	muls	r3, r2
 8001354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001358:	fb93 f3f2 	sdiv	r3, r3, r2

  return (float)((float)raw_press / 100.0f);
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8001364:	eddf 7a02 	vldr	s15, [pc, #8]	; 8001370 <LPS22HB_P_ReadPressure+0x58>
 8001368:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800136c:	b002      	add	sp, #8
 800136e:	bd70      	pop	{r4, r5, r6, pc}
 8001370:	42c80000 	.word	0x42c80000

08001374 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001374:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001376:	b2c4      	uxtb	r4, r0
 8001378:	211a      	movs	r1, #26
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff fe1e 	bl	8000fbc <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 8001380:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001384:	f042 0201 	orr.w	r2, r2, #1
 8001388:	4620      	mov	r0, r4
 800138a:	211a      	movs	r1, #26
 800138c:	f7ff fdfc 	bl	8000f88 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001390:	2110      	movs	r1, #16
 8001392:	4620      	mov	r0, r4
 8001394:	f7ff fe12 	bl	8000fbc <SENSOR_IO_Read>
 8001398:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800139c:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80013a0:	4620      	mov	r0, r4
 80013a2:	2110      	movs	r1, #16
}  
 80013a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80013a8:	f7ff bdee 	b.w	8000f88 <SENSOR_IO_Write>

080013ac <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 80013ac:	f7ff bfe2 	b.w	8001374 <LPS22HB_Init>

080013b0 <LPS22HB_P_ReadID>:
{  
 80013b0:	b510      	push	{r4, lr}
 80013b2:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 80013b4:	f7ff fde6 	bl	8000f84 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80013b8:	b2e0      	uxtb	r0, r4
 80013ba:	210f      	movs	r1, #15
}
 80013bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80013c0:	f7ff bdfc 	b.w	8000fbc <SENSOR_IO_Read>

080013c4 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80013c4:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80013c6:	2110      	movs	r1, #16
{  
 80013c8:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80013ca:	20d4      	movs	r0, #212	; 0xd4
 80013cc:	f7ff fdf6 	bl	8000fbc <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 80013d0:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 80013d4:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	2110      	movs	r1, #16
 80013da:	20d4      	movs	r0, #212	; 0xd4
 80013dc:	f7ff fdd4 	bl	8000f88 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80013e0:	2112      	movs	r1, #18
 80013e2:	20d4      	movs	r0, #212	; 0xd4
 80013e4:	f7ff fdea 	bl	8000fbc <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 80013e8:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80013ec:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 80013f0:	2112      	movs	r1, #18
 80013f2:	20d4      	movs	r0, #212	; 0xd4
}
 80013f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80013f8:	f7ff bdc6 	b.w	8000f88 <SENSOR_IO_Write>

080013fc <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80013fc:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80013fe:	2110      	movs	r1, #16
 8001400:	20d4      	movs	r0, #212	; 0xd4
 8001402:	f7ff fddb 	bl	8000fbc <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001406:	2110      	movs	r1, #16
 8001408:	f000 020f 	and.w	r2, r0, #15
}
 800140c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001410:	20d4      	movs	r0, #212	; 0xd4
 8001412:	f7ff bdb9 	b.w	8000f88 <SENSOR_IO_Write>

08001416 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001416:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001418:	2115      	movs	r1, #21
{
 800141a:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800141c:	20d4      	movs	r0, #212	; 0xd4
 800141e:	f7ff fdcd 	bl	8000fbc <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001422:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 8001426:	b10c      	cbz	r4, 800142c <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001428:	f042 0210 	orr.w	r2, r2, #16
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800142c:	2115      	movs	r1, #21
 800142e:	20d4      	movs	r0, #212	; 0xd4
}
 8001430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001434:	f7ff bda8 	b.w	8000f88 <SENSOR_IO_Write>

08001438 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001438:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800143a:	2111      	movs	r1, #17
{  
 800143c:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800143e:	20d4      	movs	r0, #212	; 0xd4
 8001440:	f7ff fdbc 	bl	8000fbc <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8001444:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8001448:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	2111      	movs	r1, #17
 800144e:	20d4      	movs	r0, #212	; 0xd4
 8001450:	f7ff fd9a 	bl	8000f88 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001454:	2112      	movs	r1, #18
 8001456:	20d4      	movs	r0, #212	; 0xd4
 8001458:	f7ff fdb0 	bl	8000fbc <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 800145c:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001460:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8001464:	2112      	movs	r1, #18
 8001466:	20d4      	movs	r0, #212	; 0xd4
}
 8001468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800146c:	f7ff bd8c 	b.w	8000f88 <SENSOR_IO_Write>

08001470 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001470:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001472:	2111      	movs	r1, #17
 8001474:	20d4      	movs	r0, #212	; 0xd4
 8001476:	f7ff fda1 	bl	8000fbc <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800147a:	2111      	movs	r1, #17
 800147c:	f000 020f 	and.w	r2, r0, #15
}
 8001480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001484:	20d4      	movs	r0, #212	; 0xd4
 8001486:	f7ff bd7f 	b.w	8000f88 <SENSOR_IO_Write>

0800148a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800148a:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800148c:	2116      	movs	r1, #22
{  
 800148e:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001490:	20d4      	movs	r0, #212	; 0xd4
 8001492:	f7ff fd93 	bl	8000fbc <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001496:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 800149a:	b10c      	cbz	r4, 80014a0 <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800149c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80014a0:	2116      	movs	r1, #22
 80014a2:	20d4      	movs	r0, #212	; 0xd4
}
 80014a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80014a8:	f7ff bd6e 	b.w	8000f88 <SENSOR_IO_Write>

080014ac <LSM6DSL_GyroReadID>:
{
 80014ac:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 80014ae:	f7ff fd69 	bl	8000f84 <SENSOR_IO_Init>
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80014b2:	210f      	movs	r1, #15
 80014b4:	20d4      	movs	r0, #212	; 0xd4
}
 80014b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80014ba:	f7ff bd7f 	b.w	8000fbc <SENSOR_IO_Read>

080014be <LSM6DSL_AccReadID>:
 80014be:	f7ff bff5 	b.w	80014ac <LSM6DSL_GyroReadID>
	...

080014c4 <LSM6DSL_AccReadXYZ>:
{
 80014c4:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80014c6:	2110      	movs	r1, #16
{
 80014c8:	b085      	sub	sp, #20
 80014ca:	4605      	mov	r5, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80014cc:	20d4      	movs	r0, #212	; 0xd4
 80014ce:	f7ff fd75 	bl	8000fbc <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80014d2:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80014d4:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80014d6:	aa02      	add	r2, sp, #8
 80014d8:	2128      	movs	r1, #40	; 0x28
 80014da:	20d4      	movs	r0, #212	; 0xd4
 80014dc:	f7ff fd8c 	bl	8000ff8 <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80014e0:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80014e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80014e8:	4817      	ldr	r0, [pc, #92]	; (8001548 <LSM6DSL_AccReadXYZ+0x84>)
 80014ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80014ee:	f8ad 3000 	strh.w	r3, [sp]
 80014f2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80014f6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80014fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80014fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001502:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001506:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800150a:	f004 040c 	and.w	r4, r4, #12
 800150e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8001512:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001516:	ed90 7a00 	vldr	s14, [r0]
 800151a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800151e:	2200      	movs	r2, #0
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001520:	f93d 3012 	ldrsh.w	r3, [sp, r2, lsl #1]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001534:	ee17 3a90 	vmov	r3, s15
 8001538:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 800153c:	3201      	adds	r2, #1
  for(i=0; i<3; i++)
 800153e:	2a03      	cmp	r2, #3
 8001540:	d1ee      	bne.n	8001520 <LSM6DSL_AccReadXYZ+0x5c>
}
 8001542:	b005      	add	sp, #20
 8001544:	bd30      	pop	{r4, r5, pc}
 8001546:	bf00      	nop
 8001548:	080068d8 	.word	0x080068d8

0800154c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800154c:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800154e:	2111      	movs	r1, #17
{
 8001550:	b085      	sub	sp, #20
 8001552:	4604      	mov	r4, r0
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001554:	20d4      	movs	r0, #212	; 0xd4
 8001556:	f7ff fd31 	bl	8000fbc <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800155a:	2306      	movs	r3, #6
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800155c:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800155e:	aa02      	add	r2, sp, #8
 8001560:	2122      	movs	r1, #34	; 0x22
 8001562:	20d4      	movs	r0, #212	; 0xd4
 8001564:	f7ff fd48 	bl	8000ff8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001568:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800156c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001570:	4815      	ldr	r0, [pc, #84]	; (80015c8 <LSM6DSL_GyroReadXYZAngRate+0x7c>)
 8001572:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001576:	f8ad 3000 	strh.w	r3, [sp]
 800157a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800157e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001582:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001586:	f8ad 3002 	strh.w	r3, [sp, #2]
 800158a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800158e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001592:	f005 050c 	and.w	r5, r5, #12
 8001596:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800159a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800159e:	f8ad 3004 	strh.w	r3, [sp, #4]
 80015a2:	ed90 7a00 	vldr	s14, [r0]
 80015a6:	2300      	movs	r3, #0
 80015a8:	4620      	mov	r0, r4
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80015aa:	f93d 2013 	ldrsh.w	r2, [sp, r3, lsl #1]
 80015ae:	ee07 2a90 	vmov	s15, r2
 80015b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b6:	3301      	adds	r3, #1
 80015b8:	ee67 7a87 	vmul.f32	s15, s15, s14
  for(i=0; i<3; i++)
 80015bc:	2b03      	cmp	r3, #3
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80015be:	ece0 7a01 	vstmia	r0!, {s15}
  for(i=0; i<3; i++)
 80015c2:	d1f2      	bne.n	80015aa <LSM6DSL_GyroReadXYZAngRate+0x5e>
  }
}
 80015c4:	b005      	add	sp, #20
 80015c6:	bd30      	pop	{r4, r5, pc}
 80015c8:	0800690c 	.word	0x0800690c

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_InitTick+0x2c>)
{
 80015d0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80015dc:	f000 f88c 	bl	80016f8 <HAL_SYSTICK_Config>
 80015e0:	4604      	mov	r4, r0
 80015e2:	b938      	cbnz	r0, 80015f4 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80015e4:	4602      	mov	r2, r0
 80015e6:	4629      	mov	r1, r5
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 f844 	bl	8001678 <HAL_NVIC_SetPriority>
 80015f0:	4620      	mov	r0, r4
 80015f2:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80015f4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80015f6:	bd38      	pop	{r3, r4, r5, pc}
 80015f8:	20000094 	.word	0x20000094

080015fc <HAL_Init>:
{
 80015fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fe:	2003      	movs	r0, #3
 8001600:	f000 f828 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff ffe1 	bl	80015cc <HAL_InitTick>
 800160a:	4604      	mov	r4, r0
 800160c:	b918      	cbnz	r0, 8001616 <HAL_Init+0x1a>
    HAL_MspInit();
 800160e:	f002 fe7f 	bl	8004310 <HAL_MspInit>
}
 8001612:	4620      	mov	r0, r4
 8001614:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001616:	2401      	movs	r4, #1
 8001618:	e7fb      	b.n	8001612 <HAL_Init+0x16>
	...

0800161c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800161c:	4a02      	ldr	r2, [pc, #8]	; (8001628 <HAL_IncTick+0xc>)
 800161e:	6813      	ldr	r3, [r2, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000394 	.word	0x20000394

0800162c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800162c:	4b01      	ldr	r3, [pc, #4]	; (8001634 <HAL_GetTick+0x8>)
 800162e:	6818      	ldr	r0, [r3, #0]
}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000394 	.word	0x20000394

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b538      	push	{r3, r4, r5, lr}
 800163a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff fff6 	bl	800162c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001640:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001642:	4605      	mov	r5, r0
  {
    wait++;
 8001644:	bf18      	it	ne
 8001646:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001648:	f7ff fff0 	bl	800162c <HAL_GetTick>
 800164c:	1b40      	subs	r0, r0, r5
 800164e:	4284      	cmp	r4, r0
 8001650:	d8fa      	bhi.n	8001648 <HAL_Delay+0x10>
  {
  }
}
 8001652:	bd38      	pop	{r3, r4, r5, pc}

08001654 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001656:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001658:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	0c1b      	lsrs	r3, r3, #16
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001664:	0200      	lsls	r0, r0, #8
 8001666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800166e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001670:	60d3      	str	r3, [r2, #12]
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167a:	b530      	push	{r4, r5, lr}
 800167c:	68dc      	ldr	r4, [r3, #12]
 800167e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001682:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	2b04      	cmp	r3, #4
 800168a:	bf28      	it	cs
 800168c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 0501 	mov.w	r5, #1
 8001694:	fa05 f303 	lsl.w	r3, r5, r3
 8001698:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169c:	bf8c      	ite	hi
 800169e:	3c03      	subhi	r4, #3
 80016a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a2:	4019      	ands	r1, r3
 80016a4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a6:	fa05 f404 	lsl.w	r4, r5, r4
 80016aa:	3c01      	subs	r4, #1
 80016ac:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80016ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	ea42 0201 	orr.w	r2, r2, r1
 80016b4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	bfaf      	iteee	ge
 80016ba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	f000 000f 	andlt.w	r0, r0, #15
 80016c2:	4b06      	ldrlt	r3, [pc, #24]	; (80016dc <HAL_NVIC_SetPriority+0x64>)
 80016c4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	bfa5      	ittet	ge
 80016c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80016cc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80016d4:	bd30      	pop	{r4, r5, pc}
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00
 80016dc:	e000ed14 	.word	0xe000ed14

080016e0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016e0:	0942      	lsrs	r2, r0, #5
 80016e2:	2301      	movs	r3, #1
 80016e4:	f000 001f 	and.w	r0, r0, #31
 80016e8:	fa03 f000 	lsl.w	r0, r3, r0
 80016ec:	4b01      	ldr	r3, [pc, #4]	; (80016f4 <HAL_NVIC_EnableIRQ+0x14>)
 80016ee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	3801      	subs	r0, #1
 80016fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80016fe:	d20a      	bcs.n	8001716 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001704:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	21f0      	movs	r1, #240	; 0xf0
 8001708:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <DFSDM_GetChannelFromInstance+0x54>)
 8001726:	4298      	cmp	r0, r3
 8001728:	d017      	beq.n	800175a <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 800172a:	3320      	adds	r3, #32
 800172c:	4298      	cmp	r0, r3
 800172e:	d016      	beq.n	800175e <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 8001730:	3320      	adds	r3, #32
 8001732:	4298      	cmp	r0, r3
 8001734:	d015      	beq.n	8001762 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 8001736:	3320      	adds	r3, #32
 8001738:	4298      	cmp	r0, r3
 800173a:	d014      	beq.n	8001766 <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800173c:	3320      	adds	r3, #32
 800173e:	4298      	cmp	r0, r3
 8001740:	d013      	beq.n	800176a <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 8001742:	3320      	adds	r3, #32
 8001744:	4298      	cmp	r0, r3
 8001746:	d012      	beq.n	800176e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 8001748:	3320      	adds	r3, #32
 800174a:	4298      	cmp	r0, r3
 800174c:	d011      	beq.n	8001772 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
  {
    channel = 7;
 800174e:	3320      	adds	r3, #32
 8001750:	4298      	cmp	r0, r3
 8001752:	bf0c      	ite	eq
 8001754:	2007      	moveq	r0, #7
 8001756:	2000      	movne	r0, #0
 8001758:	4770      	bx	lr
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 800175a:	2000      	movs	r0, #0
 800175c:	4770      	bx	lr
    channel = 1;
 800175e:	2001      	movs	r0, #1
 8001760:	4770      	bx	lr
    channel = 2;
 8001762:	2002      	movs	r0, #2
 8001764:	4770      	bx	lr
    channel = 3;
 8001766:	2003      	movs	r0, #3
 8001768:	4770      	bx	lr
    channel = 4;
 800176a:	2004      	movs	r0, #4
 800176c:	4770      	bx	lr
    channel = 5;
 800176e:	2005      	movs	r0, #5
 8001770:	4770      	bx	lr
    channel = 6;
 8001772:	2006      	movs	r0, #6
  }

  return channel;
}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40016000 	.word	0x40016000

0800177c <HAL_DFSDM_ChannelInit>:
{
 800177c:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 800177e:	4604      	mov	r4, r0
 8001780:	2800      	cmp	r0, #0
 8001782:	d067      	beq.n	8001854 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001784:	6800      	ldr	r0, [r0, #0]
 8001786:	4d34      	ldr	r5, [pc, #208]	; (8001858 <HAL_DFSDM_ChannelInit+0xdc>)
 8001788:	f7ff ffcc 	bl	8001724 <DFSDM_GetChannelFromInstance>
 800178c:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d15f      	bne.n	8001854 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001794:	4620      	mov	r0, r4
 8001796:	f002 fdd3 	bl	8004340 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_DFSDM_ChannelInit+0xe0>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	3201      	adds	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d119      	bne.n	80017dc <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_DFSDM_ChannelInit+0xe4>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80017b0:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68a1      	ldr	r1, [r4, #8]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80017c0:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80017c2:	7922      	ldrb	r2, [r4, #4]
 80017c4:	2a01      	cmp	r2, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80017c8:	68e1      	ldr	r1, [r4, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	3901      	subs	r1, #1
 80017ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80017d2:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017da:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80017dc:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017de:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80017e0:	6803      	ldr	r3, [r0, #0]
 80017e2:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 80017e6:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017e8:	6923      	ldr	r3, [r4, #16]
 80017ea:	6802      	ldr	r2, [r0, #0]
 80017ec:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017ee:	69a1      	ldr	r1, [r4, #24]
 80017f0:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017f2:	4313      	orrs	r3, r2
 80017f4:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017f6:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017f8:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017fa:	f023 030f 	bic.w	r3, r3, #15
 80017fe:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001800:	69e3      	ldr	r3, [r4, #28]
 8001802:	6802      	ldr	r2, [r0, #0]
 8001804:	430b      	orrs	r3, r1
 8001806:	4313      	orrs	r3, r2
 8001808:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800180a:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800180c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800180e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001810:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8001814:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001816:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001818:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800181a:	430b      	orrs	r3, r1
 800181c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001820:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001822:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001824:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800182c:	6843      	ldr	r3, [r0, #4]
 800182e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001832:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001834:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001838:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800183a:	6803      	ldr	r3, [r0, #0]
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001842:	2301      	movs	r3, #1
 8001844:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001848:	f7ff ff6c 	bl	8001724 <DFSDM_GetChannelFromInstance>
 800184c:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8001850:	2000      	movs	r0, #0
 8001852:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001854:	2001      	movs	r0, #1
}
 8001856:	bd38      	pop	{r3, r4, r5, pc}
 8001858:	2000029c 	.word	0x2000029c
 800185c:	200002bc 	.word	0x200002bc
 8001860:	40016000 	.word	0x40016000

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001868:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001a18 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001870:	4c67      	ldr	r4, [pc, #412]	; (8001a10 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001872:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001874:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	9a01      	ldr	r2, [sp, #4]
 8001878:	40da      	lsrs	r2, r3
 800187a:	d102      	bne.n	8001882 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 800187c:	b005      	add	sp, #20
 800187e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001882:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001884:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001886:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001888:	ea12 0e06 	ands.w	lr, r2, r6
 800188c:	f000 80b1 	beq.w	80019f2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001890:	684a      	ldr	r2, [r1, #4]
 8001892:	f022 0710 	bic.w	r7, r2, #16
 8001896:	2f02      	cmp	r7, #2
 8001898:	d116      	bne.n	80018c8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800189a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800189e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018a2:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80018a6:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018aa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80018ae:	f04f 0c0f 	mov.w	ip, #15
 80018b2:	fa0c fc0a 	lsl.w	ip, ip, sl
 80018b6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ba:	690d      	ldr	r5, [r1, #16]
 80018bc:	fa05 f50a 	lsl.w	r5, r5, sl
 80018c0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80018c4:	f8c9 5020 	str.w	r5, [r9, #32]
 80018c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018cc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80018ce:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018d2:	fa05 f50c 	lsl.w	r5, r5, ip
 80018d6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018d8:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018dc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e0:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e6:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ea:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80018ec:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f0:	d811      	bhi.n	8001916 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80018f2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018f4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f8:	68cf      	ldr	r7, [r1, #12]
 80018fa:	fa07 f70c 	lsl.w	r7, r7, ip
 80018fe:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001902:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001904:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001906:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800190a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800190e:	409f      	lsls	r7, r3
 8001910:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001914:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001916:	f1ba 0f03 	cmp.w	sl, #3
 800191a:	d107      	bne.n	800192c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 800191c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800191e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001922:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001926:	409f      	lsls	r7, r3
 8001928:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800192a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800192c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800192e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001930:	688e      	ldr	r6, [r1, #8]
 8001932:	fa06 f60c 	lsl.w	r6, r6, ip
 8001936:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001938:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	00d5      	lsls	r5, r2, #3
 800193c:	d559      	bpl.n	80019f2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001942:	f045 0501 	orr.w	r5, r5, #1
 8001946:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800194a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800194e:	f023 0603 	bic.w	r6, r3, #3
 8001952:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001956:	f005 0501 	and.w	r5, r5, #1
 800195a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800195e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001960:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001964:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001966:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001968:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800196c:	270f      	movs	r7, #15
 800196e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001972:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001976:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800197a:	d03c      	beq.n	80019f6 <HAL_GPIO_Init+0x192>
 800197c:	4d25      	ldr	r5, [pc, #148]	; (8001a14 <HAL_GPIO_Init+0x1b0>)
 800197e:	42a8      	cmp	r0, r5
 8001980:	d03b      	beq.n	80019fa <HAL_GPIO_Init+0x196>
 8001982:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001986:	42a8      	cmp	r0, r5
 8001988:	d039      	beq.n	80019fe <HAL_GPIO_Init+0x19a>
 800198a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800198e:	42a8      	cmp	r0, r5
 8001990:	d037      	beq.n	8001a02 <HAL_GPIO_Init+0x19e>
 8001992:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001996:	42a8      	cmp	r0, r5
 8001998:	d035      	beq.n	8001a06 <HAL_GPIO_Init+0x1a2>
 800199a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800199e:	42a8      	cmp	r0, r5
 80019a0:	d033      	beq.n	8001a0a <HAL_GPIO_Init+0x1a6>
 80019a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019a6:	42a8      	cmp	r0, r5
 80019a8:	bf14      	ite	ne
 80019aa:	2507      	movne	r5, #7
 80019ac:	2506      	moveq	r5, #6
 80019ae:	fa05 f50c 	lsl.w	r5, r5, ip
 80019b2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019b4:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80019b6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80019b8:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019bc:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80019be:	bf54      	ite	pl
 80019c0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80019c2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80019c6:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80019c8:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ca:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80019cc:	bf54      	ite	pl
 80019ce:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80019d0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80019d4:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80019d6:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d8:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80019da:	bf54      	ite	pl
 80019dc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80019de:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80019e2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80019e4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e6:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80019e8:	bf54      	ite	pl
 80019ea:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80019ec:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80019f0:	60e5      	str	r5, [r4, #12]
    position++;
 80019f2:	3301      	adds	r3, #1
 80019f4:	e73f      	b.n	8001876 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019f6:	2500      	movs	r5, #0
 80019f8:	e7d9      	b.n	80019ae <HAL_GPIO_Init+0x14a>
 80019fa:	2501      	movs	r5, #1
 80019fc:	e7d7      	b.n	80019ae <HAL_GPIO_Init+0x14a>
 80019fe:	2502      	movs	r5, #2
 8001a00:	e7d5      	b.n	80019ae <HAL_GPIO_Init+0x14a>
 8001a02:	2503      	movs	r5, #3
 8001a04:	e7d3      	b.n	80019ae <HAL_GPIO_Init+0x14a>
 8001a06:	2504      	movs	r5, #4
 8001a08:	e7d1      	b.n	80019ae <HAL_GPIO_Init+0x14a>
 8001a0a:	2505      	movs	r5, #5
 8001a0c:	e7cf      	b.n	80019ae <HAL_GPIO_Init+0x14a>
 8001a0e:	bf00      	nop
 8001a10:	40010400 	.word	0x40010400
 8001a14:	48000400 	.word	0x48000400
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001a20:	4c47      	ldr	r4, [pc, #284]	; (8001b40 <HAL_GPIO_DeInit+0x124>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a22:	f8df a124 	ldr.w	sl, [pc, #292]	; 8001b48 <HAL_GPIO_DeInit+0x12c>
 8001a26:	f8df b124 	ldr.w	fp, [pc, #292]	; 8001b4c <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a2c:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001a30:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != 0x00u)
 8001a34:	fa31 f203 	lsrs.w	r2, r1, r3
 8001a38:	d102      	bne.n	8001a40 <HAL_GPIO_DeInit+0x24>
      }
    }

    position++;
  }
}
 8001a3a:	b003      	add	sp, #12
 8001a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a40:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent != 0x00u)
 8001a44:	ea11 0206 	ands.w	r2, r1, r6
 8001a48:	9201      	str	r2, [sp, #4]
 8001a4a:	d06a      	beq.n	8001b22 <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001a4c:	6807      	ldr	r7, [r0, #0]
 8001a4e:	005a      	lsls	r2, r3, #1
 8001a50:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001a54:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001a58:	4317      	orrs	r7, r2
 8001a5a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001a5e:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001a60:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8001a64:	f003 0e07 	and.w	lr, r3, #7
 8001a68:	463d      	mov	r5, r7
 8001a6a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a6e:	270f      	movs	r7, #15
 8001a70:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001a74:	ea25 0e0e 	bic.w	lr, r5, lr
 8001a78:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a7c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8001a80:	43d2      	mvns	r2, r2
 8001a82:	ea0e 0e02 	and.w	lr, lr, r2
 8001a86:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a8a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8001a8e:	43f6      	mvns	r6, r6
 8001a90:	ea0e 0e06 	and.w	lr, lr, r6
 8001a94:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a98:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8001a9c:	ea02 020e 	and.w	r2, r2, lr
 8001aa0:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001aa2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001aa4:	4016      	ands	r6, r2
 8001aa6:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001aa8:	f023 0603 	bic.w	r6, r3, #3
 8001aac:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001ab0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001ab4:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001ab8:	68b2      	ldr	r2, [r6, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001aba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001abe:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001ac2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001ac6:	ea02 0c07 	and.w	ip, r2, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001aca:	d02c      	beq.n	8001b26 <HAL_GPIO_DeInit+0x10a>
 8001acc:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_GPIO_DeInit+0x128>)
 8001ace:	4290      	cmp	r0, r2
 8001ad0:	d02b      	beq.n	8001b2a <HAL_GPIO_DeInit+0x10e>
 8001ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ad6:	4290      	cmp	r0, r2
 8001ad8:	d029      	beq.n	8001b2e <HAL_GPIO_DeInit+0x112>
 8001ada:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ade:	4290      	cmp	r0, r2
 8001ae0:	d027      	beq.n	8001b32 <HAL_GPIO_DeInit+0x116>
 8001ae2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ae6:	4290      	cmp	r0, r2
 8001ae8:	d025      	beq.n	8001b36 <HAL_GPIO_DeInit+0x11a>
 8001aea:	4550      	cmp	r0, sl
 8001aec:	d025      	beq.n	8001b3a <HAL_GPIO_DeInit+0x11e>
 8001aee:	4558      	cmp	r0, fp
 8001af0:	bf0c      	ite	eq
 8001af2:	2206      	moveq	r2, #6
 8001af4:	2207      	movne	r2, #7
 8001af6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001afa:	4594      	cmp	ip, r2
 8001afc:	d111      	bne.n	8001b22 <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001afe:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 8001b00:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001b02:	ea22 0707 	bic.w	r7, r2, r7
 8001b06:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 8001b08:	6822      	ldr	r2, [r4, #0]
 8001b0a:	43ed      	mvns	r5, r5
 8001b0c:	402a      	ands	r2, r5
 8001b0e:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001b10:	6862      	ldr	r2, [r4, #4]
 8001b12:	402a      	ands	r2, r5
 8001b14:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001b16:	68a2      	ldr	r2, [r4, #8]
 8001b18:	402a      	ands	r2, r5
 8001b1a:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001b1c:	68e2      	ldr	r2, [r4, #12]
 8001b1e:	4015      	ands	r5, r2
 8001b20:	60e5      	str	r5, [r4, #12]
    position++;
 8001b22:	3301      	adds	r3, #1
 8001b24:	e786      	b.n	8001a34 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001b26:	2200      	movs	r2, #0
 8001b28:	e7e5      	b.n	8001af6 <HAL_GPIO_DeInit+0xda>
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	e7e3      	b.n	8001af6 <HAL_GPIO_DeInit+0xda>
 8001b2e:	2202      	movs	r2, #2
 8001b30:	e7e1      	b.n	8001af6 <HAL_GPIO_DeInit+0xda>
 8001b32:	2203      	movs	r2, #3
 8001b34:	e7df      	b.n	8001af6 <HAL_GPIO_DeInit+0xda>
 8001b36:	2204      	movs	r2, #4
 8001b38:	e7dd      	b.n	8001af6 <HAL_GPIO_DeInit+0xda>
 8001b3a:	2205      	movs	r2, #5
 8001b3c:	e7db      	b.n	8001af6 <HAL_GPIO_DeInit+0xda>
 8001b3e:	bf00      	nop
 8001b40:	40010400 	.word	0x40010400
 8001b44:	48000400 	.word	0x48000400
 8001b48:	48001400 	.word	0x48001400
 8001b4c:	48001800 	.word	0x48001800

08001b50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b50:	b10a      	cbz	r2, 8001b56 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b52:	6181      	str	r1, [r0, #24]
 8001b54:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b56:	6281      	str	r1, [r0, #40]	; 0x28
 8001b58:	4770      	bx	lr

08001b5a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001b5a:	6943      	ldr	r3, [r0, #20]
 8001b5c:	4059      	eors	r1, r3
 8001b5e:	6141      	str	r1, [r0, #20]
 8001b60:	4770      	bx	lr

08001b62 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b62:	6803      	ldr	r3, [r0, #0]
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b68:	bf44      	itt	mi
 8001b6a:	2200      	movmi	r2, #0
 8001b6c:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b72:	bf5e      	ittt	pl
 8001b74:	699a      	ldrpl	r2, [r3, #24]
 8001b76:	f042 0201 	orrpl.w	r2, r2, #1
 8001b7a:	619a      	strpl	r2, [r3, #24]
 8001b7c:	4770      	bx	lr

08001b7e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001b7e:	b530      	push	{r4, r5, lr}
 8001b80:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001b82:	6805      	ldr	r5, [r0, #0]
 8001b84:	4323      	orrs	r3, r4
 8001b86:	0d64      	lsrs	r4, r4, #21
 8001b88:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001b8c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001b90:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001b94:	6868      	ldr	r0, [r5, #4]
 8001b96:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001b9a:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001b9e:	4319      	orrs	r1, r3
 8001ba0:	f044 0403 	orr.w	r4, r4, #3
 8001ba4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001ba8:	ea20 0404 	bic.w	r4, r0, r4
 8001bac:	4321      	orrs	r1, r4
 8001bae:	6069      	str	r1, [r5, #4]
 8001bb0:	bd30      	pop	{r4, r5, pc}

08001bb2 <I2C_WaitOnFlagUntilTimeout>:
{
 8001bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb6:	9f06      	ldr	r7, [sp, #24]
 8001bb8:	4604      	mov	r4, r0
 8001bba:	4688      	mov	r8, r1
 8001bbc:	4616      	mov	r6, r2
 8001bbe:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc0:	6822      	ldr	r2, [r4, #0]
 8001bc2:	6993      	ldr	r3, [r2, #24]
 8001bc4:	ea38 0303 	bics.w	r3, r8, r3
 8001bc8:	bf0c      	ite	eq
 8001bca:	2301      	moveq	r3, #1
 8001bcc:	2300      	movne	r3, #0
 8001bce:	42b3      	cmp	r3, r6
 8001bd0:	d002      	beq.n	8001bd8 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001bd2:	2000      	movs	r0, #0
}
 8001bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001bd8:	1c6b      	adds	r3, r5, #1
 8001bda:	d0f2      	beq.n	8001bc2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bdc:	f7ff fd26 	bl	800162c <HAL_GetTick>
 8001be0:	1bc0      	subs	r0, r0, r7
 8001be2:	4285      	cmp	r5, r0
 8001be4:	d301      	bcc.n	8001bea <I2C_WaitOnFlagUntilTimeout+0x38>
 8001be6:	2d00      	cmp	r5, #0
 8001be8:	d1ea      	bne.n	8001bc0 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001bfe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001c02:	2001      	movs	r0, #1
 8001c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c08 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c08:	6803      	ldr	r3, [r0, #0]
{
 8001c0a:	b570      	push	{r4, r5, r6, lr}
 8001c0c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c0e:	6998      	ldr	r0, [r3, #24]
 8001c10:	f010 0010 	ands.w	r0, r0, #16
{
 8001c14:	460d      	mov	r5, r1
 8001c16:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c18:	d116      	bne.n	8001c48 <I2C_IsAcknowledgeFailed+0x40>
 8001c1a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001c1c:	1c69      	adds	r1, r5, #1
 8001c1e:	d014      	beq.n	8001c4a <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c20:	f7ff fd04 	bl	800162c <HAL_GetTick>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	4285      	cmp	r5, r0
 8001c28:	d300      	bcc.n	8001c2c <I2C_IsAcknowledgeFailed+0x24>
 8001c2a:	b96d      	cbnz	r5, 8001c48 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c2e:	f043 0320 	orr.w	r3, r3, #32
 8001c32:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	2320      	movs	r3, #32
 8001c36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001c40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001c44:	2001      	movs	r0, #1
}
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	6999      	ldr	r1, [r3, #24]
 8001c4c:	068a      	lsls	r2, r1, #26
 8001c4e:	d5e5      	bpl.n	8001c1c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c50:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c52:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c54:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001c56:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c58:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001c5a:	f7ff ff82 	bl	8001b62 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	6853      	ldr	r3, [r2, #4]
 8001c62:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001c66:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001c6a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c7c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001c80:	e7db      	b.n	8001c3a <I2C_IsAcknowledgeFailed+0x32>

08001c82 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001c82:	b570      	push	{r4, r5, r6, lr}
 8001c84:	4604      	mov	r4, r0
 8001c86:	460d      	mov	r5, r1
 8001c88:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	079b      	lsls	r3, r3, #30
 8001c90:	d501      	bpl.n	8001c96 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c92:	2000      	movs	r0, #0
 8001c94:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c96:	4632      	mov	r2, r6
 8001c98:	4629      	mov	r1, r5
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7ff ffb4 	bl	8001c08 <I2C_IsAcknowledgeFailed>
 8001ca0:	b9a0      	cbnz	r0, 8001ccc <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001ca2:	1c6a      	adds	r2, r5, #1
 8001ca4:	d0f1      	beq.n	8001c8a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca6:	f7ff fcc1 	bl	800162c <HAL_GetTick>
 8001caa:	1b80      	subs	r0, r0, r6
 8001cac:	4285      	cmp	r5, r0
 8001cae:	d301      	bcc.n	8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001cb0:	2d00      	cmp	r5, #0
 8001cb2:	d1ea      	bne.n	8001c8a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001cb6:	f043 0320 	orr.w	r3, r3, #32
 8001cba:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001cc8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001ccc:	2001      	movs	r0, #1
}
 8001cce:	bd70      	pop	{r4, r5, r6, pc}

08001cd0 <I2C_RequestMemoryWrite>:
{
 8001cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cd2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001cd4:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <I2C_RequestMemoryWrite+0x60>)
 8001cd8:	9300      	str	r3, [sp, #0]
{
 8001cda:	4605      	mov	r5, r0
 8001cdc:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce2:	b2fa      	uxtb	r2, r7
 8001ce4:	f7ff ff4b 	bl	8001b7e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce8:	4632      	mov	r2, r6
 8001cea:	9908      	ldr	r1, [sp, #32]
 8001cec:	4628      	mov	r0, r5
 8001cee:	f7ff ffc8 	bl	8001c82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cf2:	b110      	cbz	r0, 8001cfa <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8001cf4:	2001      	movs	r0, #1
}
 8001cf6:	b003      	add	sp, #12
 8001cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cfa:	2f01      	cmp	r7, #1
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	d10c      	bne.n	8001d1a <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d00:	b2e4      	uxtb	r4, r4
 8001d02:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d04:	9b08      	ldr	r3, [sp, #32]
 8001d06:	9600      	str	r6, [sp, #0]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7ff ff50 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001d12:	3000      	adds	r0, #0
 8001d14:	bf18      	it	ne
 8001d16:	2001      	movne	r0, #1
 8001d18:	e7ed      	b.n	8001cf6 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d1a:	0a22      	lsrs	r2, r4, #8
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d1e:	9908      	ldr	r1, [sp, #32]
 8001d20:	4632      	mov	r2, r6
 8001d22:	4628      	mov	r0, r5
 8001d24:	f7ff ffad 	bl	8001c82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	d1e3      	bne.n	8001cf4 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d2c:	682b      	ldr	r3, [r5, #0]
 8001d2e:	e7e7      	b.n	8001d00 <I2C_RequestMemoryWrite+0x30>
 8001d30:	80002000 	.word	0x80002000

08001d34 <I2C_RequestMemoryRead>:
{
 8001d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d36:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001d38:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <I2C_RequestMemoryRead+0x60>)
 8001d3c:	9300      	str	r3, [sp, #0]
{
 8001d3e:	4605      	mov	r5, r0
 8001d40:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d42:	2300      	movs	r3, #0
 8001d44:	b2fa      	uxtb	r2, r7
 8001d46:	f7ff ff1a 	bl	8001b7e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d4a:	4632      	mov	r2, r6
 8001d4c:	9908      	ldr	r1, [sp, #32]
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f7ff ff97 	bl	8001c82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d54:	b110      	cbz	r0, 8001d5c <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8001d56:	2001      	movs	r0, #1
}
 8001d58:	b003      	add	sp, #12
 8001d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d5c:	2f01      	cmp	r7, #1
 8001d5e:	682b      	ldr	r3, [r5, #0]
 8001d60:	d10c      	bne.n	8001d7c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d62:	b2e4      	uxtb	r4, r4
 8001d64:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d66:	9b08      	ldr	r3, [sp, #32]
 8001d68:	9600      	str	r6, [sp, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2140      	movs	r1, #64	; 0x40
 8001d6e:	4628      	mov	r0, r5
 8001d70:	f7ff ff1f 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001d74:	3000      	adds	r0, #0
 8001d76:	bf18      	it	ne
 8001d78:	2001      	movne	r0, #1
 8001d7a:	e7ed      	b.n	8001d58 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d7c:	0a22      	lsrs	r2, r4, #8
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d80:	9908      	ldr	r1, [sp, #32]
 8001d82:	4632      	mov	r2, r6
 8001d84:	4628      	mov	r0, r5
 8001d86:	f7ff ff7c 	bl	8001c82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d1e3      	bne.n	8001d56 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d8e:	682b      	ldr	r3, [r5, #0]
 8001d90:	e7e7      	b.n	8001d62 <I2C_RequestMemoryRead+0x2e>
 8001d92:	bf00      	nop
 8001d94:	80002000 	.word	0x80002000

08001d98 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	460d      	mov	r5, r1
 8001d9e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	069b      	lsls	r3, r3, #26
 8001da6:	d501      	bpl.n	8001dac <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001da8:	2000      	movs	r0, #0
 8001daa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dac:	4632      	mov	r2, r6
 8001dae:	4629      	mov	r1, r5
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7ff ff29 	bl	8001c08 <I2C_IsAcknowledgeFailed>
 8001db6:	b990      	cbnz	r0, 8001dde <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db8:	f7ff fc38 	bl	800162c <HAL_GetTick>
 8001dbc:	1b80      	subs	r0, r0, r6
 8001dbe:	4285      	cmp	r5, r0
 8001dc0:	d301      	bcc.n	8001dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001dc2:	2d00      	cmp	r5, #0
 8001dc4:	d1ec      	bne.n	8001da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001dc8:	f043 0320 	orr.w	r3, r3, #32
 8001dcc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001dda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001dde:	2001      	movs	r0, #1
}
 8001de0:	bd70      	pop	{r4, r5, r6, pc}

08001de2 <HAL_I2C_Init>:
{
 8001de2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001de4:	4604      	mov	r4, r0
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d04a      	beq.n	8001e80 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001df2:	b91b      	cbnz	r3, 8001dfc <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001df4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001df8:	f002 fad4 	bl	80043a4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfc:	2324      	movs	r3, #36	; 0x24
 8001dfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001e02:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e04:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e0e:	6862      	ldr	r2, [r4, #4]
 8001e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e14:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e16:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e18:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e22:	d124      	bne.n	8001e6e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e28:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e2a:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e2c:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e2e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e36:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e3e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e40:	6922      	ldr	r2, [r4, #16]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	69a1      	ldr	r1, [r4, #24]
 8001e46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e4a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e4c:	6a21      	ldr	r1, [r4, #32]
 8001e4e:	69e2      	ldr	r2, [r4, #28]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e60:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e66:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001e6c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e72:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e74:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e76:	bf04      	itt	eq
 8001e78:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001e7c:	605a      	streq	r2, [r3, #4]
 8001e7e:	e7d4      	b.n	8001e2a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001e80:	2001      	movs	r0, #1
}
 8001e82:	bd10      	pop	{r4, pc}

08001e84 <HAL_I2C_DeInit>:
{
 8001e84:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001e86:	4604      	mov	r4, r0
 8001e88:	b198      	cbz	r0, 8001eb2 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8001e8a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8c:	2324      	movs	r3, #36	; 0x24
 8001e8e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001e92:	6813      	ldr	r3, [r2, #0]
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001e9a:	f002 fab9 	bl	8004410 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8001ea2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8001ea6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eaa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001eb0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001eb2:	2001      	movs	r0, #1
}
 8001eb4:	bd10      	pop	{r4, pc}

08001eb6 <HAL_I2C_Mem_Write>:
{
 8001eb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eba:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001ec0:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec2:	2b20      	cmp	r3, #32
{
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	460f      	mov	r7, r1
 8001ec8:	9203      	str	r2, [sp, #12]
 8001eca:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001ece:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed2:	f040 80a5 	bne.w	8002020 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8001ed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ed8:	b113      	cbz	r3, 8001ee0 <HAL_I2C_Mem_Write+0x2a>
 8001eda:	f1ba 0f00 	cmp.w	sl, #0
 8001ede:	d106      	bne.n	8001eee <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001ee6:	2001      	movs	r0, #1
}
 8001ee8:	b005      	add	sp, #20
 8001eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001eee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	f000 8094 	beq.w	8002020 <HAL_I2C_Mem_Write+0x16a>
 8001ef8:	2501      	movs	r5, #1
 8001efa:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001efe:	f7ff fb95 	bl	800162c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f02:	2319      	movs	r3, #25
 8001f04:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001f06:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f08:	462a      	mov	r2, r5
 8001f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff fe4f 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 8001f14:	4681      	mov	r9, r0
 8001f16:	2800      	cmp	r0, #0
 8001f18:	d1e5      	bne.n	8001ee6 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f1a:	2321      	movs	r3, #33	; 0x21
 8001f1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f20:	2340      	movs	r3, #64	; 0x40
 8001f22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f28:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001f2a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001f2c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001f2e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f32:	9601      	str	r6, [sp, #4]
 8001f34:	f8cd 8000 	str.w	r8, [sp]
 8001f38:	465b      	mov	r3, fp
 8001f3a:	9a03      	ldr	r2, [sp, #12]
 8001f3c:	4639      	mov	r1, r7
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff fec6 	bl	8001cd0 <I2C_RequestMemoryWrite>
 8001f44:	b110      	cbz	r0, 8001f4c <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8001f46:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001f4a:	e7cc      	b.n	8001ee6 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2bff      	cmp	r3, #255	; 0xff
 8001f52:	d955      	bls.n	8002000 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f58:	9000      	str	r0, [sp, #0]
 8001f5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f5e:	4639      	mov	r1, r7
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7ff fe0c 	bl	8001b7e <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f66:	4632      	mov	r2, r6
 8001f68:	4641      	mov	r1, r8
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f7ff fe89 	bl	8001c82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d1b8      	bne.n	8001ee6 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f76:	6822      	ldr	r2, [r4, #0]
 8001f78:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001f7c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001f7e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001f80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f82:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f8c:	3a01      	subs	r2, #1
 8001f8e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f90:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001f92:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f94:	b1ab      	cbz	r3, 8001fc2 <HAL_I2C_Mem_Write+0x10c>
 8001f96:	b9a2      	cbnz	r2, 8001fc2 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f98:	9600      	str	r6, [sp, #0]
 8001f9a:	4643      	mov	r3, r8
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff fe07 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d19e      	bne.n	8001ee6 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fa8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2bff      	cmp	r3, #255	; 0xff
 8001fae:	d92f      	bls.n	8002010 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fb0:	22ff      	movs	r2, #255	; 0xff
 8001fb2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fb4:	9000      	str	r0, [sp, #0]
 8001fb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fba:	4639      	mov	r1, r7
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff fdde 	bl	8001b7e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001fc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1cd      	bne.n	8001f66 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fca:	4632      	mov	r2, r6
 8001fcc:	4641      	mov	r1, r8
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f7ff fee2 	bl	8001d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d186      	bne.n	8001ee6 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	2120      	movs	r1, #32
 8001fdc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001fe4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001fe8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ff6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ffa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001ffe:	e773      	b.n	8001ee8 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002000:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002002:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002004:	b292      	uxth	r2, r2
 8002006:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	e7a6      	b.n	8001f5e <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8002010:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002012:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002014:	b292      	uxth	r2, r2
 8002016:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	e7cc      	b.n	8001fba <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8002020:	2002      	movs	r0, #2
 8002022:	e761      	b.n	8001ee8 <HAL_I2C_Mem_Write+0x32>

08002024 <HAL_I2C_Mem_Read>:
{
 8002024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002028:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800202a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800202e:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002030:	2b20      	cmp	r3, #32
{
 8002032:	4604      	mov	r4, r0
 8002034:	460f      	mov	r7, r1
 8002036:	9203      	str	r2, [sp, #12]
 8002038:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 800203c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002040:	f040 80a9 	bne.w	8002196 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002046:	b113      	cbz	r3, 800204e <HAL_I2C_Mem_Read+0x2a>
 8002048:	f1ba 0f00 	cmp.w	sl, #0
 800204c:	d106      	bne.n	800205c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800204e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002052:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002054:	2001      	movs	r0, #1
}
 8002056:	b005      	add	sp, #20
 8002058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800205c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002060:	2b01      	cmp	r3, #1
 8002062:	f000 8098 	beq.w	8002196 <HAL_I2C_Mem_Read+0x172>
 8002066:	2501      	movs	r5, #1
 8002068:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800206c:	f7ff fade 	bl	800162c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002070:	2319      	movs	r3, #25
 8002072:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002074:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002076:	462a      	mov	r2, r5
 8002078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff fd98 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 8002082:	4681      	mov	r9, r0
 8002084:	2800      	cmp	r0, #0
 8002086:	d1e5      	bne.n	8002054 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002088:	2322      	movs	r3, #34	; 0x22
 800208a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800208e:	2340      	movs	r3, #64	; 0x40
 8002090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002096:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002098:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800209a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800209c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020a0:	9601      	str	r6, [sp, #4]
 80020a2:	f8cd 8000 	str.w	r8, [sp]
 80020a6:	465b      	mov	r3, fp
 80020a8:	9a03      	ldr	r2, [sp, #12]
 80020aa:	4639      	mov	r1, r7
 80020ac:	4620      	mov	r0, r4
 80020ae:	f7ff fe41 	bl	8001d34 <I2C_RequestMemoryRead>
 80020b2:	b110      	cbz	r0, 80020ba <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 80020b4:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80020b8:	e7cc      	b.n	8002054 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2bff      	cmp	r3, #255	; 0xff
 80020c0:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_I2C_Mem_Read+0x178>)
 80020c2:	d958      	bls.n	8002176 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020c4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80020c6:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020c8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80020ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80020ce:	4639      	mov	r1, r7
 80020d0:	4620      	mov	r0, r4
 80020d2:	f7ff fd54 	bl	8001b7e <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020d6:	9600      	str	r6, [sp, #0]
 80020d8:	4643      	mov	r3, r8
 80020da:	2200      	movs	r2, #0
 80020dc:	2104      	movs	r1, #4
 80020de:	4620      	mov	r0, r4
 80020e0:	f7ff fd67 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d1b5      	bne.n	8002054 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020e8:	6822      	ldr	r2, [r4, #0]
 80020ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ee:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80020f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80020f2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80020f4:	3301      	adds	r3, #1
 80020f6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80020f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002100:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002102:	3a01      	subs	r2, #1
 8002104:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002106:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002108:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800210a:	b1ab      	cbz	r3, 8002138 <HAL_I2C_Mem_Read+0x114>
 800210c:	b9a2      	cbnz	r2, 8002138 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800210e:	9600      	str	r6, [sp, #0]
 8002110:	4643      	mov	r3, r8
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	4620      	mov	r0, r4
 8002116:	f7ff fd4c 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 800211a:	2800      	cmp	r0, #0
 800211c:	d19a      	bne.n	8002054 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800211e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	2bff      	cmp	r3, #255	; 0xff
 8002124:	d92f      	bls.n	8002186 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002126:	22ff      	movs	r2, #255	; 0xff
 8002128:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800212a:	9000      	str	r0, [sp, #0]
 800212c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002130:	4639      	mov	r1, r7
 8002132:	4620      	mov	r0, r4
 8002134:	f7ff fd23 	bl	8001b7e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002138:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ca      	bne.n	80020d6 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002140:	4632      	mov	r2, r6
 8002142:	4641      	mov	r1, r8
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff fe27 	bl	8001d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800214a:	2800      	cmp	r0, #0
 800214c:	d182      	bne.n	8002054 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	2120      	movs	r1, #32
 8002152:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800215a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800215e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800216c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002170:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002174:	e76f      	b.n	8002056 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002176:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002178:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800217a:	b292      	uxth	r2, r2
 800217c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800217e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	e7a3      	b.n	80020ce <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002186:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002188:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800218a:	b292      	uxth	r2, r2
 800218c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800218e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	e7cc      	b.n	8002130 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8002196:	2002      	movs	r0, #2
 8002198:	e75d      	b.n	8002056 <HAL_I2C_Mem_Read+0x32>
 800219a:	bf00      	nop
 800219c:	80002400 	.word	0x80002400

080021a0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	2a20      	cmp	r2, #32
{
 80021a8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021aa:	d11d      	bne.n	80021e8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d019      	beq.n	80021e8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	2324      	movs	r3, #36	; 0x24
 80021b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ba:	6803      	ldr	r3, [r0, #0]
 80021bc:	681c      	ldr	r4, [r3, #0]
 80021be:	f024 0401 	bic.w	r4, r4, #1
 80021c2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021c4:	681c      	ldr	r4, [r3, #0]
 80021c6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80021ca:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021cc:	681c      	ldr	r4, [r3, #0]
 80021ce:	4321      	orrs	r1, r4
 80021d0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	f041 0101 	orr.w	r1, r1, #1
 80021d8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021da:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80021e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80021e8:	2002      	movs	r0, #2
  }
}
 80021ea:	bd10      	pop	{r4, pc}

080021ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ec:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ee:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80021f2:	b2e4      	uxtb	r4, r4
 80021f4:	2c20      	cmp	r4, #32
 80021f6:	d11c      	bne.n	8002232 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d018      	beq.n	8002232 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002200:	2324      	movs	r3, #36	; 0x24
 8002202:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002206:	6803      	ldr	r3, [r0, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002210:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002212:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002216:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800221a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002224:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002226:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800222a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800222e:	4618      	mov	r0, r3
 8002230:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002232:	2002      	movs	r0, #2
  }
}
 8002234:	bd10      	pop	{r4, pc}

08002236 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800223a:	4604      	mov	r4, r0
{
 800223c:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 800223e:	2800      	cmp	r0, #0
 8002240:	d074      	beq.n	800232c <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002242:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8002246:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800224a:	b91b      	cbnz	r3, 8002254 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800224c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002250:	f002 f9e0 	bl	8004614 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002254:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002256:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8002258:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 800225c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8002260:	f001 fcab 	bl	8003bba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002266:	466e      	mov	r6, sp
 8002268:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800226a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800226e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002272:	e886 0003 	stmia.w	r6, {r0, r1}
 8002276:	f104 0804 	add.w	r8, r4, #4
 800227a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800227e:	6820      	ldr	r0, [r4, #0]
 8002280:	f001 fc6c 	bl	8003b5c <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002284:	2100      	movs	r1, #0
 8002286:	6820      	ldr	r0, [r4, #0]
 8002288:	f001 fc9d 	bl	8003bc6 <USB_SetCurrentMode>
 800228c:	2100      	movs	r1, #0
 800228e:	4622      	mov	r2, r4
 8002290:	4623      	mov	r3, r4
 8002292:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002296:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002298:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 800229a:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800229e:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 80022a2:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 80022a4:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 80022a6:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022aa:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80022ae:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022b0:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80022b2:	6518      	str	r0, [r3, #80]	; 0x50
 80022b4:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 80022b8:	d1ef      	bne.n	800229a <HAL_PCD_Init+0x64>
 80022ba:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022bc:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 80022be:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 80022c2:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 80022c4:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 80022c6:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ca:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022ce:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022d2:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022d6:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 80022da:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 80022de:	d1ee      	bne.n	80022be <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80022e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e2:	466e      	mov	r6, sp
 80022e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80022e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80022ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ee:	e886 0003 	stmia.w	r6, {r0, r1}
 80022f2:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80022f6:	6820      	ldr	r0, [r4, #0]
 80022f8:	f001 fca6 	bl	8003c48 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 80022fc:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80022fe:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002302:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002308:	2b01      	cmp	r3, #1
 800230a:	d102      	bne.n	8002312 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800230c:	4620      	mov	r0, r4
 800230e:	f000 f80f 	bl	8002330 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8002312:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002314:	2b01      	cmp	r3, #1
 8002316:	d102      	bne.n	800231e <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8002318:	4620      	mov	r0, r4
 800231a:	f000 f81c 	bl	8002356 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800231e:	6820      	ldr	r0, [r4, #0]
 8002320:	f001 fd2e 	bl	8003d80 <USB_DevDisconnect>

  return HAL_OK;
 8002324:	2000      	movs	r0, #0
}
 8002326:	b00a      	add	sp, #40	; 0x28
 8002328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800232c:	2001      	movs	r0, #1
 800232e:	e7fa      	b.n	8002326 <HAL_PCD_Init+0xf0>

08002330 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002330:	6802      	ldr	r2, [r0, #0]
{
 8002332:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8002334:	2101      	movs	r1, #1
 8002336:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800233a:	2000      	movs	r0, #0
 800233c:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002340:	6993      	ldr	r3, [r2, #24]
 8002342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002346:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002348:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	f043 0303 	orr.w	r3, r3, #3
 8002352:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8002354:	4770      	bx	lr

08002356 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002356:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8002358:	2301      	movs	r3, #1
 800235a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 800235e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002364:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8002366:	2000      	movs	r0, #0
 8002368:	4770      	bx	lr
	...

0800236c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800236c:	4a02      	ldr	r2, [pc, #8]	; (8002378 <HAL_PWR_EnableBkUpAccess+0xc>)
 800236e:	6813      	ldr	r3, [r2, #0]
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4770      	bx	lr
 8002378:	40007000 	.word	0x40007000

0800237c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800237c:	4b02      	ldr	r3, [pc, #8]	; (8002388 <HAL_PWREx_GetVoltageRange+0xc>)
 800237e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002380:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40007000 	.word	0x40007000

0800238c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800238e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002390:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002394:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002398:	d11c      	bne.n	80023d4 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800239a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800239e:	d015      	beq.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80023a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023aa:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023ac:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80023ae:	6811      	ldr	r1, [r2, #0]
 80023b0:	2232      	movs	r2, #50	; 0x32
 80023b2:	434a      	muls	r2, r1
 80023b4:	490f      	ldr	r1, [pc, #60]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80023b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80023ba:	4619      	mov	r1, r3
 80023bc:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023be:	6958      	ldr	r0, [r3, #20]
 80023c0:	0540      	lsls	r0, r0, #21
 80023c2:	d500      	bpl.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80023c4:	b922      	cbnz	r2, 80023d0 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023c6:	694b      	ldr	r3, [r1, #20]
 80023c8:	055b      	lsls	r3, r3, #21
 80023ca:	d40d      	bmi.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023cc:	2000      	movs	r0, #0
 80023ce:	4770      	bx	lr
        wait_loop_index--;
 80023d0:	3a01      	subs	r2, #1
 80023d2:	e7f4      	b.n	80023be <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023d4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d8:	bf1f      	itttt	ne
 80023da:	681a      	ldrne	r2, [r3, #0]
 80023dc:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80023e0:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80023e4:	601a      	strne	r2, [r3, #0]
 80023e6:	e7f1      	b.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80023e8:	2003      	movs	r0, #3
}
 80023ea:	4770      	bx	lr
 80023ec:	40007000 	.word	0x40007000
 80023f0:	20000094 	.word	0x20000094
 80023f4:	000f4240 	.word	0x000f4240

080023f8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80023f8:	4a02      	ldr	r2, [pc, #8]	; (8002404 <HAL_PWREx_EnableVddUSB+0xc>)
 80023fa:	6853      	ldr	r3, [r2, #4]
 80023fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002400:	6053      	str	r3, [r2, #4]
 8002402:	4770      	bx	lr
 8002404:	40007000 	.word	0x40007000

08002408 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800240c:	9d06      	ldr	r5, [sp, #24]
 800240e:	4604      	mov	r4, r0
 8002410:	460f      	mov	r7, r1
 8002412:	4616      	mov	r6, r2
 8002414:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002416:	6821      	ldr	r1, [r4, #0]
 8002418:	688a      	ldr	r2, [r1, #8]
 800241a:	423a      	tst	r2, r7
 800241c:	bf14      	ite	ne
 800241e:	2201      	movne	r2, #1
 8002420:	2200      	moveq	r2, #0
 8002422:	42b2      	cmp	r2, r6
 8002424:	d102      	bne.n	800242c <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002426:	2000      	movs	r0, #0
}
 8002428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800242c:	1c6b      	adds	r3, r5, #1
 800242e:	d0f3      	beq.n	8002418 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002430:	f7ff f8fc 	bl	800162c <HAL_GetTick>
 8002434:	eba0 0008 	sub.w	r0, r0, r8
 8002438:	4285      	cmp	r5, r0
 800243a:	d301      	bcc.n	8002440 <QSPI_WaitFlagStateUntilTimeout+0x38>
 800243c:	2d00      	cmp	r5, #0
 800243e:	d1ea      	bne.n	8002416 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002440:	2304      	movs	r3, #4
 8002442:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002446:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800244e:	2001      	movs	r0, #1
 8002450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002454 <HAL_QSPI_Init>:
{
 8002454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002456:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7ff f8e8 	bl	800162c <HAL_GetTick>
 800245c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800245e:	2c00      	cmp	r4, #0
 8002460:	d049      	beq.n	80024f6 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8002462:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002466:	2b01      	cmp	r3, #1
 8002468:	d047      	beq.n	80024fa <HAL_QSPI_Init+0xa6>
 800246a:	2301      	movs	r3, #1
 800246c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002470:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002474:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8002478:	b93a      	cbnz	r2, 800248a <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 800247a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 800247e:	4620      	mov	r0, r4
 8002480:	f001 ffdc 	bl	800443c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8002484:	f241 3388 	movw	r3, #5000	; 0x1388
 8002488:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800248a:	6820      	ldr	r0, [r4, #0]
 800248c:	68a1      	ldr	r1, [r4, #8]
 800248e:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002490:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002492:	3901      	subs	r1, #1
 8002494:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002498:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800249c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800249e:	2120      	movs	r1, #32
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	462b      	mov	r3, r5
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7ff ffae 	bl	8002408 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80024ac:	b9f0      	cbnz	r0, 80024ec <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	6865      	ldr	r5, [r4, #4]
 80024b2:	6811      	ldr	r1, [r2, #0]
 80024b4:	68e3      	ldr	r3, [r4, #12]
 80024b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80024ba:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80024be:	f021 0110 	bic.w	r1, r1, #16
 80024c2:	430b      	orrs	r3, r1
 80024c4:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80024c6:	69a1      	ldr	r1, [r4, #24]
 80024c8:	6963      	ldr	r3, [r4, #20]
 80024ca:	6855      	ldr	r5, [r2, #4]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6921      	ldr	r1, [r4, #16]
 80024d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80024d4:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_QSPI_Init+0xac>)
 80024d6:	4029      	ands	r1, r5
 80024d8:	430b      	orrs	r3, r1
 80024da:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80024e4:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024e6:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 80024e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 80024ec:	2300      	movs	r3, #0
 80024ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80024f2:	b003      	add	sp, #12
 80024f4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80024f6:	2001      	movs	r0, #1
 80024f8:	e7fb      	b.n	80024f2 <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 80024fa:	2002      	movs	r0, #2
 80024fc:	e7f9      	b.n	80024f2 <HAL_QSPI_Init+0x9e>
 80024fe:	bf00      	nop
 8002500:	ffe0f8fe 	.word	0xffe0f8fe

08002504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002504:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002506:	4d1e      	ldr	r5, [pc, #120]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002508:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800250a:	00da      	lsls	r2, r3, #3
{
 800250c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800250e:	d518      	bpl.n	8002542 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002510:	f7ff ff34 	bl	800237c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002514:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002518:	d123      	bne.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800251a:	2c80      	cmp	r4, #128	; 0x80
 800251c:	d929      	bls.n	8002572 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800251e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002520:	bf8c      	ite	hi
 8002522:	2002      	movhi	r0, #2
 8002524:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f023 0307 	bic.w	r3, r3, #7
 800252e:	4303      	orrs	r3, r0
 8002530:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002532:	6813      	ldr	r3, [r2, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002538:	1a18      	subs	r0, r3, r0
 800253a:	bf18      	it	ne
 800253c:	2001      	movne	r0, #1
 800253e:	b003      	add	sp, #12
 8002540:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	65ab      	str	r3, [r5, #88]	; 0x58
 800254a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002554:	f7ff ff12 	bl	800237c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002558:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800255a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002560:	e7d8      	b.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002562:	2c80      	cmp	r4, #128	; 0x80
 8002564:	d807      	bhi.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002566:	d008      	beq.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002568:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800256c:	4258      	negs	r0, r3
 800256e:	4158      	adcs	r0, r3
 8002570:	e7d9      	b.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002572:	2000      	movs	r0, #0
 8002574:	e7d7      	b.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002576:	2003      	movs	r0, #3
 8002578:	e7d5      	b.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800257a:	2002      	movs	r0, #2
 800257c:	e7d3      	b.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40022000 	.word	0x40022000

08002588 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 800258a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800258c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800258e:	f012 020c 	ands.w	r2, r2, #12
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x18>
 8002594:	2a0c      	cmp	r2, #12
 8002596:	d115      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002598:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800259c:	2901      	cmp	r1, #1
 800259e:	d118      	bne.n	80025d2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025a0:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80025a2:	4820      	ldr	r0, [pc, #128]	; (8002624 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025a4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025a6:	bf55      	itete	pl
 80025a8:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025ac:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025ae:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025b2:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80025b6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ba:	b382      	cbz	r2, 800261e <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025bc:	2a0c      	cmp	r2, #12
 80025be:	d009      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x4c>
 80025c0:	2000      	movs	r0, #0
  return sysclockfreq;
 80025c2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025c4:	2a04      	cmp	r2, #4
 80025c6:	d029      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x94>
 80025c8:	2a08      	cmp	r2, #8
 80025ca:	4817      	ldr	r0, [pc, #92]	; (8002628 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025cc:	bf18      	it	ne
 80025ce:	2000      	movne	r0, #0
 80025d0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025d2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025d4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d6:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025d8:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 80025e0:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e2:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x6c>
 80025e8:	2903      	cmp	r1, #3
 80025ea:	d012      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ec:	68d9      	ldr	r1, [r3, #12]
 80025ee:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80025f2:	e003      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f4:	68d9      	ldr	r1, [r3, #12]
 80025f6:	480d      	ldr	r0, [pc, #52]	; (800262c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025f8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025fc:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fe:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002602:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002606:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002608:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800260a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800260c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002610:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002612:	68d9      	ldr	r1, [r3, #12]
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002616:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800261a:	e7ef      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 800261c:	4803      	ldr	r0, [pc, #12]	; (800262c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000
 8002624:	080069c0 	.word	0x080069c0
 8002628:	007a1200 	.word	0x007a1200
 800262c:	00f42400 	.word	0x00f42400

08002630 <HAL_RCC_OscConfig>:
{
 8002630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002634:	4605      	mov	r5, r0
 8002636:	b918      	cbnz	r0, 8002640 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002638:	2001      	movs	r0, #1
}
 800263a:	b003      	add	sp, #12
 800263c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002640:	4ca5      	ldr	r4, [pc, #660]	; (80028d8 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002642:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002644:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002646:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002648:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264a:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800264e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002652:	d53c      	bpl.n	80026ce <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002654:	b11e      	cbz	r6, 800265e <HAL_RCC_OscConfig+0x2e>
 8002656:	2e0c      	cmp	r6, #12
 8002658:	d163      	bne.n	8002722 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800265a:	2f01      	cmp	r7, #1
 800265c:	d161      	bne.n	8002722 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	0798      	lsls	r0, r3, #30
 8002662:	d502      	bpl.n	800266a <HAL_RCC_OscConfig+0x3a>
 8002664:	69ab      	ldr	r3, [r5, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0e6      	beq.n	8002638 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	6a28      	ldr	r0, [r5, #32]
 800266e:	0719      	lsls	r1, r3, #28
 8002670:	bf56      	itet	pl
 8002672:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002676:	6823      	ldrmi	r3, [r4, #0]
 8002678:	091b      	lsrpl	r3, r3, #4
 800267a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267e:	4283      	cmp	r3, r0
 8002680:	d23a      	bcs.n	80026f8 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002682:	f7ff ff3f 	bl	8002504 <RCC_SetFlashLatencyFromMSIRange>
 8002686:	2800      	cmp	r0, #0
 8002688:	d1d6      	bne.n	8002638 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	6023      	str	r3, [r4, #0]
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	6a2a      	ldr	r2, [r5, #32]
 8002696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800269a:	4313      	orrs	r3, r2
 800269c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800269e:	6863      	ldr	r3, [r4, #4]
 80026a0:	69ea      	ldr	r2, [r5, #28]
 80026a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026aa:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026ac:	f7ff ff6c 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 80026b0:	68a3      	ldr	r3, [r4, #8]
 80026b2:	4a8a      	ldr	r2, [pc, #552]	; (80028dc <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026b8:	5cd3      	ldrb	r3, [r2, r3]
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	40d8      	lsrs	r0, r3
 80026c0:	4b87      	ldr	r3, [pc, #540]	; (80028e0 <HAL_RCC_OscConfig+0x2b0>)
 80026c2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe ff81 	bl	80015cc <HAL_InitTick>
        if(status != HAL_OK)
 80026ca:	2800      	cmp	r0, #0
 80026cc:	d1b5      	bne.n	800263a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	682b      	ldr	r3, [r5, #0]
 80026d0:	07d8      	lsls	r0, r3, #31
 80026d2:	d45d      	bmi.n	8002790 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d4:	682b      	ldr	r3, [r5, #0]
 80026d6:	0799      	lsls	r1, r3, #30
 80026d8:	f100 809c 	bmi.w	8002814 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	0718      	lsls	r0, r3, #28
 80026e0:	f100 80d0 	bmi.w	8002884 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e4:	682b      	ldr	r3, [r5, #0]
 80026e6:	0759      	lsls	r1, r3, #29
 80026e8:	f100 80fc 	bmi.w	80028e4 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 8165 	bne.w	80029be <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 80026f4:	2000      	movs	r0, #0
 80026f6:	e7a0      	b.n	800263a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	f043 0308 	orr.w	r3, r3, #8
 80026fe:	6023      	str	r3, [r4, #0]
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002706:	4303      	orrs	r3, r0
 8002708:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270a:	6863      	ldr	r3, [r4, #4]
 800270c:	69ea      	ldr	r2, [r5, #28]
 800270e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002712:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002716:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002718:	f7ff fef4 	bl	8002504 <RCC_SetFlashLatencyFromMSIRange>
 800271c:	2800      	cmp	r0, #0
 800271e:	d0c5      	beq.n	80026ac <HAL_RCC_OscConfig+0x7c>
 8002720:	e78a      	b.n	8002638 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002722:	69ab      	ldr	r3, [r5, #24]
 8002724:	b31b      	cbz	r3, 800276e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800272e:	f7fe ff7d 	bl	800162c <HAL_GetTick>
 8002732:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	079a      	lsls	r2, r3, #30
 8002738:	d511      	bpl.n	800275e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	6a2a      	ldr	r2, [r5, #32]
 8002746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800274a:	4313      	orrs	r3, r2
 800274c:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800274e:	6863      	ldr	r3, [r4, #4]
 8002750:	69ea      	ldr	r2, [r5, #28]
 8002752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002756:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800275a:	6063      	str	r3, [r4, #4]
 800275c:	e7b7      	b.n	80026ce <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800275e:	f7fe ff65 	bl	800162c <HAL_GetTick>
 8002762:	eba0 0008 	sub.w	r0, r0, r8
 8002766:	2802      	cmp	r0, #2
 8002768:	d9e4      	bls.n	8002734 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 800276a:	2003      	movs	r0, #3
 800276c:	e765      	b.n	800263a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002776:	f7fe ff59 	bl	800162c <HAL_GetTick>
 800277a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	079b      	lsls	r3, r3, #30
 8002780:	d5a5      	bpl.n	80026ce <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002782:	f7fe ff53 	bl	800162c <HAL_GetTick>
 8002786:	eba0 0008 	sub.w	r0, r0, r8
 800278a:	2802      	cmp	r0, #2
 800278c:	d9f6      	bls.n	800277c <HAL_RCC_OscConfig+0x14c>
 800278e:	e7ec      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002790:	2e08      	cmp	r6, #8
 8002792:	d003      	beq.n	800279c <HAL_RCC_OscConfig+0x16c>
 8002794:	2e0c      	cmp	r6, #12
 8002796:	d108      	bne.n	80027aa <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8002798:	2f03      	cmp	r7, #3
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	039a      	lsls	r2, r3, #14
 80027a0:	d598      	bpl.n	80026d4 <HAL_RCC_OscConfig+0xa4>
 80027a2:	686b      	ldr	r3, [r5, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d195      	bne.n	80026d4 <HAL_RCC_OscConfig+0xa4>
 80027a8:	e746      	b.n	8002638 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027aa:	686b      	ldr	r3, [r5, #4]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d110      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1a4>
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027ba:	f7fe ff37 	bl	800162c <HAL_GetTick>
 80027be:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	039b      	lsls	r3, r3, #14
 80027c4:	d486      	bmi.n	80026d4 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c6:	f7fe ff31 	bl	800162c <HAL_GetTick>
 80027ca:	eba0 0008 	sub.w	r0, r0, r8
 80027ce:	2864      	cmp	r0, #100	; 0x64
 80027d0:	d9f6      	bls.n	80027c0 <HAL_RCC_OscConfig+0x190>
 80027d2:	e7ca      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d8:	d104      	bne.n	80027e4 <HAL_RCC_OscConfig+0x1b4>
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e0:	6023      	str	r3, [r4, #0]
 80027e2:	e7e6      	b.n	80027b2 <HAL_RCC_OscConfig+0x182>
 80027e4:	6822      	ldr	r2, [r4, #0]
 80027e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027ea:	6022      	str	r2, [r4, #0]
 80027ec:	6822      	ldr	r2, [r4, #0]
 80027ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027f2:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e0      	bne.n	80027ba <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 80027f8:	f7fe ff18 	bl	800162c <HAL_GetTick>
 80027fc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	0398      	lsls	r0, r3, #14
 8002802:	f57f af67 	bpl.w	80026d4 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002806:	f7fe ff11 	bl	800162c <HAL_GetTick>
 800280a:	eba0 0008 	sub.w	r0, r0, r8
 800280e:	2864      	cmp	r0, #100	; 0x64
 8002810:	d9f5      	bls.n	80027fe <HAL_RCC_OscConfig+0x1ce>
 8002812:	e7aa      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002814:	2e04      	cmp	r6, #4
 8002816:	d003      	beq.n	8002820 <HAL_RCC_OscConfig+0x1f0>
 8002818:	2e0c      	cmp	r6, #12
 800281a:	d110      	bne.n	800283e <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 800281c:	2f02      	cmp	r7, #2
 800281e:	d10e      	bne.n	800283e <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	0559      	lsls	r1, r3, #21
 8002824:	d503      	bpl.n	800282e <HAL_RCC_OscConfig+0x1fe>
 8002826:	68eb      	ldr	r3, [r5, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	f43f af05 	beq.w	8002638 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	6863      	ldr	r3, [r4, #4]
 8002830:	692a      	ldr	r2, [r5, #16]
 8002832:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002836:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800283a:	6063      	str	r3, [r4, #4]
 800283c:	e74e      	b.n	80026dc <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800283e:	68eb      	ldr	r3, [r5, #12]
 8002840:	b17b      	cbz	r3, 8002862 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800284a:	f7fe feef 	bl	800162c <HAL_GetTick>
 800284e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	055a      	lsls	r2, r3, #21
 8002854:	d4eb      	bmi.n	800282e <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002856:	f7fe fee9 	bl	800162c <HAL_GetTick>
 800285a:	1bc0      	subs	r0, r0, r7
 800285c:	2802      	cmp	r0, #2
 800285e:	d9f7      	bls.n	8002850 <HAL_RCC_OscConfig+0x220>
 8002860:	e783      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002868:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800286a:	f7fe fedf 	bl	800162c <HAL_GetTick>
 800286e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	055b      	lsls	r3, r3, #21
 8002874:	f57f af32 	bpl.w	80026dc <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe fed8 	bl	800162c <HAL_GetTick>
 800287c:	1bc0      	subs	r0, r0, r7
 800287e:	2802      	cmp	r0, #2
 8002880:	d9f6      	bls.n	8002870 <HAL_RCC_OscConfig+0x240>
 8002882:	e772      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002884:	696b      	ldr	r3, [r5, #20]
 8002886:	b19b      	cbz	r3, 80028b0 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8002888:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002894:	f7fe feca 	bl	800162c <HAL_GetTick>
 8002898:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800289a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800289e:	079a      	lsls	r2, r3, #30
 80028a0:	f53f af20 	bmi.w	80026e4 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7fe fec2 	bl	800162c <HAL_GetTick>
 80028a8:	1bc0      	subs	r0, r0, r7
 80028aa:	2802      	cmp	r0, #2
 80028ac:	d9f5      	bls.n	800289a <HAL_RCC_OscConfig+0x26a>
 80028ae:	e75c      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 80028b0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80028bc:	f7fe feb6 	bl	800162c <HAL_GetTick>
 80028c0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80028c6:	079b      	lsls	r3, r3, #30
 80028c8:	f57f af0c 	bpl.w	80026e4 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028cc:	f7fe feae 	bl	800162c <HAL_GetTick>
 80028d0:	1bc0      	subs	r0, r0, r7
 80028d2:	2802      	cmp	r0, #2
 80028d4:	d9f5      	bls.n	80028c2 <HAL_RCC_OscConfig+0x292>
 80028d6:	e748      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
 80028d8:	40021000 	.word	0x40021000
 80028dc:	080069a8 	.word	0x080069a8
 80028e0:	20000094 	.word	0x20000094
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028e6:	00d8      	lsls	r0, r3, #3
 80028e8:	d429      	bmi.n	800293e <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80028f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028fc:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002900:	4f5d      	ldr	r7, [pc, #372]	; (8002a78 <HAL_RCC_OscConfig+0x448>)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	05d9      	lsls	r1, r3, #23
 8002906:	d51d      	bpl.n	8002944 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	68ab      	ldr	r3, [r5, #8]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d12b      	bne.n	8002966 <HAL_RCC_OscConfig+0x336>
 800290e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800291a:	f7fe fe87 	bl	800162c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002922:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002924:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002928:	079b      	lsls	r3, r3, #30
 800292a:	d542      	bpl.n	80029b2 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 800292c:	f1b8 0f00 	cmp.w	r8, #0
 8002930:	f43f aedc 	beq.w	80026ec <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293a:	65a3      	str	r3, [r4, #88]	; 0x58
 800293c:	e6d6      	b.n	80026ec <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 800293e:	f04f 0800 	mov.w	r8, #0
 8002942:	e7dd      	b.n	8002900 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800294c:	f7fe fe6e 	bl	800162c <HAL_GetTick>
 8002950:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	05da      	lsls	r2, r3, #23
 8002956:	d4d7      	bmi.n	8002908 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002958:	f7fe fe68 	bl	800162c <HAL_GetTick>
 800295c:	eba0 0009 	sub.w	r0, r0, r9
 8002960:	2802      	cmp	r0, #2
 8002962:	d9f6      	bls.n	8002952 <HAL_RCC_OscConfig+0x322>
 8002964:	e701      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002966:	2b05      	cmp	r3, #5
 8002968:	d106      	bne.n	8002978 <HAL_RCC_OscConfig+0x348>
 800296a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002976:	e7ca      	b.n	800290e <HAL_RCC_OscConfig+0x2de>
 8002978:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002984:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002988:	f022 0204 	bic.w	r2, r2, #4
 800298c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1c2      	bne.n	800291a <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8002994:	f7fe fe4a 	bl	800162c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800299c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800299e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80029a2:	0798      	lsls	r0, r3, #30
 80029a4:	d5c2      	bpl.n	800292c <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe fe41 	bl	800162c <HAL_GetTick>
 80029aa:	1bc0      	subs	r0, r0, r7
 80029ac:	4548      	cmp	r0, r9
 80029ae:	d9f6      	bls.n	800299e <HAL_RCC_OscConfig+0x36e>
 80029b0:	e6db      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7fe fe3b 	bl	800162c <HAL_GetTick>
 80029b6:	1bc0      	subs	r0, r0, r7
 80029b8:	4548      	cmp	r0, r9
 80029ba:	d9b3      	bls.n	8002924 <HAL_RCC_OscConfig+0x2f4>
 80029bc:	e6d5      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029be:	2e0c      	cmp	r6, #12
 80029c0:	f43f ae3a 	beq.w	8002638 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029c4:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029cc:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029ce:	d137      	bne.n	8002a40 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 80029d0:	f7fe fe2c 	bl	800162c <HAL_GetTick>
 80029d4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	0199      	lsls	r1, r3, #6
 80029da:	d42b      	bmi.n	8002a34 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80029de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80029e4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80029e6:	3a01      	subs	r2, #1
 80029e8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80029ec:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80029ee:	0912      	lsrs	r2, r2, #4
 80029f0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80029f4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80029f6:	0852      	lsrs	r2, r2, #1
 80029f8:	3a01      	subs	r2, #1
 80029fa:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80029fe:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002a00:	0852      	lsrs	r2, r2, #1
 8002a02:	3a01      	subs	r2, #1
 8002a04:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002a08:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a10:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a12:	68e3      	ldr	r3, [r4, #12]
 8002a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a18:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fe07 	bl	800162c <HAL_GetTick>
 8002a1e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	019a      	lsls	r2, r3, #6
 8002a24:	f53f ae66 	bmi.w	80026f4 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe fe00 	bl	800162c <HAL_GetTick>
 8002a2c:	1b40      	subs	r0, r0, r5
 8002a2e:	2802      	cmp	r0, #2
 8002a30:	d9f6      	bls.n	8002a20 <HAL_RCC_OscConfig+0x3f0>
 8002a32:	e69a      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe fdfa 	bl	800162c <HAL_GetTick>
 8002a38:	1b80      	subs	r0, r0, r6
 8002a3a:	2802      	cmp	r0, #2
 8002a3c:	d9cb      	bls.n	80029d6 <HAL_RCC_OscConfig+0x3a6>
 8002a3e:	e694      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a46:	bf02      	ittt	eq
 8002a48:	68e3      	ldreq	r3, [r4, #12]
 8002a4a:	f023 0303 	biceq.w	r3, r3, #3
 8002a4e:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a50:	68e3      	ldr	r3, [r4, #12]
 8002a52:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fde6 	bl	800162c <HAL_GetTick>
 8002a60:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	019b      	lsls	r3, r3, #6
 8002a66:	f57f ae45 	bpl.w	80026f4 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fe fddf 	bl	800162c <HAL_GetTick>
 8002a6e:	1b40      	subs	r0, r0, r5
 8002a70:	2802      	cmp	r0, #2
 8002a72:	d9f6      	bls.n	8002a62 <HAL_RCC_OscConfig+0x432>
 8002a74:	e679      	b.n	800276a <HAL_RCC_OscConfig+0x13a>
 8002a76:	bf00      	nop
 8002a78:	40007000 	.word	0x40007000

08002a7c <HAL_RCC_ClockConfig>:
{
 8002a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a80:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002a82:	4604      	mov	r4, r0
 8002a84:	b910      	cbnz	r0, 8002a8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002a86:	2001      	movs	r0, #1
 8002a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a8c:	4a40      	ldr	r2, [pc, #256]	; (8002b90 <HAL_RCC_ClockConfig+0x114>)
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d329      	bcc.n	8002aec <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	07d9      	lsls	r1, r3, #31
 8002a9c:	d431      	bmi.n	8002b02 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9e:	6821      	ldr	r1, [r4, #0]
 8002aa0:	078a      	lsls	r2, r1, #30
 8002aa2:	d45b      	bmi.n	8002b5c <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4a3a      	ldr	r2, [pc, #232]	; (8002b90 <HAL_RCC_ClockConfig+0x114>)
 8002aa6:	6813      	ldr	r3, [r2, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	429e      	cmp	r6, r3
 8002aae:	d35d      	bcc.n	8002b6c <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	f011 0f04 	tst.w	r1, #4
 8002ab4:	4d37      	ldr	r5, [pc, #220]	; (8002b94 <HAL_RCC_ClockConfig+0x118>)
 8002ab6:	d164      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	070b      	lsls	r3, r1, #28
 8002aba:	d506      	bpl.n	8002aca <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002abc:	68ab      	ldr	r3, [r5, #8]
 8002abe:	6922      	ldr	r2, [r4, #16]
 8002ac0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ac4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ac8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aca:	f7ff fd5d 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002ace:	68ab      	ldr	r3, [r5, #8]
 8002ad0:	4a31      	ldr	r2, [pc, #196]	; (8002b98 <HAL_RCC_ClockConfig+0x11c>)
 8002ad2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	40d8      	lsrs	r0, r3
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_RCC_ClockConfig+0x120>)
 8002ae4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe bd70 	b.w	80015cc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aec:	6813      	ldr	r3, [r2, #0]
 8002aee:	f023 0307 	bic.w	r3, r3, #7
 8002af2:	430b      	orrs	r3, r1
 8002af4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	6813      	ldr	r3, [r2, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4299      	cmp	r1, r3
 8002afe:	d1c2      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xa>
 8002b00:	e7ca      	b.n	8002a98 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b02:	6862      	ldr	r2, [r4, #4]
 8002b04:	4d23      	ldr	r5, [pc, #140]	; (8002b94 <HAL_RCC_ClockConfig+0x118>)
 8002b06:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b08:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0a:	d11b      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b10:	d0b9      	beq.n	8002a86 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b12:	68ab      	ldr	r3, [r5, #8]
 8002b14:	f023 0303 	bic.w	r3, r3, #3
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fd86 	bl	800162c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002b24:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	68ab      	ldr	r3, [r5, #8]
 8002b28:	6862      	ldr	r2, [r4, #4]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b32:	d0b4      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fd7a 	bl	800162c <HAL_GetTick>
 8002b38:	1bc0      	subs	r0, r0, r7
 8002b3a:	4540      	cmp	r0, r8
 8002b3c:	d9f3      	bls.n	8002b26 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8002b3e:	2003      	movs	r0, #3
}
 8002b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b44:	2a02      	cmp	r2, #2
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b4c:	e7e0      	b.n	8002b10 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b4e:	b912      	cbnz	r2, 8002b56 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b50:	f013 0f02 	tst.w	r3, #2
 8002b54:	e7dc      	b.n	8002b10 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b56:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b5a:	e7d9      	b.n	8002b10 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <HAL_RCC_ClockConfig+0x118>)
 8002b5e:	68a0      	ldr	r0, [r4, #8]
 8002b60:	6893      	ldr	r3, [r2, #8]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b66:	4303      	orrs	r3, r0
 8002b68:	6093      	str	r3, [r2, #8]
 8002b6a:	e79b      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	f023 0307 	bic.w	r3, r3, #7
 8002b72:	4333      	orrs	r3, r6
 8002b74:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	6813      	ldr	r3, [r2, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	429e      	cmp	r6, r3
 8002b7e:	d182      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xa>
 8002b80:	e796      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b82:	68ab      	ldr	r3, [r5, #8]
 8002b84:	68e2      	ldr	r2, [r4, #12]
 8002b86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60ab      	str	r3, [r5, #8]
 8002b8e:	e793      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
 8002b90:	40022000 	.word	0x40022000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	080069a8 	.word	0x080069a8
 8002b9c:	20000094 	.word	0x20000094

08002ba0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ba2:	4a06      	ldr	r2, [pc, #24]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bae:	6810      	ldr	r0, [r2, #0]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
}
 8002bb4:	40d8      	lsrs	r0, r3
 8002bb6:	4770      	bx	lr
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	080069b8 	.word	0x080069b8
 8002bc0:	20000094 	.word	0x20000094

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x18>)
 8002bc6:	4a06      	ldr	r2, [pc, #24]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd2:	6810      	ldr	r0, [r2, #0]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
}
 8002bd8:	40d8      	lsrs	r0, r3
 8002bda:	4770      	bx	lr
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	080069b8 	.word	0x080069b8
 8002be4:	20000094 	.word	0x20000094

08002be8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bea:	4b45      	ldr	r3, [pc, #276]	; (8002d00 <RCCEx_PLLSAI1_Config+0x118>)
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	f012 0f03 	tst.w	r2, #3
{
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	460e      	mov	r6, r1
 8002bf6:	461c      	mov	r4, r3
 8002bf8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bfa:	d02a      	beq.n	8002c52 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	f002 0203 	and.w	r2, r2, #3
 8002c02:	4282      	cmp	r2, r0
 8002c04:	d13c      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002c06:	2a00      	cmp	r2, #0
 8002c08:	d03a      	beq.n	8002c80 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c0a:	68db      	ldr	r3, [r3, #12]
       ||
 8002c0c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c0e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c12:	3301      	adds	r3, #1
       ||
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d133      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c1e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c20:	f7fe fd04 	bl	800162c <HAL_GetTick>
 8002c24:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	011a      	lsls	r2, r3, #4
 8002c2a:	d432      	bmi.n	8002c92 <RCCEx_PLLSAI1_Config+0xaa>
 8002c2c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c2e:	2e00      	cmp	r6, #0
 8002c30:	d036      	beq.n	8002ca0 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c32:	2e01      	cmp	r6, #1
 8002c34:	d150      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c36:	6922      	ldr	r2, [r4, #16]
 8002c38:	6928      	ldr	r0, [r5, #16]
 8002c3a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002c3e:	0840      	lsrs	r0, r0, #1
 8002c40:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002c44:	3801      	subs	r0, #1
 8002c46:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002c4a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002c4e:	6122      	str	r2, [r4, #16]
 8002c50:	e032      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002c52:	2802      	cmp	r0, #2
 8002c54:	d010      	beq.n	8002c78 <RCCEx_PLLSAI1_Config+0x90>
 8002c56:	2803      	cmp	r0, #3
 8002c58:	d014      	beq.n	8002c84 <RCCEx_PLLSAI1_Config+0x9c>
 8002c5a:	2801      	cmp	r0, #1
 8002c5c:	d110      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	079f      	lsls	r7, r3, #30
 8002c62:	d538      	bpl.n	8002cd6 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c64:	68e3      	ldr	r3, [r4, #12]
 8002c66:	686a      	ldr	r2, [r5, #4]
 8002c68:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002c6c:	3a01      	subs	r2, #1
 8002c6e:	4318      	orrs	r0, r3
 8002c70:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002c74:	60e0      	str	r0, [r4, #12]
 8002c76:	e7cf      	b.n	8002c18 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c7e:	d1f1      	bne.n	8002c64 <RCCEx_PLLSAI1_Config+0x7c>
 8002c80:	2001      	movs	r0, #1
 8002c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	0391      	lsls	r1, r2, #14
 8002c88:	d4ec      	bmi.n	8002c64 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002c90:	e7f5      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c92:	f7fe fccb 	bl	800162c <HAL_GetTick>
 8002c96:	1bc0      	subs	r0, r0, r7
 8002c98:	2802      	cmp	r0, #2
 8002c9a:	d9c4      	bls.n	8002c26 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002c9c:	2003      	movs	r0, #3
 8002c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca0:	6921      	ldr	r1, [r4, #16]
 8002ca2:	68eb      	ldr	r3, [r5, #12]
 8002ca4:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002ca8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002cac:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002cb6:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cbe:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fcb4 	bl	800162c <HAL_GetTick>
 8002cc4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	d513      	bpl.n	8002cf4 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ccc:	6923      	ldr	r3, [r4, #16]
 8002cce:	69aa      	ldr	r2, [r5, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	6123      	str	r3, [r4, #16]
 8002cd4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	6968      	ldr	r0, [r5, #20]
 8002cdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ce0:	0840      	lsrs	r0, r0, #1
 8002ce2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ce6:	3801      	subs	r0, #1
 8002ce8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002cec:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002cf0:	6123      	str	r3, [r4, #16]
 8002cf2:	e7e1      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf4:	f7fe fc9a 	bl	800162c <HAL_GetTick>
 8002cf8:	1b80      	subs	r0, r0, r6
 8002cfa:	2802      	cmp	r0, #2
 8002cfc:	d9e3      	bls.n	8002cc6 <RCCEx_PLLSAI1_Config+0xde>
 8002cfe:	e7cd      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0xb4>
 8002d00:	40021000 	.word	0x40021000

08002d04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <RCCEx_PLLSAI2_Config+0xf8>)
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	f012 0f03 	tst.w	r2, #3
{
 8002d0e:	4605      	mov	r5, r0
 8002d10:	460e      	mov	r6, r1
 8002d12:	461c      	mov	r4, r3
 8002d14:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d16:	d028      	beq.n	8002d6a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	4282      	cmp	r2, r0
 8002d20:	d13a      	bne.n	8002d98 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d038      	beq.n	8002d98 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d26:	68db      	ldr	r3, [r3, #12]
       ||
 8002d28:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d2a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d2e:	3301      	adds	r3, #1
       ||
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d131      	bne.n	8002d98 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3c:	f7fe fc76 	bl	800162c <HAL_GetTick>
 8002d40:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	d430      	bmi.n	8002daa <RCCEx_PLLSAI2_Config+0xa6>
 8002d48:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	d034      	beq.n	8002db8 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d4e:	6963      	ldr	r3, [r4, #20]
 8002d50:	6929      	ldr	r1, [r5, #16]
 8002d52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d56:	0849      	lsrs	r1, r1, #1
 8002d58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d5c:	3901      	subs	r1, #1
 8002d5e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002d62:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002d66:	6163      	str	r3, [r4, #20]
 8002d68:	e032      	b.n	8002dd0 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8002d6a:	2802      	cmp	r0, #2
 8002d6c:	d010      	beq.n	8002d90 <RCCEx_PLLSAI2_Config+0x8c>
 8002d6e:	2803      	cmp	r0, #3
 8002d70:	d014      	beq.n	8002d9c <RCCEx_PLLSAI2_Config+0x98>
 8002d72:	2801      	cmp	r0, #1
 8002d74:	d110      	bne.n	8002d98 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	079f      	lsls	r7, r3, #30
 8002d7a:	d538      	bpl.n	8002dee <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d7c:	68e3      	ldr	r3, [r4, #12]
 8002d7e:	686a      	ldr	r2, [r5, #4]
 8002d80:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002d84:	3a01      	subs	r2, #1
 8002d86:	4318      	orrs	r0, r3
 8002d88:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002d8c:	60e0      	str	r0, [r4, #12]
 8002d8e:	e7d1      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d96:	d1f1      	bne.n	8002d7c <RCCEx_PLLSAI2_Config+0x78>
 8002d98:	2001      	movs	r0, #1
 8002d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	0391      	lsls	r1, r2, #14
 8002da0:	d4ec      	bmi.n	8002d7c <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002da8:	e7f5      	b.n	8002d96 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002daa:	f7fe fc3f 	bl	800162c <HAL_GetTick>
 8002dae:	1bc0      	subs	r0, r0, r7
 8002db0:	2802      	cmp	r0, #2
 8002db2:	d9c6      	bls.n	8002d42 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002db4:	2003      	movs	r0, #3
 8002db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002db8:	6962      	ldr	r2, [r4, #20]
 8002dba:	68eb      	ldr	r3, [r5, #12]
 8002dbc:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002dc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002dc4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002dce:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fc28 	bl	800162c <HAL_GetTick>
 8002ddc:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	d505      	bpl.n	8002df0 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002de4:	6963      	ldr	r3, [r4, #20]
 8002de6:	696a      	ldr	r2, [r5, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	6163      	str	r3, [r4, #20]
 8002dec:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df0:	f7fe fc1c 	bl	800162c <HAL_GetTick>
 8002df4:	1b80      	subs	r0, r0, r6
 8002df6:	2802      	cmp	r0, #2
 8002df8:	d9f1      	bls.n	8002dde <RCCEx_PLLSAI2_Config+0xda>
 8002dfa:	e7db      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0xb0>
 8002dfc:	40021000 	.word	0x40021000

08002e00 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002e00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e04:	6806      	ldr	r6, [r0, #0]
 8002e06:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002e0a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e0c:	d024      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e0e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002e10:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002e14:	d02c      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002e16:	d802      	bhi.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e18:	b1c1      	cbz	r1, 8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002e1a:	2601      	movs	r6, #1
 8002e1c:	e01c      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e1e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002e22:	d00d      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e24:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002e28:	d1f7      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e2a:	4a4d      	ldr	r2, [pc, #308]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002e2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e32:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e36:	430b      	orrs	r3, r1
 8002e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002e3c:	2600      	movs	r6, #0
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e40:	4a47      	ldr	r2, [pc, #284]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e42:	68d3      	ldr	r3, [r2, #12]
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	60d3      	str	r3, [r2, #12]
      break;
 8002e4a:	e7ee      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e4c:	3004      	adds	r0, #4
 8002e4e:	f7ff fecb 	bl	8002be8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e52:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002e54:	2800      	cmp	r0, #0
 8002e56:	d0e8      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	04d8      	lsls	r0, r3, #19
 8002e5c:	d506      	bpl.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002e5e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002e60:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002e64:	d074      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002e66:	d808      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e68:	b1a9      	cbz	r1, 8002e96 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002e6a:	2601      	movs	r6, #1
 8002e6c:	4635      	mov	r5, r6
 8002e6e:	e021      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e70:	2100      	movs	r1, #0
 8002e72:	3020      	adds	r0, #32
 8002e74:	f7ff ff46 	bl	8002d04 <RCCEx_PLLSAI2_Config>
 8002e78:	e7eb      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002e7a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002e7e:	d004      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002e80:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002e84:	d1f1      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002e86:	4635      	mov	r5, r6
 8002e88:	e009      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e8a:	4a35      	ldr	r2, [pc, #212]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8c:	68d3      	ldr	r3, [r2, #12]
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e92:	60d3      	str	r3, [r2, #12]
 8002e94:	e7f7      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e96:	1d20      	adds	r0, r4, #4
 8002e98:	f7ff fea6 	bl	8002be8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e9c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002e9e:	2d00      	cmp	r5, #0
 8002ea0:	d15c      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ea2:	4a2f      	ldr	r2, [pc, #188]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002ea6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002eaa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	0399      	lsls	r1, r3, #14
 8002eb8:	f140 814f 	bpl.w	800315a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ebc:	4f28      	ldr	r7, [pc, #160]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec0:	00da      	lsls	r2, r3, #3
 8002ec2:	f140 8176 	bpl.w	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eca:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002f64 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002ece:	f8d9 3000 	ldr.w	r3, [r9]
 8002ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002eda:	f7fe fba7 	bl	800162c <HAL_GetTick>
 8002ede:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ee0:	f8d9 3000 	ldr.w	r3, [r9]
 8002ee4:	05db      	lsls	r3, r3, #23
 8002ee6:	d53f      	bpl.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002ee8:	2d00      	cmp	r5, #0
 8002eea:	d144      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ef0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002ef4:	d015      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002ef6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d011      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f02:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002f06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f0e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f22:	07d8      	lsls	r0, r3, #31
 8002f24:	d509      	bpl.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002f26:	f7fe fb81 	bl	800162c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002f2e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f34:	0799      	lsls	r1, r3, #30
 8002f36:	f140 8109 	bpl.w	800314c <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f3e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f4c:	4635      	mov	r5, r6
 8002f4e:	e012      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f50:	2100      	movs	r1, #0
 8002f52:	f104 0020 	add.w	r0, r4, #32
 8002f56:	f7ff fed5 	bl	8002d04 <RCCEx_PLLSAI2_Config>
 8002f5a:	e79f      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002f5c:	462e      	mov	r6, r5
 8002f5e:	e7a9      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f68:	f7fe fb60 	bl	800162c <HAL_GetTick>
 8002f6c:	eba0 000a 	sub.w	r0, r0, sl
 8002f70:	2802      	cmp	r0, #2
 8002f72:	d9b5      	bls.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002f74:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002f76:	f1b8 0f00 	cmp.w	r8, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f82:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	07da      	lsls	r2, r3, #31
 8002f88:	d508      	bpl.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f8a:	4990      	ldr	r1, [pc, #576]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002f8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f92:	f022 0203 	bic.w	r2, r2, #3
 8002f96:	4302      	orrs	r2, r0
 8002f98:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f9c:	079f      	lsls	r7, r3, #30
 8002f9e:	d508      	bpl.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fa0:	498a      	ldr	r1, [pc, #552]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fa2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002fa4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002fa8:	f022 020c 	bic.w	r2, r2, #12
 8002fac:	4302      	orrs	r2, r0
 8002fae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fb2:	075e      	lsls	r6, r3, #29
 8002fb4:	d508      	bpl.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fb6:	4985      	ldr	r1, [pc, #532]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fb8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002fba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002fbe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002fc2:	4302      	orrs	r2, r0
 8002fc4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc8:	0718      	lsls	r0, r3, #28
 8002fca:	d508      	bpl.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fcc:	497f      	ldr	r1, [pc, #508]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002fd0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002fd4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002fd8:	4302      	orrs	r2, r0
 8002fda:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fde:	06d9      	lsls	r1, r3, #27
 8002fe0:	d508      	bpl.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fe2:	497a      	ldr	r1, [pc, #488]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fe4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002fe6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002fea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fee:	4302      	orrs	r2, r0
 8002ff0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff4:	069a      	lsls	r2, r3, #26
 8002ff6:	d508      	bpl.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ff8:	4974      	ldr	r1, [pc, #464]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ffa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002ffc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003000:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003004:	4302      	orrs	r2, r0
 8003006:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800300a:	059f      	lsls	r7, r3, #22
 800300c:	d508      	bpl.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300e:	496f      	ldr	r1, [pc, #444]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003010:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003012:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003016:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800301a:	4302      	orrs	r2, r0
 800301c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003020:	055e      	lsls	r6, r3, #21
 8003022:	d508      	bpl.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003024:	4969      	ldr	r1, [pc, #420]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003026:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003028:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800302c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003030:	4302      	orrs	r2, r0
 8003032:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003036:	0658      	lsls	r0, r3, #25
 8003038:	d508      	bpl.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800303a:	4964      	ldr	r1, [pc, #400]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800303c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800303e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003042:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003046:	4302      	orrs	r2, r0
 8003048:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800304c:	0619      	lsls	r1, r3, #24
 800304e:	d508      	bpl.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003050:	495e      	ldr	r1, [pc, #376]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003054:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003058:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800305c:	4302      	orrs	r2, r0
 800305e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003062:	05da      	lsls	r2, r3, #23
 8003064:	d508      	bpl.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003066:	4959      	ldr	r1, [pc, #356]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800306a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800306e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003072:	4302      	orrs	r2, r0
 8003074:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003078:	049b      	lsls	r3, r3, #18
 800307a:	d50f      	bpl.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800307c:	4a53      	ldr	r2, [pc, #332]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800307e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003080:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003084:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003088:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800308a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800308e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003092:	d164      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003094:	68d3      	ldr	r3, [r2, #12]
 8003096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800309a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	031f      	lsls	r7, r3, #12
 80030a0:	d50f      	bpl.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030a2:	4a4a      	ldr	r2, [pc, #296]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80030a4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80030a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030aa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80030ae:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030b0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030b8:	d15c      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ba:	68d3      	ldr	r3, [r2, #12]
 80030bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	035e      	lsls	r6, r3, #13
 80030c6:	d50f      	bpl.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030c8:	4a40      	ldr	r2, [pc, #256]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80030ca:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80030cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030d0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80030d4:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030d6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030de:	d154      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e0:	68d3      	ldr	r3, [r2, #12]
 80030e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030e6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	0458      	lsls	r0, r3, #17
 80030ec:	d512      	bpl.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030ee:	4937      	ldr	r1, [pc, #220]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80030f0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80030f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80030f6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80030fa:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030fc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003104:	d14c      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003106:	2102      	movs	r1, #2
 8003108:	1d20      	adds	r0, r4, #4
 800310a:	f7ff fd6d 	bl	8002be8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800310e:	2800      	cmp	r0, #0
 8003110:	bf18      	it	ne
 8003112:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003114:	6822      	ldr	r2, [r4, #0]
 8003116:	0411      	lsls	r1, r2, #16
 8003118:	d508      	bpl.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800311a:	492c      	ldr	r1, [pc, #176]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800311c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800311e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003126:	4303      	orrs	r3, r0
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800312c:	03d3      	lsls	r3, r2, #15
 800312e:	d509      	bpl.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003130:	4a26      	ldr	r2, [pc, #152]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003132:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003136:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800313a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800313e:	430b      	orrs	r3, r1
 8003140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003144:	4628      	mov	r0, r5
 8003146:	b002      	add	sp, #8
 8003148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fe fa6e 	bl	800162c <HAL_GetTick>
 8003150:	1b40      	subs	r0, r0, r5
 8003152:	4548      	cmp	r0, r9
 8003154:	f67f aeec 	bls.w	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003158:	e70c      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800315a:	4635      	mov	r5, r6
 800315c:	e712      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800315e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003162:	d19b      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003164:	2101      	movs	r1, #1
 8003166:	1d20      	adds	r0, r4, #4
 8003168:	f7ff fd3e 	bl	8002be8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800316c:	2800      	cmp	r0, #0
 800316e:	bf18      	it	ne
 8003170:	4605      	movne	r5, r0
 8003172:	e793      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003174:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003178:	d1a3      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800317a:	2101      	movs	r1, #1
 800317c:	1d20      	adds	r0, r4, #4
 800317e:	f7ff fd33 	bl	8002be8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003182:	2800      	cmp	r0, #0
 8003184:	bf18      	it	ne
 8003186:	4605      	movne	r5, r0
 8003188:	e79b      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800318a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800318e:	d1ab      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003190:	2101      	movs	r1, #1
 8003192:	1d20      	adds	r0, r4, #4
 8003194:	f7ff fd28 	bl	8002be8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003198:	2800      	cmp	r0, #0
 800319a:	bf18      	it	ne
 800319c:	4605      	movne	r5, r0
 800319e:	e7a3      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031a0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80031a4:	d1b6      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031a6:	2102      	movs	r1, #2
 80031a8:	f104 0020 	add.w	r0, r4, #32
 80031ac:	f7ff fdaa 	bl	8002d04 <RCCEx_PLLSAI2_Config>
 80031b0:	e7ad      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80031ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031c4:	f04f 0801 	mov.w	r8, #1
 80031c8:	e67f      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xca>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80031d0:	4a02      	ldr	r2, [pc, #8]	; (80031dc <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80031d2:	6813      	ldr	r3, [r2, #0]
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4770      	bx	lr
 80031dc:	40021000 	.word	0x40021000

080031e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031e2:	4604      	mov	r4, r0
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d04a      	beq.n	800327e <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ec:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80031f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031f4:	b91b      	cbnz	r3, 80031fe <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031f6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031fa:	f001 f955 	bl	80044a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031fe:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003200:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003202:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003206:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003208:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800320a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800320e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003212:	600b      	str	r3, [r1, #0]
 8003214:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003218:	d92e      	bls.n	8003278 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800321a:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800321c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003220:	bf18      	it	ne
 8003222:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003224:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003226:	b92b      	cbnz	r3, 8003234 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003228:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800322c:	bf8c      	ite	hi
 800322e:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003230:	2301      	movls	r3, #1
 8003232:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003234:	68a6      	ldr	r6, [r4, #8]
 8003236:	6863      	ldr	r3, [r4, #4]
 8003238:	69a5      	ldr	r5, [r4, #24]
 800323a:	4333      	orrs	r3, r6
 800323c:	6926      	ldr	r6, [r4, #16]
 800323e:	4333      	orrs	r3, r6
 8003240:	6966      	ldr	r6, [r4, #20]
 8003242:	4333      	orrs	r3, r6
 8003244:	69e6      	ldr	r6, [r4, #28]
 8003246:	4333      	orrs	r3, r6
 8003248:	6a26      	ldr	r6, [r4, #32]
 800324a:	4333      	orrs	r3, r6
 800324c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800324e:	4333      	orrs	r3, r6
 8003250:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8003254:	4333      	orrs	r3, r6
 8003256:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800325a:	431a      	orrs	r2, r3
 800325c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800325e:	0c2d      	lsrs	r5, r5, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	f005 0504 	and.w	r5, r5, #4
 8003266:	432a      	orrs	r2, r5
 8003268:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800326a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800326c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800326e:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003270:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003272:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8003276:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003278:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800327c:	e7d0      	b.n	8003220 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800327e:	2001      	movs	r0, #1
}
 8003280:	bd70      	pop	{r4, r5, r6, pc}
	...

08003284 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003284:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8003286:	480a      	ldr	r0, [pc, #40]	; (80032b0 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8003290:	6899      	ldr	r1, [r3, #8]
 8003292:	4001      	ands	r1, r0
 8003294:	2906      	cmp	r1, #6
 8003296:	d008      	beq.n	80032aa <HAL_TIM_Base_Start_IT+0x26>
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	4002      	ands	r2, r0
 800329c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80032a0:	bf1e      	ittt	ne
 80032a2:	681a      	ldrne	r2, [r3, #0]
 80032a4:	f042 0201 	orrne.w	r2, r2, #1
 80032a8:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80032aa:	2000      	movs	r0, #0
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	00010007 	.word	0x00010007

080032b4 <HAL_TIM_OC_DelayElapsedCallback>:
 80032b4:	4770      	bx	lr

080032b6 <HAL_TIM_IC_CaptureCallback>:
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80032b8:	4770      	bx	lr

080032ba <HAL_TIM_TriggerCallback>:
 80032ba:	4770      	bx	lr

080032bc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032bc:	6803      	ldr	r3, [r0, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	0791      	lsls	r1, r2, #30
{
 80032c2:	b510      	push	{r4, lr}
 80032c4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032c6:	d50f      	bpl.n	80032e8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	0792      	lsls	r2, r2, #30
 80032cc:	d50c      	bpl.n	80032e8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032ce:	f06f 0202 	mvn.w	r2, #2
 80032d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032d6:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d8:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032da:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032dc:	f000 8085 	beq.w	80033ea <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e0:	f7ff ffe9 	bl	80032b6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e4:	2300      	movs	r3, #0
 80032e6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	0752      	lsls	r2, r2, #29
 80032ee:	d510      	bpl.n	8003312 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	0750      	lsls	r0, r2, #29
 80032f4:	d50d      	bpl.n	8003312 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032f6:	f06f 0204 	mvn.w	r2, #4
 80032fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032fc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032fe:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003300:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003304:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003308:	d075      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	f7ff ffd4 	bl	80032b6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	2300      	movs	r3, #0
 8003310:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	0711      	lsls	r1, r2, #28
 8003318:	d50f      	bpl.n	800333a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	0712      	lsls	r2, r2, #28
 800331e:	d50c      	bpl.n	800333a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003320:	f06f 0208 	mvn.w	r2, #8
 8003324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003326:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003328:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800332a:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800332c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003330:	d067      	beq.n	8003402 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003332:	f7ff ffc0 	bl	80032b6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	2300      	movs	r3, #0
 8003338:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	06d0      	lsls	r0, r2, #27
 8003340:	d510      	bpl.n	8003364 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	06d1      	lsls	r1, r2, #27
 8003346:	d50d      	bpl.n	8003364 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003348:	f06f 0210 	mvn.w	r2, #16
 800334c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800334e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003350:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003352:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003356:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003358:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800335a:	d058      	beq.n	800340e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800335c:	f7ff ffab 	bl	80032b6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003360:	2300      	movs	r3, #0
 8003362:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	07d2      	lsls	r2, r2, #31
 800336a:	d508      	bpl.n	800337e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	07d0      	lsls	r0, r2, #31
 8003370:	d505      	bpl.n	800337e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003372:	f06f 0201 	mvn.w	r2, #1
 8003376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003378:	4620      	mov	r0, r4
 800337a:	f000 ffc5 	bl	8004308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	0611      	lsls	r1, r2, #24
 8003384:	d508      	bpl.n	8003398 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	0612      	lsls	r2, r2, #24
 800338a:	d505      	bpl.n	8003398 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800338c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003392:	4620      	mov	r0, r4
 8003394:	f000 f8ef 	bl	8003576 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	05d0      	lsls	r0, r2, #23
 800339e:	d508      	bpl.n	80033b2 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	0611      	lsls	r1, r2, #24
 80033a4:	d505      	bpl.n	80033b2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033ac:	4620      	mov	r0, r4
 80033ae:	f000 f8e3 	bl	8003578 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	0652      	lsls	r2, r2, #25
 80033b8:	d508      	bpl.n	80033cc <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	0650      	lsls	r0, r2, #25
 80033be:	d505      	bpl.n	80033cc <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033c6:	4620      	mov	r0, r4
 80033c8:	f7ff ff77 	bl	80032ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	0691      	lsls	r1, r2, #26
 80033d2:	d522      	bpl.n	800341a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	0692      	lsls	r2, r2, #26
 80033d8:	d51f      	bpl.n	800341a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033da:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 80033de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033e0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80033e6:	f000 b8c5 	b.w	8003574 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	f7ff ff63 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7ff ff62 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80033f4:	e776      	b.n	80032e4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	f7ff ff5d 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fa:	4620      	mov	r0, r4
 80033fc:	f7ff ff5c 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003400:	e785      	b.n	800330e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	f7ff ff57 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003406:	4620      	mov	r0, r4
 8003408:	f7ff ff56 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
 800340c:	e793      	b.n	8003336 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	f7ff ff51 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003412:	4620      	mov	r0, r4
 8003414:	f7ff ff50 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003418:	e7a2      	b.n	8003360 <HAL_TIM_IRQHandler+0xa4>
 800341a:	bd10      	pop	{r4, pc}

0800341c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800341c:	4a30      	ldr	r2, [pc, #192]	; (80034e0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800341e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003420:	4290      	cmp	r0, r2
 8003422:	d012      	beq.n	800344a <TIM_Base_SetConfig+0x2e>
 8003424:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003428:	d00f      	beq.n	800344a <TIM_Base_SetConfig+0x2e>
 800342a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800342e:	4290      	cmp	r0, r2
 8003430:	d00b      	beq.n	800344a <TIM_Base_SetConfig+0x2e>
 8003432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003436:	4290      	cmp	r0, r2
 8003438:	d007      	beq.n	800344a <TIM_Base_SetConfig+0x2e>
 800343a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800343e:	4290      	cmp	r0, r2
 8003440:	d003      	beq.n	800344a <TIM_Base_SetConfig+0x2e>
 8003442:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003446:	4290      	cmp	r0, r2
 8003448:	d119      	bne.n	800347e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800344a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800344c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003450:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003452:	4a23      	ldr	r2, [pc, #140]	; (80034e0 <TIM_Base_SetConfig+0xc4>)
 8003454:	4290      	cmp	r0, r2
 8003456:	d01d      	beq.n	8003494 <TIM_Base_SetConfig+0x78>
 8003458:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800345c:	d01a      	beq.n	8003494 <TIM_Base_SetConfig+0x78>
 800345e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003462:	4290      	cmp	r0, r2
 8003464:	d016      	beq.n	8003494 <TIM_Base_SetConfig+0x78>
 8003466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800346a:	4290      	cmp	r0, r2
 800346c:	d012      	beq.n	8003494 <TIM_Base_SetConfig+0x78>
 800346e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003472:	4290      	cmp	r0, r2
 8003474:	d00e      	beq.n	8003494 <TIM_Base_SetConfig+0x78>
 8003476:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800347a:	4290      	cmp	r0, r2
 800347c:	d00a      	beq.n	8003494 <TIM_Base_SetConfig+0x78>
 800347e:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <TIM_Base_SetConfig+0xc8>)
 8003480:	4290      	cmp	r0, r2
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0x78>
 8003484:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003488:	4290      	cmp	r0, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0x78>
 800348c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003490:	4290      	cmp	r0, r2
 8003492:	d103      	bne.n	800349c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003494:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800349c:	694a      	ldr	r2, [r1, #20]
 800349e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80034a4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a6:	688b      	ldr	r3, [r1, #8]
 80034a8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034aa:	680b      	ldr	r3, [r1, #0]
 80034ac:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <TIM_Base_SetConfig+0xc4>)
 80034b0:	4298      	cmp	r0, r3
 80034b2:	d00f      	beq.n	80034d4 <TIM_Base_SetConfig+0xb8>
 80034b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b8:	4298      	cmp	r0, r3
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0xb8>
 80034bc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80034c0:	4298      	cmp	r0, r3
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0xb8>
 80034c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034c8:	4298      	cmp	r0, r3
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0xb8>
 80034cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034d0:	4298      	cmp	r0, r3
 80034d2:	d101      	bne.n	80034d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d4:	690b      	ldr	r3, [r1, #16]
 80034d6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d8:	2301      	movs	r3, #1
 80034da:	6143      	str	r3, [r0, #20]
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40014000 	.word	0x40014000

080034e8 <HAL_TIM_Base_Init>:
{
 80034e8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80034ea:	4604      	mov	r4, r0
 80034ec:	b1a0      	cbz	r0, 8003518 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80034ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034f6:	b91b      	cbnz	r3, 8003500 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80034f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80034fc:	f001 f808 	bl	8004510 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	2302      	movs	r3, #2
 8003502:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003506:	6820      	ldr	r0, [r4, #0]
 8003508:	1d21      	adds	r1, r4, #4
 800350a:	f7ff ff87 	bl	800341c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800350e:	2301      	movs	r3, #1
 8003510:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003514:	2000      	movs	r0, #0
 8003516:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003518:	2001      	movs	r0, #1
}
 800351a:	bd10      	pop	{r4, pc}

0800351c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800351c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003520:	2b01      	cmp	r3, #1
{
 8003522:	b530      	push	{r4, r5, lr}
 8003524:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003528:	d01f      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800352a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800352c:	4d10      	ldr	r5, [pc, #64]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 800352e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003532:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8003534:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003536:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003538:	d003      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800353a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800353e:	42aa      	cmp	r2, r5
 8003540:	d103      	bne.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003542:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003544:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003548:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800354a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800354c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003552:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003554:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003558:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800355a:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800355c:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 800355e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003560:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003564:	2300      	movs	r3, #0
 8003566:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800356a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800356c:	bd30      	pop	{r4, r5, pc}
 800356e:	bf00      	nop
 8003570:	40012c00 	.word	0x40012c00

08003574 <HAL_TIMEx_CommutationCallback>:
 8003574:	4770      	bx	lr

08003576 <HAL_TIMEx_BreakCallback>:
 8003576:	4770      	bx	lr

08003578 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003578:	4770      	bx	lr
	...

0800357c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800357c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800357e:	69c1      	ldr	r1, [r0, #28]
{
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003584:	6883      	ldr	r3, [r0, #8]
 8003586:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003588:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800358a:	4303      	orrs	r3, r0
 800358c:	6960      	ldr	r0, [r4, #20]
 800358e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003590:	48ba      	ldr	r0, [pc, #744]	; (800387c <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003592:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003594:	4028      	ands	r0, r5
 8003596:	4303      	orrs	r3, r0
 8003598:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800359a:	6853      	ldr	r3, [r2, #4]
 800359c:	68e0      	ldr	r0, [r4, #12]
 800359e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035a2:	4303      	orrs	r3, r0
 80035a4:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035a6:	4bb6      	ldr	r3, [pc, #728]	; (8003880 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035a8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035aa:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035ac:	bf1c      	itt	ne
 80035ae:	6a23      	ldrne	r3, [r4, #32]
 80035b0:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035b2:	6893      	ldr	r3, [r2, #8]
 80035b4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035b8:	4303      	orrs	r3, r0
 80035ba:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035bc:	4bb1      	ldr	r3, [pc, #708]	; (8003884 <UART_SetConfig+0x308>)
 80035be:	429a      	cmp	r2, r3
 80035c0:	d119      	bne.n	80035f6 <UART_SetConfig+0x7a>
 80035c2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80035c6:	4ab0      	ldr	r2, [pc, #704]	; (8003888 <UART_SetConfig+0x30c>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80035d4:	5cd3      	ldrb	r3, [r2, r3]
 80035d6:	f040 8138 	bne.w	800384a <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 80035da:	2b08      	cmp	r3, #8
 80035dc:	f200 808f 	bhi.w	80036fe <UART_SetConfig+0x182>
 80035e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035e4:	00ca011a 	.word	0x00ca011a
 80035e8:	008d00f9 	.word	0x008d00f9
 80035ec:	008d0114 	.word	0x008d0114
 80035f0:	008d008d 	.word	0x008d008d
 80035f4:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035f6:	4ba5      	ldr	r3, [pc, #660]	; (800388c <UART_SetConfig+0x310>)
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d107      	bne.n	800360c <UART_SetConfig+0x90>
 80035fc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003600:	4aa3      	ldr	r2, [pc, #652]	; (8003890 <UART_SetConfig+0x314>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	e7e1      	b.n	80035d0 <UART_SetConfig+0x54>
 800360c:	4ba1      	ldr	r3, [pc, #644]	; (8003894 <UART_SetConfig+0x318>)
 800360e:	429a      	cmp	r2, r3
 8003610:	d123      	bne.n	800365a <UART_SetConfig+0xde>
 8003612:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800361e:	2b10      	cmp	r3, #16
 8003620:	f000 80f1 	beq.w	8003806 <UART_SetConfig+0x28a>
 8003624:	d80b      	bhi.n	800363e <UART_SetConfig+0xc2>
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80f3 	beq.w	8003812 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800362c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003630:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003634:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003638:	f000 80f8 	beq.w	800382c <UART_SetConfig+0x2b0>
 800363c:	e0a8      	b.n	8003790 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800363e:	2b20      	cmp	r3, #32
 8003640:	f000 80c6 	beq.w	80037d0 <UART_SetConfig+0x254>
 8003644:	2b30      	cmp	r3, #48	; 0x30
 8003646:	d1f1      	bne.n	800362c <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003648:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800364c:	f040 80b8 	bne.w	80037c0 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003650:	6860      	ldr	r0, [r4, #4]
 8003652:	0843      	lsrs	r3, r0, #1
 8003654:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003658:	e0c3      	b.n	80037e2 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800365a:	4b8f      	ldr	r3, [pc, #572]	; (8003898 <UART_SetConfig+0x31c>)
 800365c:	429a      	cmp	r2, r3
 800365e:	d11e      	bne.n	800369e <UART_SetConfig+0x122>
 8003660:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	f000 80bb 	beq.w	80037e8 <UART_SetConfig+0x26c>
 8003672:	d80a      	bhi.n	800368a <UART_SetConfig+0x10e>
 8003674:	b97b      	cbnz	r3, 8003696 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003676:	4b82      	ldr	r3, [pc, #520]	; (8003880 <UART_SetConfig+0x304>)
 8003678:	429a      	cmp	r2, r3
 800367a:	f040 80ca 	bne.w	8003812 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800367e:	f7ff fa8f 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
        break;
 8003682:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003684:	bbb0      	cbnz	r0, 80036f4 <UART_SetConfig+0x178>
 8003686:	4602      	mov	r2, r0
 8003688:	e03a      	b.n	8003700 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368a:	2b80      	cmp	r3, #128	; 0x80
 800368c:	f000 809d 	beq.w	80037ca <UART_SetConfig+0x24e>
 8003690:	2bc0      	cmp	r3, #192	; 0xc0
 8003692:	f000 80b0 	beq.w	80037f6 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003696:	4b7a      	ldr	r3, [pc, #488]	; (8003880 <UART_SetConfig+0x304>)
 8003698:	429a      	cmp	r2, r3
 800369a:	d1c7      	bne.n	800362c <UART_SetConfig+0xb0>
 800369c:	e02f      	b.n	80036fe <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800369e:	4b7f      	ldr	r3, [pc, #508]	; (800389c <UART_SetConfig+0x320>)
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d111      	bne.n	80036c8 <UART_SetConfig+0x14c>
 80036a4:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b4:	f000 8098 	beq.w	80037e8 <UART_SetConfig+0x26c>
 80036b8:	d9dc      	bls.n	8003674 <UART_SetConfig+0xf8>
 80036ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036be:	f000 8084 	beq.w	80037ca <UART_SetConfig+0x24e>
 80036c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c6:	e7e4      	b.n	8003692 <UART_SetConfig+0x116>
 80036c8:	4b6d      	ldr	r3, [pc, #436]	; (8003880 <UART_SetConfig+0x304>)
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d1ae      	bne.n	800362c <UART_SetConfig+0xb0>
 80036ce:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	f000 8083 	beq.w	80037e8 <UART_SetConfig+0x26c>
 80036e2:	d9c7      	bls.n	8003674 <UART_SetConfig+0xf8>
 80036e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e8:	d06f      	beq.n	80037ca <UART_SetConfig+0x24e>
 80036ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036ee:	e7d0      	b.n	8003692 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80036f0:	486b      	ldr	r0, [pc, #428]	; (80038a0 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80036f2:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80036f4:	6862      	ldr	r2, [r4, #4]
 80036f6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80036fa:	4281      	cmp	r1, r0
 80036fc:	d905      	bls.n	800370a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80036fe:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003704:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8003706:	4610      	mov	r0, r2
 8003708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800370a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800370e:	d8f6      	bhi.n	80036fe <UART_SetConfig+0x182>
        switch (clocksource)
 8003710:	2b08      	cmp	r3, #8
 8003712:	d82e      	bhi.n	8003772 <UART_SetConfig+0x1f6>
 8003714:	e8df f003 	tbb	[pc, r3]
 8003718:	2d1c2d05 	.word	0x2d1c2d05
 800371c:	2d2d2d24 	.word	0x2d2d2d24
 8003720:	27          	.byte	0x27
 8003721:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003722:	f7ff fa3d 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003726:	6862      	ldr	r2, [r4, #4]
 8003728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800372c:	0856      	lsrs	r6, r2, #1
 800372e:	2700      	movs	r7, #0
 8003730:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003734:	2300      	movs	r3, #0
 8003736:	4630      	mov	r0, r6
 8003738:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800373a:	f7fd fa31 	bl	8000ba0 <__aeabi_uldivmod>
            break;
 800373e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003740:	4b58      	ldr	r3, [pc, #352]	; (80038a4 <UART_SetConfig+0x328>)
 8003742:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003746:	4299      	cmp	r1, r3
 8003748:	d8d9      	bhi.n	80036fe <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	60d8      	str	r0, [r3, #12]
 800374e:	e7d7      	b.n	8003700 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003750:	4855      	ldr	r0, [pc, #340]	; (80038a8 <UART_SetConfig+0x32c>)
 8003752:	0855      	lsrs	r5, r2, #1
 8003754:	2300      	movs	r3, #0
 8003756:	2100      	movs	r1, #0
 8003758:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800375a:	f141 0100 	adc.w	r1, r1, #0
 800375e:	e7ec      	b.n	800373a <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003760:	f7fe ff12 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8003764:	e7df      	b.n	8003726 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003766:	0850      	lsrs	r0, r2, #1
 8003768:	2100      	movs	r1, #0
 800376a:	2300      	movs	r3, #0
 800376c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003770:	e7f3      	b.n	800375a <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8003772:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003774:	2000      	movs	r0, #0
 8003776:	e7e3      	b.n	8003740 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003778:	f7ff fa24 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 800377c:	e04e      	b.n	800381c <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800377e:	f7ff fa0f 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003782:	6862      	ldr	r2, [r4, #4]
 8003784:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003788:	fbb3 f3f2 	udiv	r3, r3, r2
 800378c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800378e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003790:	f1a3 0010 	sub.w	r0, r3, #16
 8003794:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003798:	4288      	cmp	r0, r1
 800379a:	d8b0      	bhi.n	80036fe <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 800379c:	6821      	ldr	r1, [r4, #0]
 800379e:	60cb      	str	r3, [r1, #12]
 80037a0:	e7ae      	b.n	8003700 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037a2:	f7ff fa0f 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 80037a6:	e7ec      	b.n	8003782 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80037a8:	6860      	ldr	r0, [r4, #4]
 80037aa:	0843      	lsrs	r3, r0, #1
 80037ac:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80037b0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80037b8:	e7e8      	b.n	800378c <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037ba:	f7fe fee5 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 80037be:	e7e0      	b.n	8003782 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037c0:	6860      	ldr	r0, [r4, #4]
 80037c2:	0843      	lsrs	r3, r0, #1
 80037c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80037c8:	e7f4      	b.n	80037b4 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ca:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <UART_SetConfig+0x304>)
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d08f      	beq.n	80036f0 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80037d4:	d1e8      	bne.n	80037a8 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037d6:	6860      	ldr	r0, [r4, #4]
 80037d8:	0843      	lsrs	r3, r0, #1
 80037da:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80037de:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80037e6:	e01f      	b.n	8003828 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <UART_SetConfig+0x304>)
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d10b      	bne.n	8003806 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80037ee:	f7fe fecb 	bl	8002588 <HAL_RCC_GetSysClockFreq>
        break;
 80037f2:	2304      	movs	r3, #4
 80037f4:	e746      	b.n	8003684 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037f6:	4b22      	ldr	r3, [pc, #136]	; (8003880 <UART_SetConfig+0x304>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f47f af25 	bne.w	8003648 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80037fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8003802:	2308      	movs	r3, #8
 8003804:	e776      	b.n	80036f4 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003806:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800380a:	d1d6      	bne.n	80037ba <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800380c:	f7fe febc 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8003810:	e004      	b.n	800381c <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003812:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003816:	d1b2      	bne.n	800377e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003818:	f7ff f9c2 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800381c:	6861      	ldr	r1, [r4, #4]
 800381e:	084a      	lsrs	r2, r1, #1
 8003820:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003824:	fbb3 f3f1 	udiv	r3, r3, r1
 8003828:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800382a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382c:	f1a3 0010 	sub.w	r0, r3, #16
 8003830:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003834:	4288      	cmp	r0, r1
 8003836:	f63f af62 	bhi.w	80036fe <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 800383a:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800383e:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003840:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003844:	430b      	orrs	r3, r1
 8003846:	60c3      	str	r3, [r0, #12]
 8003848:	e75a      	b.n	8003700 <UART_SetConfig+0x184>
    switch (clocksource)
 800384a:	2b08      	cmp	r3, #8
 800384c:	f63f af57 	bhi.w	80036fe <UART_SetConfig+0x182>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0x2dc>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	0800377f 	.word	0x0800377f
 800385c:	080037a3 	.word	0x080037a3
 8003860:	080037a9 	.word	0x080037a9
 8003864:	080036ff 	.word	0x080036ff
 8003868:	080037bb 	.word	0x080037bb
 800386c:	080036ff 	.word	0x080036ff
 8003870:	080036ff 	.word	0x080036ff
 8003874:	080036ff 	.word	0x080036ff
 8003878:	080037c1 	.word	0x080037c1
 800387c:	efff69f3 	.word	0xefff69f3
 8003880:	40008000 	.word	0x40008000
 8003884:	40013800 	.word	0x40013800
 8003888:	08006940 	.word	0x08006940
 800388c:	40004400 	.word	0x40004400
 8003890:	08006944 	.word	0x08006944
 8003894:	40004800 	.word	0x40004800
 8003898:	40004c00 	.word	0x40004c00
 800389c:	40005000 	.word	0x40005000
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	000ffcff 	.word	0x000ffcff
 80038a8:	f4240000 	.word	0xf4240000

080038ac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038ae:	07da      	lsls	r2, r3, #31
{
 80038b0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038b2:	d506      	bpl.n	80038c2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b4:	6801      	ldr	r1, [r0, #0]
 80038b6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80038b8:	684a      	ldr	r2, [r1, #4]
 80038ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80038be:	4322      	orrs	r2, r4
 80038c0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c2:	079c      	lsls	r4, r3, #30
 80038c4:	d506      	bpl.n	80038d4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038c6:	6801      	ldr	r1, [r0, #0]
 80038c8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80038ca:	684a      	ldr	r2, [r1, #4]
 80038cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038d0:	4322      	orrs	r2, r4
 80038d2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038d4:	0759      	lsls	r1, r3, #29
 80038d6:	d506      	bpl.n	80038e6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038d8:	6801      	ldr	r1, [r0, #0]
 80038da:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80038dc:	684a      	ldr	r2, [r1, #4]
 80038de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038e2:	4322      	orrs	r2, r4
 80038e4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e6:	071a      	lsls	r2, r3, #28
 80038e8:	d506      	bpl.n	80038f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ea:	6801      	ldr	r1, [r0, #0]
 80038ec:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80038ee:	684a      	ldr	r2, [r1, #4]
 80038f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f4:	4322      	orrs	r2, r4
 80038f6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038f8:	06dc      	lsls	r4, r3, #27
 80038fa:	d506      	bpl.n	800390a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038fc:	6801      	ldr	r1, [r0, #0]
 80038fe:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003900:	688a      	ldr	r2, [r1, #8]
 8003902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003906:	4322      	orrs	r2, r4
 8003908:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800390a:	0699      	lsls	r1, r3, #26
 800390c:	d506      	bpl.n	800391c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390e:	6801      	ldr	r1, [r0, #0]
 8003910:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003912:	688a      	ldr	r2, [r1, #8]
 8003914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003918:	4322      	orrs	r2, r4
 800391a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800391c:	065a      	lsls	r2, r3, #25
 800391e:	d50f      	bpl.n	8003940 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003920:	6801      	ldr	r1, [r0, #0]
 8003922:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003924:	684a      	ldr	r2, [r1, #4]
 8003926:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800392a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003930:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003932:	d105      	bne.n	8003940 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003934:	684a      	ldr	r2, [r1, #4]
 8003936:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003938:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800393c:	4322      	orrs	r2, r4
 800393e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	d506      	bpl.n	8003952 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003944:	6802      	ldr	r2, [r0, #0]
 8003946:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003948:	6853      	ldr	r3, [r2, #4]
 800394a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800394e:	430b      	orrs	r3, r1
 8003950:	6053      	str	r3, [r2, #4]
 8003952:	bd10      	pop	{r4, pc}

08003954 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003958:	9d06      	ldr	r5, [sp, #24]
 800395a:	4604      	mov	r4, r0
 800395c:	460f      	mov	r7, r1
 800395e:	4616      	mov	r6, r2
 8003960:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003962:	6821      	ldr	r1, [r4, #0]
 8003964:	69ca      	ldr	r2, [r1, #28]
 8003966:	ea37 0302 	bics.w	r3, r7, r2
 800396a:	bf0c      	ite	eq
 800396c:	2201      	moveq	r2, #1
 800396e:	2200      	movne	r2, #0
 8003970:	42b2      	cmp	r2, r6
 8003972:	d002      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003974:	2000      	movs	r0, #0
}
 8003976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800397a:	1c6b      	adds	r3, r5, #1
 800397c:	d0f2      	beq.n	8003964 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800397e:	b99d      	cbnz	r5, 80039a8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003988:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003992:	2320      	movs	r3, #32
 8003994:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003998:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 800399c:	2300      	movs	r3, #0
 800399e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80039a2:	2003      	movs	r0, #3
 80039a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039a8:	f7fd fe40 	bl	800162c <HAL_GetTick>
 80039ac:	eba0 0008 	sub.w	r0, r0, r8
 80039b0:	4285      	cmp	r5, r0
 80039b2:	d2d6      	bcs.n	8003962 <UART_WaitOnFlagUntilTimeout+0xe>
 80039b4:	e7e4      	b.n	8003980 <UART_WaitOnFlagUntilTimeout+0x2c>

080039b6 <HAL_UART_Transmit>:
{
 80039b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80039ba:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80039bc:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80039c0:	2b20      	cmp	r3, #32
{
 80039c2:	4604      	mov	r4, r0
 80039c4:	460d      	mov	r5, r1
 80039c6:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80039c8:	d14a      	bne.n	8003a60 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80039ca:	2900      	cmp	r1, #0
 80039cc:	d046      	beq.n	8003a5c <HAL_UART_Transmit+0xa6>
 80039ce:	2a00      	cmp	r2, #0
 80039d0:	d044      	beq.n	8003a5c <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80039d2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d042      	beq.n	8003a60 <HAL_UART_Transmit+0xaa>
 80039da:	2301      	movs	r3, #1
 80039dc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e4:	2321      	movs	r3, #33	; 0x21
 80039e6:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 80039ea:	f7fd fe1f 	bl	800162c <HAL_GetTick>
    huart->TxXferSize  = Size;
 80039ee:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80039f2:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80039f4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039f8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fc:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 80039fe:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a00:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8003a02:	b952      	cbnz	r2, 8003a1a <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a04:	2140      	movs	r1, #64	; 0x40
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7ff ffa4 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8003a0c:	b958      	cbnz	r0, 8003a26 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8003a0e:	2320      	movs	r3, #32
 8003a10:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8003a14:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8003a18:	e006      	b.n	8003a28 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7ff ff98 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8003a24:	b118      	cbz	r0, 8003a2e <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8003a26:	2003      	movs	r0, #3
}
 8003a28:	b002      	add	sp, #8
 8003a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2e:	68a3      	ldr	r3, [r4, #8]
 8003a30:	6822      	ldr	r2, [r4, #0]
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d10d      	bne.n	8003a54 <HAL_UART_Transmit+0x9e>
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	b95b      	cbnz	r3, 8003a54 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003a3c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a44:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003a46:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003a52:	e7d1      	b.n	80039f8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003a54:	782b      	ldrb	r3, [r5, #0]
 8003a56:	8513      	strh	r3, [r2, #40]	; 0x28
 8003a58:	3501      	adds	r5, #1
 8003a5a:	e7f4      	b.n	8003a46 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	e7e3      	b.n	8003a28 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8003a60:	2002      	movs	r0, #2
 8003a62:	e7e1      	b.n	8003a28 <HAL_UART_Transmit+0x72>

08003a64 <UART_CheckIdleState>:
{
 8003a64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a66:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a68:	2600      	movs	r6, #0
 8003a6a:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8003a6c:	f7fd fdde 	bl	800162c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003a76:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a78:	d417      	bmi.n	8003aaa <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	075b      	lsls	r3, r3, #29
 8003a80:	d50a      	bpl.n	8003a98 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	462b      	mov	r3, r5
 8003a8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7ff ff5f 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8003a96:	b9a0      	cbnz	r0, 8003ac2 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8003a98:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003a9a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003a9c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8003aa0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003aa4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8003aa8:	e00c      	b.n	8003ac4 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f7ff ff4b 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d0db      	beq.n	8003a7a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003ac2:	2003      	movs	r0, #3
}
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}

08003ac8 <HAL_UART_Init>:
{
 8003ac8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003aca:	4604      	mov	r4, r0
 8003acc:	b360      	cbz	r0, 8003b28 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003ace:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003ad2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ad6:	b91b      	cbnz	r3, 8003ae0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003ad8:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003adc:	f000 fd36 	bl	800454c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003ae0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003ae2:	2324      	movs	r3, #36	; 0x24
 8003ae4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003ae8:	6813      	ldr	r3, [r2, #0]
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003af0:	4620      	mov	r0, r4
 8003af2:	f7ff fd43 	bl	800357c <UART_SetConfig>
 8003af6:	2801      	cmp	r0, #1
 8003af8:	d016      	beq.n	8003b28 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003afc:	b113      	cbz	r3, 8003b04 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7ff fed4 	bl	80038ac <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b14:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003b1c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003b1e:	601a      	str	r2, [r3, #0]
}
 8003b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003b24:	f7ff bf9e 	b.w	8003a64 <UART_CheckIdleState>
}
 8003b28:	2001      	movs	r0, #1
 8003b2a:	bd10      	pop	{r4, pc}

08003b2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	d101      	bne.n	8003b36 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003b32:	2003      	movs	r0, #3
 8003b34:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b36:	6902      	ldr	r2, [r0, #16]
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	daf8      	bge.n	8003b2e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b3c:	6903      	ldr	r3, [r0, #16]
 8003b3e:	4a06      	ldr	r2, [pc, #24]	; (8003b58 <USB_CoreReset+0x2c>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8003b46:	3a01      	subs	r2, #1
 8003b48:	d0f3      	beq.n	8003b32 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b4a:	6903      	ldr	r3, [r0, #16]
 8003b4c:	f013 0301 	ands.w	r3, r3, #1
 8003b50:	d1f9      	bne.n	8003b46 <USB_CoreReset+0x1a>

  return HAL_OK;
 8003b52:	4618      	mov	r0, r3
}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	00030d41 	.word	0x00030d41

08003b5c <USB_CoreInit>:
{
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	b538      	push	{r3, r4, r5, lr}
 8003b60:	ad05      	add	r5, sp, #20
 8003b62:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b68:	2b01      	cmp	r3, #1
{
 8003b6a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b6c:	d11b      	bne.n	8003ba6 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b74:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b76:	68c3      	ldr	r3, [r0, #12]
 8003b78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b80:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b82:	68c3      	ldr	r3, [r0, #12]
 8003b84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003b88:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003b8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b8c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b8e:	bf02      	ittt	eq
 8003b90:	68c3      	ldreq	r3, [r0, #12]
 8003b92:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8003b96:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8003b98:	f7ff ffc8 	bl	8003b2c <USB_CoreReset>
}
 8003b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	b004      	add	sp, #16
 8003ba4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ba6:	68c3      	ldr	r3, [r0, #12]
 8003ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bac:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8003bae:	f7ff ffbd 	bl	8003b2c <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bb6:	63a3      	str	r3, [r4, #56]	; 0x38
 8003bb8:	e7f0      	b.n	8003b9c <USB_CoreInit+0x40>

08003bba <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bba:	6883      	ldr	r3, [r0, #8]
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	6083      	str	r3, [r0, #8]
}
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	4770      	bx	lr

08003bc6 <USB_SetCurrentMode>:
{
 8003bc6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bc8:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003bca:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bcc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003bd0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003bd2:	d108      	bne.n	8003be6 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bd4:	68c3      	ldr	r3, [r0, #12]
 8003bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bda:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003bdc:	2032      	movs	r0, #50	; 0x32
 8003bde:	f7fd fd2b 	bl	8001638 <HAL_Delay>
  return HAL_OK;
 8003be2:	2000      	movs	r0, #0
 8003be4:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8003be6:	b919      	cbnz	r1, 8003bf0 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003be8:	68c3      	ldr	r3, [r0, #12]
 8003bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bee:	e7f4      	b.n	8003bda <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8003bf0:	2001      	movs	r0, #1
}
 8003bf2:	bd08      	pop	{r3, pc}

08003bf4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bf4:	0189      	lsls	r1, r1, #6
 8003bf6:	f041 0120 	orr.w	r1, r1, #32
 8003bfa:	4a06      	ldr	r2, [pc, #24]	; (8003c14 <USB_FlushTxFifo+0x20>)
 8003bfc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003bfe:	3a01      	subs	r2, #1
 8003c00:	d005      	beq.n	8003c0e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c02:	6903      	ldr	r3, [r0, #16]
 8003c04:	f013 0320 	ands.w	r3, r3, #32
 8003c08:	d1f9      	bne.n	8003bfe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003c0e:	2003      	movs	r0, #3
}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	00030d41 	.word	0x00030d41

08003c18 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c18:	2310      	movs	r3, #16
 8003c1a:	4a06      	ldr	r2, [pc, #24]	; (8003c34 <USB_FlushRxFifo+0x1c>)
 8003c1c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8003c1e:	3a01      	subs	r2, #1
 8003c20:	d005      	beq.n	8003c2e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c22:	6903      	ldr	r3, [r0, #16]
 8003c24:	f013 0310 	ands.w	r3, r3, #16
 8003c28:	d1f9      	bne.n	8003c1e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003c2e:	2003      	movs	r0, #3
}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	00030d41 	.word	0x00030d41

08003c38 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003c38:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003c3c:	4319      	orrs	r1, r3
 8003c3e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003c42:	2000      	movs	r0, #0
 8003c44:	4770      	bx	lr
	...

08003c48 <USB_DevInit>:
{
 8003c48:	b084      	sub	sp, #16
 8003c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c4e:	4604      	mov	r4, r0
 8003c50:	a807      	add	r0, sp, #28
 8003c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8003c5a:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003c62:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8003c66:	3301      	adds	r3, #1
 8003c68:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8003c6a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003c6c:	d1f7      	bne.n	8003c5e <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c74:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8003c76:	b95f      	cbnz	r7, 8003c90 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c7e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c86:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8e:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8003c90:	2500      	movs	r5, #0
 8003c92:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c96:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003c9a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c9e:	2103      	movs	r1, #3
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f7ff ffc9 	bl	8003c38 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ca6:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003caa:	2110      	movs	r1, #16
 8003cac:	4620      	mov	r0, r4
 8003cae:	f7ff ffa1 	bl	8003bf4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f7ff ffb0 	bl	8003c18 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8003cb8:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cba:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8003cbc:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cbe:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8003cc0:	61f5      	str	r5, [r6, #28]
 8003cc2:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cca:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003cce:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cd2:	4543      	cmp	r3, r8
 8003cd4:	d12f      	bne.n	8003d36 <USB_DevInit+0xee>
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cdc:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cde:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ce2:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ce6:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cea:	428b      	cmp	r3, r1
 8003cec:	d134      	bne.n	8003d58 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cee:	6933      	ldr	r3, [r6, #16]
 8003cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf4:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cfa:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003cfe:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d00:	69a3      	ldr	r3, [r4, #24]
 8003d02:	f043 0310 	orr.w	r3, r3, #16
 8003d06:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d08:	69a2      	ldr	r2, [r4, #24]
 8003d0a:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <USB_DevInit+0x134>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003d10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d12:	b11b      	cbz	r3, 8003d1c <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d14:	69a3      	ldr	r3, [r4, #24]
 8003d16:	f043 0308 	orr.w	r3, r3, #8
 8003d1a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003d1c:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d1e:	bf01      	itttt	eq
 8003d20:	69a3      	ldreq	r3, [r4, #24]
 8003d22:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003d26:	f043 0304 	orreq.w	r3, r3, #4
 8003d2a:	61a3      	streq	r3, [r4, #24]
}
 8003d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d30:	2000      	movs	r0, #0
 8003d32:	b004      	add	sp, #16
 8003d34:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d36:	f8d2 c000 	ldr.w	ip, [r2]
 8003d3a:	f1bc 0f00 	cmp.w	ip, #0
 8003d3e:	da09      	bge.n	8003d54 <USB_DevInit+0x10c>
      if (i == 0U)
 8003d40:	b933      	cbnz	r3, 8003d50 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d42:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d44:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d46:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d48:	f8c2 e008 	str.w	lr, [r2, #8]
 8003d4c:	3220      	adds	r2, #32
 8003d4e:	e7c0      	b.n	8003cd2 <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d50:	6010      	str	r0, [r2, #0]
 8003d52:	e7f7      	b.n	8003d44 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d54:	6011      	str	r1, [r2, #0]
 8003d56:	e7f5      	b.n	8003d44 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d58:	f8d2 8000 	ldr.w	r8, [r2]
 8003d5c:	f1b8 0f00 	cmp.w	r8, #0
 8003d60:	da0a      	bge.n	8003d78 <USB_DevInit+0x130>
      if (i == 0U)
 8003d62:	b939      	cbnz	r1, 8003d74 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d64:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d68:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d6a:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d6c:	f8c2 c008 	str.w	ip, [r2, #8]
 8003d70:	3220      	adds	r2, #32
 8003d72:	e7ba      	b.n	8003cea <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d74:	6015      	str	r5, [r2, #0]
 8003d76:	e7f7      	b.n	8003d68 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d78:	6010      	str	r0, [r2, #0]
 8003d7a:	e7f5      	b.n	8003d68 <USB_DevInit+0x120>
 8003d7c:	803c3800 	.word	0x803c3800

08003d80 <USB_DevDisconnect>:
{
 8003d80:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d82:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003d86:	f043 0302 	orr.w	r3, r3, #2
 8003d8a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003d8e:	2003      	movs	r0, #3
 8003d90:	f7fd fc52 	bl	8001638 <HAL_Delay>
}
 8003d94:	2000      	movs	r0, #0
 8003d96:	bd08      	pop	{r3, pc}

08003d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9a:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d9c:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d9e:	2244      	movs	r2, #68	; 0x44
 8003da0:	2100      	movs	r1, #0
 8003da2:	a805      	add	r0, sp, #20
 8003da4:	f000 fd1d 	bl	80047e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003da8:	4622      	mov	r2, r4
 8003daa:	2100      	movs	r1, #0
 8003dac:	4668      	mov	r0, sp
 8003dae:	f000 fd18 	bl	80047e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003db2:	2100      	movs	r1, #0
 8003db4:	2288      	movs	r2, #136	; 0x88
 8003db6:	a816      	add	r0, sp, #88	; 0x58
 8003db8:	f000 fd13 	bl	80047e2 <memset>

  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003dbc:	f7fe fad6 	bl	800236c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003dc0:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <SystemClock_Config+0xb4>)
 8003dc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003dc6:	f023 0318 	bic.w	r3, r3, #24
 8003dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003dce:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003dd0:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dd2:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003dd4:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003dd6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003dd8:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003dda:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003ddc:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dde:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003de0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003de2:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003de4:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003de6:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003de8:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003dea:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003dec:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003dee:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003df0:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003df2:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003df4:	f7fe fc1c 	bl	8002630 <HAL_RCC_OscConfig>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003df8:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003dfa:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dfc:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003dfe:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e00:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e04:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e06:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e08:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003e0a:	f7fe fe37 	bl	8002a7c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <SystemClock_Config+0xb8>)
 8003e10:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003e12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e16:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003e18:	2318      	movs	r3, #24
 8003e1a:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e1c:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003e1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e22:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e24:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003e26:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003e28:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003e2a:	9436      	str	r4, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003e2c:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003e2e:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003e30:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003e32:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003e34:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e36:	f7fe ffe3 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003e3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003e3e:	f7fe faa5 	bl	800238c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003e42:	f7ff f9c5 	bl	80031d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003e46:	b039      	add	sp, #228	; 0xe4
 8003e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	00012085 	.word	0x00012085

08003e54 <main>:
{
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8003e5a:	f7fd fbcf 	bl	80015fc <HAL_Init>
  SystemClock_Config();
 8003e5e:	f7ff ff9b 	bl	8003d98 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e62:	2214      	movs	r2, #20
 8003e64:	2100      	movs	r1, #0
 8003e66:	a807      	add	r0, sp, #28
 8003e68:	f000 fcbb 	bl	80047e2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e6c:	4bac      	ldr	r3, [pc, #688]	; (8004120 <main+0x2cc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8003e6e:	48ad      	ldr	r0, [pc, #692]	; (8004124 <main+0x2d0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e72:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 800415c <main+0x308>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e76:	f042 0210 	orr.w	r2, r2, #16
 8003e7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e7e:	f002 0210 	and.w	r2, r2, #16
 8003e82:	9202      	str	r2, [sp, #8]
 8003e84:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e88:	f042 0204 	orr.w	r2, r2, #4
 8003e8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e90:	f002 0204 	and.w	r2, r2, #4
 8003e94:	9203      	str	r2, [sp, #12]
 8003e96:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ea2:	f002 0201 	and.w	r2, r2, #1
 8003ea6:	9204      	str	r2, [sp, #16]
 8003ea8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eac:	f042 0202 	orr.w	r2, r2, #2
 8003eb0:	64da      	str	r2, [r3, #76]	; 0x4c
 8003eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eb4:	f002 0202 	and.w	r2, r2, #2
 8003eb8:	9205      	str	r2, [sp, #20]
 8003eba:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ebc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ebe:	f042 0208 	orr.w	r2, r2, #8
 8003ec2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f240 1115 	movw	r1, #277	; 0x115
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ed2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8003ed4:	f7fd fe3c 	bl	8001b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f248 1104 	movw	r1, #33028	; 0x8104
 8003ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ee2:	f7fd fe35 	bl	8001b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f24f 0134 	movw	r1, #61492	; 0xf034
 8003eec:	488e      	ldr	r0, [pc, #568]	; (8004128 <main+0x2d4>)
 8003eee:	f7fd fe2f 	bl	8001b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f243 0181 	movw	r1, #12417	; 0x3081
 8003ef8:	488c      	ldr	r0, [pc, #560]	; (800412c <main+0x2d8>)
 8003efa:	f7fd fe29 	bl	8001b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8003efe:	2200      	movs	r2, #0
 8003f00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003f04:	488a      	ldr	r0, [pc, #552]	; (8004130 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8003f08:	f7fd fe22 	bl	8001b50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f0c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8003f0e:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f12:	a907      	add	r1, sp, #28
 8003f14:	4883      	ldr	r0, [pc, #524]	; (8004124 <main+0x2d0>)
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8003f16:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f18:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f1e:	f7fd fca1 	bl	8001864 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8003f22:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f24:	a907      	add	r1, sp, #28
 8003f26:	487f      	ldr	r0, [pc, #508]	; (8004124 <main+0x2d0>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8003f28:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f2a:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f30:	f7fd fc98 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8003f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f38:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003f3a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f3c:	4b7d      	ldr	r3, [pc, #500]	; (8004134 <main+0x2e0>)
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003f3e:	487c      	ldr	r0, [pc, #496]	; (8004130 <main+0x2dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f40:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003f42:	f04f 0b0b 	mov.w	fp, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003f48:	f7fd fc8c 	bl	8001864 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8003f4c:	233f      	movs	r3, #63	; 0x3f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4e:	a907      	add	r1, sp, #28
 8003f50:	4877      	ldr	r0, [pc, #476]	; (8004130 <main+0x2dc>)
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8003f52:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f54:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003f56:	2603      	movs	r6, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003f58:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003f5c:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f62:	f7fd fc7f 	bl	8001864 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f66:	a907      	add	r1, sp, #28
 8003f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003f6c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f70:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003f72:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f76:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f78:	f7fd fc74 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003f7c:	f248 1304 	movw	r3, #33028	; 0x8104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f80:	a907      	add	r1, sp, #28
 8003f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003f86:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f88:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8e:	f7fd fc69 	bl	8001864 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003f92:	a907      	add	r1, sp, #28
 8003f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8003f98:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fa0:	950b      	str	r5, [sp, #44]	; 0x2c

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003fa2:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003fa8:	f7fd fc5c 	bl	8001864 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003fac:	a907      	add	r1, sp, #28
 8003fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003fb2:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003fb8:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003fbc:	f7fd fc52 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003fc0:	23e0      	movs	r3, #224	; 0xe0
 8003fc2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fc6:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fce:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd2:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd4:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd6:	f7fd fc45 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003fda:	a907      	add	r1, sp, #28
 8003fdc:	4852      	ldr	r0, [pc, #328]	; (8004128 <main+0x2d4>)
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8003fde:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fe0:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003fe6:	f7fd fc3d 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003fea:	a907      	add	r1, sp, #28
 8003fec:	484e      	ldr	r0, [pc, #312]	; (8004128 <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003fee:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003ff4:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003ff6:	f7fd fc35 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8003ffa:	f24f 0234 	movw	r2, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ffe:	a907      	add	r1, sp, #28
 8004000:	4849      	ldr	r0, [pc, #292]	; (8004128 <main+0x2d4>)
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8004002:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004004:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004008:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400a:	f7fd fc2b 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 800400e:	f64c 4204 	movw	r2, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004012:	a907      	add	r1, sp, #28
 8004014:	4845      	ldr	r0, [pc, #276]	; (800412c <main+0x2d8>)
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8004016:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004018:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800401e:	f7fd fc21 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8004022:	f243 0281 	movw	r2, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004026:	a907      	add	r1, sp, #28
 8004028:	4840      	ldr	r0, [pc, #256]	; (800412c <main+0x2d8>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800402a:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800402c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004030:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004032:	f7fd fc17 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004036:	f44f 7210 	mov.w	r2, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800403a:	a907      	add	r1, sp, #28
 800403c:	483c      	ldr	r0, [pc, #240]	; (8004130 <main+0x2dc>)
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800403e:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004040:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004044:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004046:	f7fd fc0d 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800404a:	f44f 72c0 	mov.w	r2, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800404e:	a907      	add	r1, sp, #28
 8004050:	4837      	ldr	r0, [pc, #220]	; (8004130 <main+0x2dc>)
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004052:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004054:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800405a:	f7fd fc03 	bl	8001864 <HAL_GPIO_Init>
  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800405e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004060:	4832      	ldr	r0, [pc, #200]	; (800412c <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004062:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004064:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004066:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004068:	930b      	str	r3, [sp, #44]	; 0x2c
  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800406a:	f04f 0a07 	mov.w	sl, #7
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800406e:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004072:	f7fd fbf7 	bl	8001864 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8004076:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004078:	a907      	add	r1, sp, #28
 800407a:	482c      	ldr	r0, [pc, #176]	; (800412c <main+0x2d8>)
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800407c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004080:	960a      	str	r6, [sp, #40]	; 0x28

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8004082:	f44f 7b40 	mov.w	fp, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004088:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800408c:	f7fd fbea 	bl	8001864 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004090:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004092:	2312      	movs	r3, #18
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004094:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004096:	4824      	ldr	r0, [pc, #144]	; (8004128 <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004098:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800409a:	2604      	movs	r6, #4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800409c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800409e:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80040a0:	f8cd b01c 	str.w	fp, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a4:	f7fd fbde 	bl	8001864 <HAL_GPIO_Init>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80040a8:	4823      	ldr	r0, [pc, #140]	; (8004138 <main+0x2e4>)
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <main+0x2e8>)
 80040ac:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80040ae:	6206      	str	r6, [r0, #32]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80040b0:	f44f 7380 	mov.w	r3, #256	; 0x100
  hi2c2.Instance = I2C2;
 80040b4:	4e22      	ldr	r6, [pc, #136]	; (8004140 <main+0x2ec>)
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80040b6:	7105      	strb	r5, [r0, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80040b8:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80040ba:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80040bc:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80040be:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80040c0:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80040c2:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80040c4:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80040c6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80040c8:	6304      	str	r4, [r0, #48]	; 0x30
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80040ca:	60c7      	str	r7, [r0, #12]
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80040cc:	f7fd fb56 	bl	800177c <HAL_DFSDM_ChannelInit>
  hi2c2.Init.Timing = 0x10909CEC;
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <main+0x2f0>)
 80040d2:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <main+0x2f4>)
  hi2c2.Init.OwnAddress1 = 0;
 80040d4:	60b4      	str	r4, [r6, #8]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80040d6:	4630      	mov	r0, r6
  hi2c2.Init.Timing = 0x10909CEC;
 80040d8:	e886 000c 	stmia.w	r6, {r2, r3}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040dc:	60f5      	str	r5, [r6, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040de:	6134      	str	r4, [r6, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80040e0:	6174      	str	r4, [r6, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040e2:	61b4      	str	r4, [r6, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040e4:	61f4      	str	r4, [r6, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040e6:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80040e8:	f7fd fe7b 	bl	8001de2 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040ec:	4621      	mov	r1, r4
 80040ee:	4630      	mov	r0, r6
 80040f0:	f7fe f856 	bl	80021a0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80040f4:	4621      	mov	r1, r4
 80040f6:	4630      	mov	r0, r6
 80040f8:	f7fe f878 	bl	80021ec <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Init.ClockPrescaler = 255;
 80040fc:	4913      	ldr	r1, [pc, #76]	; (800414c <main+0x2f8>)
  hqspi.Instance = QUADSPI;
 80040fe:	4814      	ldr	r0, [pc, #80]	; (8004150 <main+0x2fc>)
  hqspi.Init.ClockPrescaler = 255;
 8004100:	23ff      	movs	r3, #255	; 0xff
 8004102:	e880 000a 	stmia.w	r0, {r1, r3}
  hqspi.Init.FifoThreshold = 1;
 8004106:	6085      	str	r5, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004108:	60c4      	str	r4, [r0, #12]
  hqspi.Init.FlashSize = 1;
 800410a:	6105      	str	r5, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800410c:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800410e:	6184      	str	r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004110:	f7fe f9a0 	bl	8002454 <HAL_QSPI_Init>
  hspi3.Instance = SPI3;
 8004114:	480f      	ldr	r0, [pc, #60]	; (8004154 <main+0x300>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <main+0x304>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004118:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800411a:	f44f 7582 	mov.w	r5, #260	; 0x104
 800411e:	e01f      	b.n	8004160 <main+0x30c>
 8004120:	40021000 	.word	0x40021000
 8004124:	48001000 	.word	0x48001000
 8004128:	48000400 	.word	0x48000400
 800412c:	48000c00 	.word	0x48000c00
 8004130:	48000800 	.word	0x48000800
 8004134:	10210000 	.word	0x10210000
 8004138:	20000398 	.word	0x20000398
 800413c:	40016020 	.word	0x40016020
 8004140:	20000854 	.word	0x20000854
 8004144:	40005800 	.word	0x40005800
 8004148:	10909cec 	.word	0x10909cec
 800414c:	a0001000 	.word	0xa0001000
 8004150:	200009c4 	.word	0x200009c4
 8004154:	200008a4 	.word	0x200008a4
 8004158:	40003c00 	.word	0x40003c00
 800415c:	10110000 	.word	0x10110000
 8004160:	e880 0028 	stmia.w	r0, {r3, r5}
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004164:	f44f 7300 	mov.w	r3, #512	; 0x200
  huart1.Instance = USART1;
 8004168:	4d58      	ldr	r5, [pc, #352]	; (80042cc <main+0x478>)
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800416a:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800416c:	6144      	str	r4, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800416e:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004170:	61c4      	str	r4, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004172:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004174:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004176:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004178:	6304      	str	r4, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800417a:	f8c0 9034 	str.w	r9, [r0, #52]	; 0x34
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800417e:	f8c0 b00c 	str.w	fp, [r0, #12]
  hspi3.Init.CRCPolynomial = 7;
 8004182:	f8c0 a02c 	str.w	sl, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004186:	f7ff f82b 	bl	80031e0 <HAL_SPI_Init>
  huart1.Init.BaudRate = 9600;
 800418a:	4b51      	ldr	r3, [pc, #324]	; (80042d0 <main+0x47c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800418c:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 9600;
 800418e:	f44f 5616 	mov.w	r6, #9600	; 0x2580
 8004192:	e885 0048 	stmia.w	r5, {r3, r6}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004196:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004198:	260c      	movs	r6, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800419a:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800419c:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800419e:	616e      	str	r6, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041a0:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041a2:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041a4:	622c      	str	r4, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041a6:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041a8:	f7ff fc8e 	bl	8003ac8 <HAL_UART_Init>
  huart3.Instance = USART3;
 80041ac:	4849      	ldr	r0, [pc, #292]	; (80042d4 <main+0x480>)
  huart3.Init.BaudRate = 115200;
 80041ae:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <main+0x484>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80041b0:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80041b2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80041b6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.StopBits = UART_STOPBITS_1;
 80041ba:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80041bc:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80041be:	6146      	str	r6, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041c0:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80041c2:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041c4:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041c6:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80041c8:	f7ff fc7e 	bl	8003ac8 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80041cc:	4843      	ldr	r0, [pc, #268]	; (80042dc <main+0x488>)
  htim6.Instance = TIM6;
 80041ce:	4e44      	ldr	r6, [pc, #272]	; (80042e0 <main+0x48c>)
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80041d0:	6144      	str	r4, [r0, #20]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80041d2:	f04f 0c06 	mov.w	ip, #6
 80041d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80041da:	e880 1008 	stmia.w	r0, {r3, ip}
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80041de:	61c4      	str	r4, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80041e0:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80041e2:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80041e4:	6284      	str	r4, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80041e6:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80041e8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80041ea:	60c7      	str	r7, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80041ec:	6187      	str	r7, [r0, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80041ee:	f7fe f822 	bl	8002236 <HAL_PCD_Init>
  htim6.Init.Prescaler = 999;
 80041f2:	4b3c      	ldr	r3, [pc, #240]	; (80042e4 <main+0x490>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f4:	60b4      	str	r4, [r6, #8]
  htim6.Init.Prescaler = 999;
 80041f6:	f240 39e7 	movw	r9, #999	; 0x3e7
 80041fa:	e886 0208 	stmia.w	r6, {r3, r9}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80041fe:	4630      	mov	r0, r6
  htim6.Init.Period = 40000;
 8004200:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004204:	60f3      	str	r3, [r6, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004206:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004208:	9407      	str	r4, [sp, #28]
 800420a:	9408      	str	r4, [sp, #32]
 800420c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800420e:	f7ff f96b 	bl	80034e8 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004212:	a907      	add	r1, sp, #28
 8004214:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004216:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004218:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800421a:	f7ff f97f 	bl	800351c <HAL_TIMEx_MasterConfigSynchronization>
  BSP_PSENSOR_Init();
 800421e:	f7fc ff51 	bl	80010c4 <BSP_PSENSOR_Init>
  BSP_HSENSOR_Init();
 8004222:	f7fc ff29 	bl	8001078 <BSP_HSENSOR_Init>
  BSP_TSENSOR_Init();
 8004226:	f7fc ff69 	bl	80010fc <BSP_TSENSOR_Init>
  BSP_ACCELERO_Init();
 800422a:	f7fc fefd 	bl	8001028 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 800422e:	f7fc ff0f 	bl	8001050 <BSP_GYRO_Init>
  BSP_MAGNETO_DeInit();
 8004232:	f7fc ff3d 	bl	80010b0 <BSP_MAGNETO_DeInit>
  HAL_TIM_Base_Start_IT(&htim6);
 8004236:	4630      	mov	r0, r6
 8004238:	f7ff f824 	bl	8003284 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart1,"Hello TGR 2019\r\n",16,5000);
 800423c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004240:	4642      	mov	r2, r8
 8004242:	4628      	mov	r0, r5
 8004244:	4928      	ldr	r1, [pc, #160]	; (80042e8 <main+0x494>)
	  if(RX_BUFF[0] == '1')
 8004246:	4c29      	ldr	r4, [pc, #164]	; (80042ec <main+0x498>)
		  Temp_Value = BSP_TSENSOR_ReadTemp();
 8004248:	4e29      	ldr	r6, [pc, #164]	; (80042f0 <main+0x49c>)
  HAL_UART_Transmit(&huart1,"Hello TGR 2019\r\n",16,5000);
 800424a:	f7ff fbb4 	bl	80039b6 <HAL_UART_Transmit>
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 800424e:	682a      	ldr	r2, [r5, #0]
		  int tmp = sprintf(str, "Temperature is = %f C\r\n", Temp_Value);
 8004250:	4d28      	ldr	r5, [pc, #160]	; (80042f4 <main+0x4a0>)
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8004252:	6813      	ldr	r3, [r2, #0]
 8004254:	f043 0320 	orr.w	r3, r3, #32
 8004258:	6013      	str	r3, [r2, #0]
	  if(RX_BUFF[0] == '1')
 800425a:	7823      	ldrb	r3, [r4, #0]
 800425c:	2b31      	cmp	r3, #49	; 0x31
 800425e:	d118      	bne.n	8004292 <main+0x43e>
		  Pressure_Value = BSP_PSENSOR_ReadPressure();
 8004260:	f7fc ff44 	bl	80010ec <BSP_PSENSOR_ReadPressure>
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <main+0x4a4>)
 8004266:	ee10 0a10 	vmov	r0, s0
 800426a:	ed83 0a00 	vstr	s0, [r3]
		  int tmp = sprintf(str, "Pressure is = %f nBar\r\n", Pressure_Value);
 800426e:	f7fc f96b 	bl	8000548 <__aeabi_f2d>
 8004272:	460b      	mov	r3, r1
 8004274:	4921      	ldr	r1, [pc, #132]	; (80042fc <main+0x4a8>)
 8004276:	4602      	mov	r2, r0
		  int tmp = sprintf(str, "Temperature is = %f C\r\n", Temp_Value);
 8004278:	a807      	add	r0, sp, #28
 800427a:	f000 ff27 	bl	80050cc <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)(&str),tmp,5000);
 800427e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004282:	b282      	uxth	r2, r0
 8004284:	a907      	add	r1, sp, #28
 8004286:	4811      	ldr	r0, [pc, #68]	; (80042cc <main+0x478>)
 8004288:	f7ff fb95 	bl	80039b6 <HAL_UART_Transmit>
		  RX_BUFF[0] = '\0';
 800428c:	2300      	movs	r3, #0
 800428e:	7023      	strb	r3, [r4, #0]
 8004290:	e7e3      	b.n	800425a <main+0x406>
	  else if(RX_BUFF[0] == '2')
 8004292:	2b32      	cmp	r3, #50	; 0x32
 8004294:	d10c      	bne.n	80042b0 <main+0x45c>
		  Hum_Value = BSP_HSENSOR_ReadHumidity();
 8004296:	f7fc ff03 	bl	80010a0 <BSP_HSENSOR_ReadHumidity>
 800429a:	4b19      	ldr	r3, [pc, #100]	; (8004300 <main+0x4ac>)
 800429c:	ee10 0a10 	vmov	r0, s0
 80042a0:	ed83 0a00 	vstr	s0, [r3]
		  int tmp = sprintf(str, "Humidity is = %f %%\r\n", Hum_Value);
 80042a4:	f7fc f950 	bl	8000548 <__aeabi_f2d>
 80042a8:	460b      	mov	r3, r1
 80042aa:	4602      	mov	r2, r0
 80042ac:	4915      	ldr	r1, [pc, #84]	; (8004304 <main+0x4b0>)
 80042ae:	e7e3      	b.n	8004278 <main+0x424>
	  else if(RX_BUFF[0] == '3')
 80042b0:	2b33      	cmp	r3, #51	; 0x33
 80042b2:	d1d2      	bne.n	800425a <main+0x406>
		  Temp_Value = BSP_TSENSOR_ReadTemp();
 80042b4:	f7fc ff34 	bl	8001120 <BSP_TSENSOR_ReadTemp>
 80042b8:	ee10 0a10 	vmov	r0, s0
 80042bc:	ed86 0a00 	vstr	s0, [r6]
		  int tmp = sprintf(str, "Temperature is = %f C\r\n", Temp_Value);
 80042c0:	f7fc f942 	bl	8000548 <__aeabi_f2d>
 80042c4:	460b      	mov	r3, r1
 80042c6:	4602      	mov	r2, r0
 80042c8:	4629      	mov	r1, r5
 80042ca:	e7d5      	b.n	8004278 <main+0x424>
 80042cc:	20000908 	.word	0x20000908
 80042d0:	40013800 	.word	0x40013800
 80042d4:	200003d4 	.word	0x200003d4
 80042d8:	40004800 	.word	0x40004800
 80042dc:	2000044c 	.word	0x2000044c
 80042e0:	20000980 	.word	0x20000980
 80042e4:	40001000 	.word	0x40001000
 80042e8:	08006951 	.word	0x08006951
 80042ec:	20000a08 	.word	0x20000a08
 80042f0:	200009c0 	.word	0x200009c0
 80042f4:	08006990 	.word	0x08006990
 80042f8:	200003d0 	.word	0x200003d0
 80042fc:	08006962 	.word	0x08006962
 8004300:	200008a0 	.word	0x200008a0
 8004304:	0800697a 	.word	0x0800697a

08004308 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
BSP_LED_Toggle(LED2);
 8004308:	2000      	movs	r0, #0
 800430a:	f7fc be31 	b.w	8000f70 <BSP_LED_Toggle>
	...

08004310 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004310:	4b0a      	ldr	r3, [pc, #40]	; (800433c <HAL_MspInit+0x2c>)
 8004312:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004314:	f042 0201 	orr.w	r2, r2, #1
 8004318:	661a      	str	r2, [r3, #96]	; 0x60
 800431a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800431c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431e:	f002 0201 	and.w	r2, r2, #1
 8004322:	9200      	str	r2, [sp, #0]
 8004324:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004326:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004328:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800432c:	659a      	str	r2, [r3, #88]	; 0x58
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004334:	9301      	str	r3, [sp, #4]
 8004336:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004338:	b002      	add	sp, #8
 800433a:	4770      	bx	lr
 800433c:	40021000 	.word	0x40021000

08004340 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8004340:	b500      	push	{lr}
 8004342:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	2214      	movs	r2, #20
 8004346:	2100      	movs	r1, #0
 8004348:	a803      	add	r0, sp, #12
 800434a:	f000 fa4a 	bl	80047e2 <memset>
  if(DFSDM1_Init == 0)
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <HAL_DFSDM_ChannelMspInit+0x5c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	bb03      	cbnz	r3, 8004396 <HAL_DFSDM_ChannelMspInit+0x56>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004354:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004358:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800435c:	a903      	add	r1, sp, #12
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800435e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004360:	480f      	ldr	r0, [pc, #60]	; (80043a0 <HAL_DFSDM_ChannelMspInit+0x60>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004362:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004366:	661a      	str	r2, [r3, #96]	; 0x60
 8004368:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800436a:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800436e:	9201      	str	r2, [sp, #4]
 8004370:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004374:	f042 0210 	orr.w	r2, r2, #16
 8004378:	64da      	str	r2, [r3, #76]	; 0x4c
 800437a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	9302      	str	r3, [sp, #8]
 8004382:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004384:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004388:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800438e:	2306      	movs	r3, #6
 8004390:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004392:	f7fd fa67 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8004396:	b009      	add	sp, #36	; 0x24
 8004398:	f85d fb04 	ldr.w	pc, [sp], #4
 800439c:	200002c0 	.word	0x200002c0
 80043a0:	48001000 	.word	0x48001000

080043a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4604      	mov	r4, r0
 80043a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043aa:	2214      	movs	r2, #20
 80043ac:	2100      	movs	r1, #0
 80043ae:	a803      	add	r0, sp, #12
 80043b0:	f000 fa17 	bl	80047e2 <memset>
  if(hi2c->Instance==I2C2)
 80043b4:	6822      	ldr	r2, [r4, #0]
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_I2C_MspInit+0x60>)
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d121      	bne.n	8004400 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043bc:	4c12      	ldr	r4, [pc, #72]	; (8004408 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043be:	4813      	ldr	r0, [pc, #76]	; (800440c <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80043c2:	f043 0302 	orr.w	r3, r3, #2
 80043c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80043c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80043d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043d8:	2312      	movs	r3, #18
 80043da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043dc:	2301      	movs	r3, #1
 80043de:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e0:	2303      	movs	r3, #3
 80043e2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80043e6:	2304      	movs	r3, #4
 80043e8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ea:	f7fd fa3b 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80043f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fc:	9302      	str	r3, [sp, #8]
 80043fe:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004400:	b008      	add	sp, #32
 8004402:	bd10      	pop	{r4, pc}
 8004404:	40005800 	.word	0x40005800
 8004408:	40021000 	.word	0x40021000
 800440c:	48000400 	.word	0x48000400

08004410 <HAL_I2C_MspDeInit>:
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C2)
 8004410:	6802      	ldr	r2, [r0, #0]
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <HAL_I2C_MspDeInit+0x20>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d109      	bne.n	800442c <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004418:	4a06      	ldr	r2, [pc, #24]	; (8004434 <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 800441a:	4807      	ldr	r0, [pc, #28]	; (8004438 <HAL_I2C_MspDeInit+0x28>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 800441c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800441e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004422:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8004424:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004428:	f7fd baf8 	b.w	8001a1c <HAL_GPIO_DeInit>
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40005800 	.word	0x40005800
 8004434:	40021000 	.word	0x40021000
 8004438:	48000400 	.word	0x48000400

0800443c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800443c:	b510      	push	{r4, lr}
 800443e:	4604      	mov	r4, r0
 8004440:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004442:	2214      	movs	r2, #20
 8004444:	2100      	movs	r1, #0
 8004446:	a803      	add	r0, sp, #12
 8004448:	f000 f9cb 	bl	80047e2 <memset>
  if(hqspi->Instance==QUADSPI)
 800444c:	6822      	ldr	r2, [r4, #0]
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <HAL_QSPI_MspInit+0x64>)
 8004450:	429a      	cmp	r2, r3
 8004452:	d122      	bne.n	800449a <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004454:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8004458:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800445c:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 800445e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004460:	4810      	ldr	r0, [pc, #64]	; (80044a4 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004466:	651a      	str	r2, [r3, #80]	; 0x50
 8004468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800446a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800446e:	9201      	str	r2, [sp, #4]
 8004470:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004474:	f042 0210 	orr.w	r2, r2, #16
 8004478:	64da      	str	r2, [r3, #76]	; 0x4c
 800447a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	9302      	str	r3, [sp, #8]
 8004482:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8004484:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004488:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448a:	2302      	movs	r3, #2
 800448c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448e:	2303      	movs	r3, #3
 8004490:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004492:	230a      	movs	r3, #10
 8004494:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004496:	f7fd f9e5 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800449a:	b008      	add	sp, #32
 800449c:	bd10      	pop	{r4, pc}
 800449e:	bf00      	nop
 80044a0:	a0001000 	.word	0xa0001000
 80044a4:	48001000 	.word	0x48001000

080044a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044a8:	b510      	push	{r4, lr}
 80044aa:	4604      	mov	r4, r0
 80044ac:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ae:	2214      	movs	r2, #20
 80044b0:	2100      	movs	r1, #0
 80044b2:	a803      	add	r0, sp, #12
 80044b4:	f000 f995 	bl	80047e2 <memset>
  if(hspi->Instance==SPI3)
 80044b8:	6822      	ldr	r2, [r4, #0]
 80044ba:	4b13      	ldr	r3, [pc, #76]	; (8004508 <HAL_SPI_MspInit+0x60>)
 80044bc:	429a      	cmp	r2, r3
 80044be:	d120      	bne.n	8004502 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80044c0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c4:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 80044c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c8:	4810      	ldr	r0, [pc, #64]	; (800450c <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80044ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ce:	659a      	str	r2, [r3, #88]	; 0x58
 80044d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044d2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80044d6:	9201      	str	r2, [sp, #4]
 80044d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044dc:	f042 0204 	orr.w	r2, r2, #4
 80044e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80044e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	9302      	str	r3, [sp, #8]
 80044ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80044ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80044f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f6:	2303      	movs	r3, #3
 80044f8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80044fa:	2306      	movs	r3, #6
 80044fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044fe:	f7fd f9b1 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004502:	b008      	add	sp, #32
 8004504:	bd10      	pop	{r4, pc}
 8004506:	bf00      	nop
 8004508:	40003c00 	.word	0x40003c00
 800450c:	48000800 	.word	0x48000800

08004510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004510:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <HAL_TIM_Base_MspInit+0x38>)
 8004514:	6802      	ldr	r2, [r0, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d112      	bne.n	8004540 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800451a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800451e:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004522:	f042 0210 	orr.w	r2, r2, #16
 8004526:	659a      	str	r2, [r3, #88]	; 0x58
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004530:	2200      	movs	r2, #0
 8004532:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004534:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004536:	f7fd f89f 	bl	8001678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800453a:	2036      	movs	r0, #54	; 0x36
 800453c:	f7fd f8d0 	bl	80016e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004540:	b003      	add	sp, #12
 8004542:	f85d fb04 	ldr.w	pc, [sp], #4
 8004546:	bf00      	nop
 8004548:	40001000 	.word	0x40001000

0800454c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800454c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800454e:	2214      	movs	r2, #20
{
 8004550:	b08a      	sub	sp, #40	; 0x28
 8004552:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004554:	2100      	movs	r1, #0
 8004556:	eb0d 0002 	add.w	r0, sp, r2
 800455a:	f000 f942 	bl	80047e2 <memset>
  if(huart->Instance==USART1)
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	4a27      	ldr	r2, [pc, #156]	; (8004600 <HAL_UART_MspInit+0xb4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d128      	bne.n	80045b8 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004566:	4b27      	ldr	r3, [pc, #156]	; (8004604 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004568:	4827      	ldr	r0, [pc, #156]	; (8004608 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800456a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800456c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004570:	661a      	str	r2, [r3, #96]	; 0x60
 8004572:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004574:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004578:	9201      	str	r2, [sp, #4]
 800457a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800457c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800457e:	f042 0202 	orr.w	r2, r2, #2
 8004582:	64da      	str	r2, [r3, #76]	; 0x4c
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	9302      	str	r3, [sp, #8]
 800458c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800458e:	23c0      	movs	r3, #192	; 0xc0
 8004590:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004592:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004594:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004596:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004598:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800459a:	2307      	movs	r3, #7
 800459c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a0:	f7fd f960 	bl	8001864 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80045a4:	2025      	movs	r0, #37	; 0x25
 80045a6:	2200      	movs	r2, #0
 80045a8:	4621      	mov	r1, r4
 80045aa:	f7fd f865 	bl	8001678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80045ae:	2025      	movs	r0, #37	; 0x25
 80045b0:	f7fd f896 	bl	80016e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80045b4:	b00a      	add	sp, #40	; 0x28
 80045b6:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80045b8:	4a14      	ldr	r2, [pc, #80]	; (800460c <HAL_UART_MspInit+0xc0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d1fa      	bne.n	80045b4 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART3_CLK_ENABLE();
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_UART_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045c0:	4813      	ldr	r0, [pc, #76]	; (8004610 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80045c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80045c8:	659a      	str	r2, [r3, #88]	; 0x58
 80045ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045cc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80045d0:	9203      	str	r2, [sp, #12]
 80045d2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045d6:	f042 0208 	orr.w	r2, r2, #8
 80045da:	64da      	str	r2, [r3, #76]	; 0x4c
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	9304      	str	r3, [sp, #16]
 80045e4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80045e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ec:	2302      	movs	r3, #2
 80045ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f0:	2303      	movs	r3, #3
 80045f2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80045f6:	2307      	movs	r3, #7
 80045f8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045fa:	f7fd f933 	bl	8001864 <HAL_GPIO_Init>
}
 80045fe:	e7d9      	b.n	80045b4 <HAL_UART_MspInit+0x68>
 8004600:	40013800 	.word	0x40013800
 8004604:	40021000 	.word	0x40021000
 8004608:	48000400 	.word	0x48000400
 800460c:	40004800 	.word	0x40004800
 8004610:	48000c00 	.word	0x48000c00

08004614 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004614:	b510      	push	{r4, lr}
 8004616:	4604      	mov	r4, r0
 8004618:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461a:	2214      	movs	r2, #20
 800461c:	2100      	movs	r1, #0
 800461e:	a803      	add	r0, sp, #12
 8004620:	f000 f8df 	bl	80047e2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800462a:	d13c      	bne.n	80046a6 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800462c:	4c20      	ldr	r4, [pc, #128]	; (80046b0 <HAL_PCD_MspInit+0x9c>)
 800462e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004636:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004640:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004642:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800464a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800464c:	f7fd f90a 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8004650:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004654:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004656:	2302      	movs	r3, #2
 8004658:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465a:	2300      	movs	r3, #0
 800465c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800465e:	2303      	movs	r3, #3
 8004660:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004662:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004664:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800466a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800466c:	f7fd f8fa 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004670:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004672:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004676:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004678:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800467a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	d410      	bmi.n	80046aa <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004690:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 800469a:	f7fd fead 	bl	80023f8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800469e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a4:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80046a6:	b008      	add	sp, #32
 80046a8:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 80046aa:	f7fd fea5 	bl	80023f8 <HAL_PWREx_EnableVddUSB>
}
 80046ae:	e7fa      	b.n	80046a6 <HAL_PCD_MspInit+0x92>
 80046b0:	40021000 	.word	0x40021000

080046b4 <NMI_Handler>:
 80046b4:	4770      	bx	lr

080046b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046b6:	e7fe      	b.n	80046b6 <HardFault_Handler>

080046b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046b8:	e7fe      	b.n	80046b8 <MemManage_Handler>

080046ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046ba:	e7fe      	b.n	80046ba <BusFault_Handler>

080046bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046bc:	e7fe      	b.n	80046bc <UsageFault_Handler>

080046be <SVC_Handler>:
 80046be:	4770      	bx	lr

080046c0 <DebugMon_Handler>:
 80046c0:	4770      	bx	lr

080046c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046c2:	4770      	bx	lr

080046c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046c4:	f7fc bfaa 	b.w	800161c <HAL_IncTick>

080046c8 <USART1_IRQHandler>:
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
  RX_BUFF[0] = USART1->RDR;
 80046c8:	4b02      	ldr	r3, [pc, #8]	; (80046d4 <USART1_IRQHandler+0xc>)
 80046ca:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80046cc:	4b02      	ldr	r3, [pc, #8]	; (80046d8 <USART1_IRQHandler+0x10>)
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40013800 	.word	0x40013800
 80046d8:	20000a08 	.word	0x20000a08

080046dc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80046dc:	4801      	ldr	r0, [pc, #4]	; (80046e4 <TIM6_DAC_IRQHandler+0x8>)
 80046de:	f7fe bded 	b.w	80032bc <HAL_TIM_IRQHandler>
 80046e2:	bf00      	nop
 80046e4:	20000980 	.word	0x20000980

080046e8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046e8:	490f      	ldr	r1, [pc, #60]	; (8004728 <SystemInit+0x40>)
 80046ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80046ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80046f6:	4b0d      	ldr	r3, [pc, #52]	; (800472c <SystemInit+0x44>)
 80046f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80046fa:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8004702:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800470a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800470e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004714:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800471c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800471e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004720:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004724:	608b      	str	r3, [r1, #8]
 8004726:	4770      	bx	lr
 8004728:	e000ed00 	.word	0xe000ed00
 800472c:	40021000 	.word	0x40021000

08004730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004768 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004734:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004736:	e003      	b.n	8004740 <LoopCopyDataInit>

08004738 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800473a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800473c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800473e:	3104      	adds	r1, #4

08004740 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004740:	480b      	ldr	r0, [pc, #44]	; (8004770 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004744:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004746:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004748:	d3f6      	bcc.n	8004738 <CopyDataInit>
	ldr	r2, =_sbss
 800474a:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <LoopForever+0x12>)
	b	LoopFillZerobss
 800474c:	e002      	b.n	8004754 <LoopFillZerobss>

0800474e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800474e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004750:	f842 3b04 	str.w	r3, [r2], #4

08004754 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <LoopForever+0x16>)
	cmp	r2, r3
 8004756:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004758:	d3f9      	bcc.n	800474e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800475a:	f7ff ffc5 	bl	80046e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800475e:	f000 f811 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004762:	f7ff fb77 	bl	8003e54 <main>

08004766 <LoopForever>:

LoopForever:
    b LoopForever
 8004766:	e7fe      	b.n	8004766 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004768:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800476c:	08006c60 	.word	0x08006c60
	ldr	r0, =_sdata
 8004770:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004774:	20000268 	.word	0x20000268
	ldr	r2, =_sbss
 8004778:	20000268 	.word	0x20000268
	ldr	r3, = _ebss
 800477c:	20000a10 	.word	0x20000a10

08004780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004780:	e7fe      	b.n	8004780 <ADC1_2_IRQHandler>
	...

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4e0d      	ldr	r6, [pc, #52]	; (80047bc <__libc_init_array+0x38>)
 8004788:	4c0d      	ldr	r4, [pc, #52]	; (80047c0 <__libc_init_array+0x3c>)
 800478a:	1ba4      	subs	r4, r4, r6
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	2500      	movs	r5, #0
 8004790:	42a5      	cmp	r5, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	4e0b      	ldr	r6, [pc, #44]	; (80047c4 <__libc_init_array+0x40>)
 8004796:	4c0c      	ldr	r4, [pc, #48]	; (80047c8 <__libc_init_array+0x44>)
 8004798:	f002 f890 	bl	80068bc <_init>
 800479c:	1ba4      	subs	r4, r4, r6
 800479e:	10a4      	asrs	r4, r4, #2
 80047a0:	2500      	movs	r5, #0
 80047a2:	42a5      	cmp	r5, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047ac:	4798      	blx	r3
 80047ae:	3501      	adds	r5, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047b6:	4798      	blx	r3
 80047b8:	3501      	adds	r5, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	08006c58 	.word	0x08006c58
 80047c0:	08006c58 	.word	0x08006c58
 80047c4:	08006c58 	.word	0x08006c58
 80047c8:	08006c5c 	.word	0x08006c5c

080047cc <memcpy>:
 80047cc:	b510      	push	{r4, lr}
 80047ce:	1e43      	subs	r3, r0, #1
 80047d0:	440a      	add	r2, r1
 80047d2:	4291      	cmp	r1, r2
 80047d4:	d100      	bne.n	80047d8 <memcpy+0xc>
 80047d6:	bd10      	pop	{r4, pc}
 80047d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e0:	e7f7      	b.n	80047d2 <memcpy+0x6>

080047e2 <memset>:
 80047e2:	4402      	add	r2, r0
 80047e4:	4603      	mov	r3, r0
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d100      	bne.n	80047ec <memset+0xa>
 80047ea:	4770      	bx	lr
 80047ec:	f803 1b01 	strb.w	r1, [r3], #1
 80047f0:	e7f9      	b.n	80047e6 <memset+0x4>

080047f2 <__cvt>:
 80047f2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047f6:	ec55 4b10 	vmov	r4, r5, d0
 80047fa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80047fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004800:	2d00      	cmp	r5, #0
 8004802:	460e      	mov	r6, r1
 8004804:	4691      	mov	r9, r2
 8004806:	4619      	mov	r1, r3
 8004808:	bfb8      	it	lt
 800480a:	4622      	movlt	r2, r4
 800480c:	462b      	mov	r3, r5
 800480e:	f027 0720 	bic.w	r7, r7, #32
 8004812:	bfbb      	ittet	lt
 8004814:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004818:	461d      	movlt	r5, r3
 800481a:	2300      	movge	r3, #0
 800481c:	232d      	movlt	r3, #45	; 0x2d
 800481e:	bfb8      	it	lt
 8004820:	4614      	movlt	r4, r2
 8004822:	2f46      	cmp	r7, #70	; 0x46
 8004824:	700b      	strb	r3, [r1, #0]
 8004826:	d004      	beq.n	8004832 <__cvt+0x40>
 8004828:	2f45      	cmp	r7, #69	; 0x45
 800482a:	d100      	bne.n	800482e <__cvt+0x3c>
 800482c:	3601      	adds	r6, #1
 800482e:	2102      	movs	r1, #2
 8004830:	e000      	b.n	8004834 <__cvt+0x42>
 8004832:	2103      	movs	r1, #3
 8004834:	ab03      	add	r3, sp, #12
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	ab02      	add	r3, sp, #8
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4632      	mov	r2, r6
 800483e:	4653      	mov	r3, sl
 8004840:	ec45 4b10 	vmov	d0, r4, r5
 8004844:	f000 fcf4 	bl	8005230 <_dtoa_r>
 8004848:	2f47      	cmp	r7, #71	; 0x47
 800484a:	4680      	mov	r8, r0
 800484c:	d102      	bne.n	8004854 <__cvt+0x62>
 800484e:	f019 0f01 	tst.w	r9, #1
 8004852:	d026      	beq.n	80048a2 <__cvt+0xb0>
 8004854:	2f46      	cmp	r7, #70	; 0x46
 8004856:	eb08 0906 	add.w	r9, r8, r6
 800485a:	d111      	bne.n	8004880 <__cvt+0x8e>
 800485c:	f898 3000 	ldrb.w	r3, [r8]
 8004860:	2b30      	cmp	r3, #48	; 0x30
 8004862:	d10a      	bne.n	800487a <__cvt+0x88>
 8004864:	2200      	movs	r2, #0
 8004866:	2300      	movs	r3, #0
 8004868:	4620      	mov	r0, r4
 800486a:	4629      	mov	r1, r5
 800486c:	f7fc f928 	bl	8000ac0 <__aeabi_dcmpeq>
 8004870:	b918      	cbnz	r0, 800487a <__cvt+0x88>
 8004872:	f1c6 0601 	rsb	r6, r6, #1
 8004876:	f8ca 6000 	str.w	r6, [sl]
 800487a:	f8da 3000 	ldr.w	r3, [sl]
 800487e:	4499      	add	r9, r3
 8004880:	2200      	movs	r2, #0
 8004882:	2300      	movs	r3, #0
 8004884:	4620      	mov	r0, r4
 8004886:	4629      	mov	r1, r5
 8004888:	f7fc f91a 	bl	8000ac0 <__aeabi_dcmpeq>
 800488c:	b938      	cbnz	r0, 800489e <__cvt+0xac>
 800488e:	2230      	movs	r2, #48	; 0x30
 8004890:	9b03      	ldr	r3, [sp, #12]
 8004892:	4599      	cmp	r9, r3
 8004894:	d905      	bls.n	80048a2 <__cvt+0xb0>
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	9103      	str	r1, [sp, #12]
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e7f8      	b.n	8004890 <__cvt+0x9e>
 800489e:	f8cd 900c 	str.w	r9, [sp, #12]
 80048a2:	9b03      	ldr	r3, [sp, #12]
 80048a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048a6:	eba3 0308 	sub.w	r3, r3, r8
 80048aa:	4640      	mov	r0, r8
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	b004      	add	sp, #16
 80048b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080048b4 <__exponent>:
 80048b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048b6:	4603      	mov	r3, r0
 80048b8:	2900      	cmp	r1, #0
 80048ba:	bfb8      	it	lt
 80048bc:	4249      	neglt	r1, r1
 80048be:	f803 2b02 	strb.w	r2, [r3], #2
 80048c2:	bfb4      	ite	lt
 80048c4:	222d      	movlt	r2, #45	; 0x2d
 80048c6:	222b      	movge	r2, #43	; 0x2b
 80048c8:	2909      	cmp	r1, #9
 80048ca:	7042      	strb	r2, [r0, #1]
 80048cc:	dd20      	ble.n	8004910 <__exponent+0x5c>
 80048ce:	f10d 0207 	add.w	r2, sp, #7
 80048d2:	4617      	mov	r7, r2
 80048d4:	260a      	movs	r6, #10
 80048d6:	fb91 f5f6 	sdiv	r5, r1, r6
 80048da:	fb06 1115 	mls	r1, r6, r5, r1
 80048de:	3130      	adds	r1, #48	; 0x30
 80048e0:	2d09      	cmp	r5, #9
 80048e2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048e6:	f102 34ff 	add.w	r4, r2, #4294967295
 80048ea:	4629      	mov	r1, r5
 80048ec:	dc09      	bgt.n	8004902 <__exponent+0x4e>
 80048ee:	3130      	adds	r1, #48	; 0x30
 80048f0:	3a02      	subs	r2, #2
 80048f2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80048f6:	42ba      	cmp	r2, r7
 80048f8:	461c      	mov	r4, r3
 80048fa:	d304      	bcc.n	8004906 <__exponent+0x52>
 80048fc:	1a20      	subs	r0, r4, r0
 80048fe:	b003      	add	sp, #12
 8004900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004902:	4622      	mov	r2, r4
 8004904:	e7e7      	b.n	80048d6 <__exponent+0x22>
 8004906:	f812 1b01 	ldrb.w	r1, [r2], #1
 800490a:	f803 1b01 	strb.w	r1, [r3], #1
 800490e:	e7f2      	b.n	80048f6 <__exponent+0x42>
 8004910:	2230      	movs	r2, #48	; 0x30
 8004912:	461c      	mov	r4, r3
 8004914:	4411      	add	r1, r2
 8004916:	f804 2b02 	strb.w	r2, [r4], #2
 800491a:	7059      	strb	r1, [r3, #1]
 800491c:	e7ee      	b.n	80048fc <__exponent+0x48>
	...

08004920 <_printf_float>:
 8004920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004924:	b08d      	sub	sp, #52	; 0x34
 8004926:	460c      	mov	r4, r1
 8004928:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800492c:	4616      	mov	r6, r2
 800492e:	461f      	mov	r7, r3
 8004930:	4605      	mov	r5, r0
 8004932:	f001 fa4b 	bl	8005dcc <_localeconv_r>
 8004936:	6803      	ldr	r3, [r0, #0]
 8004938:	9304      	str	r3, [sp, #16]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fb fc48 	bl	80001d0 <strlen>
 8004940:	2300      	movs	r3, #0
 8004942:	930a      	str	r3, [sp, #40]	; 0x28
 8004944:	f8d8 3000 	ldr.w	r3, [r8]
 8004948:	9005      	str	r0, [sp, #20]
 800494a:	3307      	adds	r3, #7
 800494c:	f023 0307 	bic.w	r3, r3, #7
 8004950:	f103 0208 	add.w	r2, r3, #8
 8004954:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004958:	f8d4 b000 	ldr.w	fp, [r4]
 800495c:	f8c8 2000 	str.w	r2, [r8]
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004968:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800496c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004970:	9307      	str	r3, [sp, #28]
 8004972:	f8cd 8018 	str.w	r8, [sp, #24]
 8004976:	f04f 32ff 	mov.w	r2, #4294967295
 800497a:	4ba5      	ldr	r3, [pc, #660]	; (8004c10 <_printf_float+0x2f0>)
 800497c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004980:	f7fc f8d0 	bl	8000b24 <__aeabi_dcmpun>
 8004984:	2800      	cmp	r0, #0
 8004986:	f040 81fb 	bne.w	8004d80 <_printf_float+0x460>
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	4ba0      	ldr	r3, [pc, #640]	; (8004c10 <_printf_float+0x2f0>)
 8004990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004994:	f7fc f8a8 	bl	8000ae8 <__aeabi_dcmple>
 8004998:	2800      	cmp	r0, #0
 800499a:	f040 81f1 	bne.w	8004d80 <_printf_float+0x460>
 800499e:	2200      	movs	r2, #0
 80049a0:	2300      	movs	r3, #0
 80049a2:	4640      	mov	r0, r8
 80049a4:	4649      	mov	r1, r9
 80049a6:	f7fc f895 	bl	8000ad4 <__aeabi_dcmplt>
 80049aa:	b110      	cbz	r0, 80049b2 <_printf_float+0x92>
 80049ac:	232d      	movs	r3, #45	; 0x2d
 80049ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b2:	4b98      	ldr	r3, [pc, #608]	; (8004c14 <_printf_float+0x2f4>)
 80049b4:	4a98      	ldr	r2, [pc, #608]	; (8004c18 <_printf_float+0x2f8>)
 80049b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80049ba:	bf8c      	ite	hi
 80049bc:	4690      	movhi	r8, r2
 80049be:	4698      	movls	r8, r3
 80049c0:	2303      	movs	r3, #3
 80049c2:	f02b 0204 	bic.w	r2, fp, #4
 80049c6:	6123      	str	r3, [r4, #16]
 80049c8:	6022      	str	r2, [r4, #0]
 80049ca:	f04f 0900 	mov.w	r9, #0
 80049ce:	9700      	str	r7, [sp, #0]
 80049d0:	4633      	mov	r3, r6
 80049d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80049d4:	4621      	mov	r1, r4
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 f9e2 	bl	8004da0 <_printf_common>
 80049dc:	3001      	adds	r0, #1
 80049de:	f040 8093 	bne.w	8004b08 <_printf_float+0x1e8>
 80049e2:	f04f 30ff 	mov.w	r0, #4294967295
 80049e6:	b00d      	add	sp, #52	; 0x34
 80049e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ec:	6861      	ldr	r1, [r4, #4]
 80049ee:	1c4b      	adds	r3, r1, #1
 80049f0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80049f4:	d13f      	bne.n	8004a76 <_printf_float+0x156>
 80049f6:	2306      	movs	r3, #6
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	2300      	movs	r3, #0
 80049fc:	9303      	str	r3, [sp, #12]
 80049fe:	ab0a      	add	r3, sp, #40	; 0x28
 8004a00:	9302      	str	r3, [sp, #8]
 8004a02:	ab09      	add	r3, sp, #36	; 0x24
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	ec49 8b10 	vmov	d0, r8, r9
 8004a0a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a0e:	6022      	str	r2, [r4, #0]
 8004a10:	f8cd a004 	str.w	sl, [sp, #4]
 8004a14:	6861      	ldr	r1, [r4, #4]
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7ff feeb 	bl	80047f2 <__cvt>
 8004a1c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004a20:	2b47      	cmp	r3, #71	; 0x47
 8004a22:	4680      	mov	r8, r0
 8004a24:	d109      	bne.n	8004a3a <_printf_float+0x11a>
 8004a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a28:	1cd8      	adds	r0, r3, #3
 8004a2a:	db02      	blt.n	8004a32 <_printf_float+0x112>
 8004a2c:	6862      	ldr	r2, [r4, #4]
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	dd57      	ble.n	8004ae2 <_printf_float+0x1c2>
 8004a32:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a36:	fa5f fa8a 	uxtb.w	sl, sl
 8004a3a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a40:	d834      	bhi.n	8004aac <_printf_float+0x18c>
 8004a42:	3901      	subs	r1, #1
 8004a44:	4652      	mov	r2, sl
 8004a46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a4a:	9109      	str	r1, [sp, #36]	; 0x24
 8004a4c:	f7ff ff32 	bl	80048b4 <__exponent>
 8004a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a52:	1883      	adds	r3, r0, r2
 8004a54:	2a01      	cmp	r2, #1
 8004a56:	4681      	mov	r9, r0
 8004a58:	6123      	str	r3, [r4, #16]
 8004a5a:	dc02      	bgt.n	8004a62 <_printf_float+0x142>
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	07d1      	lsls	r1, r2, #31
 8004a60:	d501      	bpl.n	8004a66 <_printf_float+0x146>
 8004a62:	3301      	adds	r3, #1
 8004a64:	6123      	str	r3, [r4, #16]
 8004a66:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0af      	beq.n	80049ce <_printf_float+0xae>
 8004a6e:	232d      	movs	r3, #45	; 0x2d
 8004a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a74:	e7ab      	b.n	80049ce <_printf_float+0xae>
 8004a76:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004a7a:	d002      	beq.n	8004a82 <_printf_float+0x162>
 8004a7c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004a80:	d1bb      	bne.n	80049fa <_printf_float+0xda>
 8004a82:	b189      	cbz	r1, 8004aa8 <_printf_float+0x188>
 8004a84:	2300      	movs	r3, #0
 8004a86:	9303      	str	r3, [sp, #12]
 8004a88:	ab0a      	add	r3, sp, #40	; 0x28
 8004a8a:	9302      	str	r3, [sp, #8]
 8004a8c:	ab09      	add	r3, sp, #36	; 0x24
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	ec49 8b10 	vmov	d0, r8, r9
 8004a94:	6022      	str	r2, [r4, #0]
 8004a96:	f8cd a004 	str.w	sl, [sp, #4]
 8004a9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f7ff fea7 	bl	80047f2 <__cvt>
 8004aa4:	4680      	mov	r8, r0
 8004aa6:	e7be      	b.n	8004a26 <_printf_float+0x106>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e7a5      	b.n	80049f8 <_printf_float+0xd8>
 8004aac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004ab0:	d119      	bne.n	8004ae6 <_printf_float+0x1c6>
 8004ab2:	2900      	cmp	r1, #0
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	dd0c      	ble.n	8004ad2 <_printf_float+0x1b2>
 8004ab8:	6121      	str	r1, [r4, #16]
 8004aba:	b913      	cbnz	r3, 8004ac2 <_printf_float+0x1a2>
 8004abc:	6822      	ldr	r2, [r4, #0]
 8004abe:	07d2      	lsls	r2, r2, #31
 8004ac0:	d502      	bpl.n	8004ac8 <_printf_float+0x1a8>
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	440b      	add	r3, r1
 8004ac6:	6123      	str	r3, [r4, #16]
 8004ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aca:	65a3      	str	r3, [r4, #88]	; 0x58
 8004acc:	f04f 0900 	mov.w	r9, #0
 8004ad0:	e7c9      	b.n	8004a66 <_printf_float+0x146>
 8004ad2:	b913      	cbnz	r3, 8004ada <_printf_float+0x1ba>
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	07d0      	lsls	r0, r2, #31
 8004ad8:	d501      	bpl.n	8004ade <_printf_float+0x1be>
 8004ada:	3302      	adds	r3, #2
 8004adc:	e7f3      	b.n	8004ac6 <_printf_float+0x1a6>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e7f1      	b.n	8004ac6 <_printf_float+0x1a6>
 8004ae2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aea:	4293      	cmp	r3, r2
 8004aec:	db05      	blt.n	8004afa <_printf_float+0x1da>
 8004aee:	6822      	ldr	r2, [r4, #0]
 8004af0:	6123      	str	r3, [r4, #16]
 8004af2:	07d1      	lsls	r1, r2, #31
 8004af4:	d5e8      	bpl.n	8004ac8 <_printf_float+0x1a8>
 8004af6:	3301      	adds	r3, #1
 8004af8:	e7e5      	b.n	8004ac6 <_printf_float+0x1a6>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bfd4      	ite	le
 8004afe:	f1c3 0302 	rsble	r3, r3, #2
 8004b02:	2301      	movgt	r3, #1
 8004b04:	4413      	add	r3, r2
 8004b06:	e7de      	b.n	8004ac6 <_printf_float+0x1a6>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	055a      	lsls	r2, r3, #21
 8004b0c:	d407      	bmi.n	8004b1e <_printf_float+0x1fe>
 8004b0e:	6923      	ldr	r3, [r4, #16]
 8004b10:	4642      	mov	r2, r8
 8004b12:	4631      	mov	r1, r6
 8004b14:	4628      	mov	r0, r5
 8004b16:	47b8      	blx	r7
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d12b      	bne.n	8004b74 <_printf_float+0x254>
 8004b1c:	e761      	b.n	80049e2 <_printf_float+0xc2>
 8004b1e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004b22:	f240 80e2 	bls.w	8004cea <_printf_float+0x3ca>
 8004b26:	2200      	movs	r2, #0
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b2e:	f7fb ffc7 	bl	8000ac0 <__aeabi_dcmpeq>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d03c      	beq.n	8004bb0 <_printf_float+0x290>
 8004b36:	2301      	movs	r3, #1
 8004b38:	4a38      	ldr	r2, [pc, #224]	; (8004c1c <_printf_float+0x2fc>)
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b8      	blx	r7
 8004b40:	3001      	adds	r0, #1
 8004b42:	f43f af4e 	beq.w	80049e2 <_printf_float+0xc2>
 8004b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	db02      	blt.n	8004b54 <_printf_float+0x234>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	07d8      	lsls	r0, r3, #31
 8004b52:	d50f      	bpl.n	8004b74 <_printf_float+0x254>
 8004b54:	9b05      	ldr	r3, [sp, #20]
 8004b56:	9a04      	ldr	r2, [sp, #16]
 8004b58:	4631      	mov	r1, r6
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	47b8      	blx	r7
 8004b5e:	3001      	adds	r0, #1
 8004b60:	f43f af3f 	beq.w	80049e2 <_printf_float+0xc2>
 8004b64:	f04f 0800 	mov.w	r8, #0
 8004b68:	f104 091a 	add.w	r9, r4, #26
 8004b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	4598      	cmp	r8, r3
 8004b72:	db12      	blt.n	8004b9a <_printf_float+0x27a>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	079b      	lsls	r3, r3, #30
 8004b78:	d509      	bpl.n	8004b8e <_printf_float+0x26e>
 8004b7a:	f04f 0800 	mov.w	r8, #0
 8004b7e:	f104 0919 	add.w	r9, r4, #25
 8004b82:	68e3      	ldr	r3, [r4, #12]
 8004b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	4598      	cmp	r8, r3
 8004b8a:	f2c0 80ee 	blt.w	8004d6a <_printf_float+0x44a>
 8004b8e:	68e0      	ldr	r0, [r4, #12]
 8004b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b92:	4298      	cmp	r0, r3
 8004b94:	bfb8      	it	lt
 8004b96:	4618      	movlt	r0, r3
 8004b98:	e725      	b.n	80049e6 <_printf_float+0xc6>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	464a      	mov	r2, r9
 8004b9e:	4631      	mov	r1, r6
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	47b8      	blx	r7
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f43f af1c 	beq.w	80049e2 <_printf_float+0xc2>
 8004baa:	f108 0801 	add.w	r8, r8, #1
 8004bae:	e7dd      	b.n	8004b6c <_printf_float+0x24c>
 8004bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	dc34      	bgt.n	8004c20 <_printf_float+0x300>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4a18      	ldr	r2, [pc, #96]	; (8004c1c <_printf_float+0x2fc>)
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f43f af0e 	beq.w	80049e2 <_printf_float+0xc2>
 8004bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc8:	b923      	cbnz	r3, 8004bd4 <_printf_float+0x2b4>
 8004bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bcc:	b913      	cbnz	r3, 8004bd4 <_printf_float+0x2b4>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	07d9      	lsls	r1, r3, #31
 8004bd2:	d5cf      	bpl.n	8004b74 <_printf_float+0x254>
 8004bd4:	9b05      	ldr	r3, [sp, #20]
 8004bd6:	9a04      	ldr	r2, [sp, #16]
 8004bd8:	4631      	mov	r1, r6
 8004bda:	4628      	mov	r0, r5
 8004bdc:	47b8      	blx	r7
 8004bde:	3001      	adds	r0, #1
 8004be0:	f43f aeff 	beq.w	80049e2 <_printf_float+0xc2>
 8004be4:	f04f 0900 	mov.w	r9, #0
 8004be8:	f104 0a1a 	add.w	sl, r4, #26
 8004bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bee:	425b      	negs	r3, r3
 8004bf0:	4599      	cmp	r9, r3
 8004bf2:	db01      	blt.n	8004bf8 <_printf_float+0x2d8>
 8004bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf6:	e78b      	b.n	8004b10 <_printf_float+0x1f0>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f aeed 	beq.w	80049e2 <_printf_float+0xc2>
 8004c08:	f109 0901 	add.w	r9, r9, #1
 8004c0c:	e7ee      	b.n	8004bec <_printf_float+0x2cc>
 8004c0e:	bf00      	nop
 8004c10:	7fefffff 	.word	0x7fefffff
 8004c14:	080069f0 	.word	0x080069f0
 8004c18:	080069f4 	.word	0x080069f4
 8004c1c:	08006a00 	.word	0x08006a00
 8004c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c24:	429a      	cmp	r2, r3
 8004c26:	bfa8      	it	ge
 8004c28:	461a      	movge	r2, r3
 8004c2a:	2a00      	cmp	r2, #0
 8004c2c:	4691      	mov	r9, r2
 8004c2e:	dc38      	bgt.n	8004ca2 <_printf_float+0x382>
 8004c30:	f104 031a 	add.w	r3, r4, #26
 8004c34:	f04f 0b00 	mov.w	fp, #0
 8004c38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c3c:	9306      	str	r3, [sp, #24]
 8004c3e:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c42:	ebaa 0309 	sub.w	r3, sl, r9
 8004c46:	459b      	cmp	fp, r3
 8004c48:	db33      	blt.n	8004cb2 <_printf_float+0x392>
 8004c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	db3a      	blt.n	8004cc8 <_printf_float+0x3a8>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	07da      	lsls	r2, r3, #31
 8004c56:	d437      	bmi.n	8004cc8 <_printf_float+0x3a8>
 8004c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c5c:	eba3 020a 	sub.w	r2, r3, sl
 8004c60:	eba3 0901 	sub.w	r9, r3, r1
 8004c64:	4591      	cmp	r9, r2
 8004c66:	bfa8      	it	ge
 8004c68:	4691      	movge	r9, r2
 8004c6a:	f1b9 0f00 	cmp.w	r9, #0
 8004c6e:	dc33      	bgt.n	8004cd8 <_printf_float+0x3b8>
 8004c70:	f04f 0800 	mov.w	r8, #0
 8004c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c78:	f104 0a1a 	add.w	sl, r4, #26
 8004c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	eba3 0309 	sub.w	r3, r3, r9
 8004c86:	4598      	cmp	r8, r3
 8004c88:	f6bf af74 	bge.w	8004b74 <_printf_float+0x254>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4652      	mov	r2, sl
 8004c90:	4631      	mov	r1, r6
 8004c92:	4628      	mov	r0, r5
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	f43f aea3 	beq.w	80049e2 <_printf_float+0xc2>
 8004c9c:	f108 0801 	add.w	r8, r8, #1
 8004ca0:	e7ec      	b.n	8004c7c <_printf_float+0x35c>
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	4642      	mov	r2, r8
 8004ca8:	4628      	mov	r0, r5
 8004caa:	47b8      	blx	r7
 8004cac:	3001      	adds	r0, #1
 8004cae:	d1bf      	bne.n	8004c30 <_printf_float+0x310>
 8004cb0:	e697      	b.n	80049e2 <_printf_float+0xc2>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	9a06      	ldr	r2, [sp, #24]
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b8      	blx	r7
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	f43f ae90 	beq.w	80049e2 <_printf_float+0xc2>
 8004cc2:	f10b 0b01 	add.w	fp, fp, #1
 8004cc6:	e7ba      	b.n	8004c3e <_printf_float+0x31e>
 8004cc8:	9b05      	ldr	r3, [sp, #20]
 8004cca:	9a04      	ldr	r2, [sp, #16]
 8004ccc:	4631      	mov	r1, r6
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b8      	blx	r7
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d1c0      	bne.n	8004c58 <_printf_float+0x338>
 8004cd6:	e684      	b.n	80049e2 <_printf_float+0xc2>
 8004cd8:	464b      	mov	r3, r9
 8004cda:	eb08 020a 	add.w	r2, r8, sl
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b8      	blx	r7
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d1c3      	bne.n	8004c70 <_printf_float+0x350>
 8004ce8:	e67b      	b.n	80049e2 <_printf_float+0xc2>
 8004cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cec:	2a01      	cmp	r2, #1
 8004cee:	dc01      	bgt.n	8004cf4 <_printf_float+0x3d4>
 8004cf0:	07db      	lsls	r3, r3, #31
 8004cf2:	d537      	bpl.n	8004d64 <_printf_float+0x444>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4642      	mov	r2, r8
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b8      	blx	r7
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f43f ae6f 	beq.w	80049e2 <_printf_float+0xc2>
 8004d04:	9b05      	ldr	r3, [sp, #20]
 8004d06:	9a04      	ldr	r2, [sp, #16]
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f ae67 	beq.w	80049e2 <_printf_float+0xc2>
 8004d14:	2200      	movs	r2, #0
 8004d16:	2300      	movs	r3, #0
 8004d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d1c:	f7fb fed0 	bl	8000ac0 <__aeabi_dcmpeq>
 8004d20:	b158      	cbz	r0, 8004d3a <_printf_float+0x41a>
 8004d22:	f04f 0800 	mov.w	r8, #0
 8004d26:	f104 0a1a 	add.w	sl, r4, #26
 8004d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	4598      	cmp	r8, r3
 8004d30:	db0d      	blt.n	8004d4e <_printf_float+0x42e>
 8004d32:	464b      	mov	r3, r9
 8004d34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d38:	e6eb      	b.n	8004b12 <_printf_float+0x1f2>
 8004d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d3c:	f108 0201 	add.w	r2, r8, #1
 8004d40:	3b01      	subs	r3, #1
 8004d42:	4631      	mov	r1, r6
 8004d44:	4628      	mov	r0, r5
 8004d46:	47b8      	blx	r7
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d1f2      	bne.n	8004d32 <_printf_float+0x412>
 8004d4c:	e649      	b.n	80049e2 <_printf_float+0xc2>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4652      	mov	r2, sl
 8004d52:	4631      	mov	r1, r6
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b8      	blx	r7
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f43f ae42 	beq.w	80049e2 <_printf_float+0xc2>
 8004d5e:	f108 0801 	add.w	r8, r8, #1
 8004d62:	e7e2      	b.n	8004d2a <_printf_float+0x40a>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4642      	mov	r2, r8
 8004d68:	e7eb      	b.n	8004d42 <_printf_float+0x422>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	464a      	mov	r2, r9
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	f43f ae34 	beq.w	80049e2 <_printf_float+0xc2>
 8004d7a:	f108 0801 	add.w	r8, r8, #1
 8004d7e:	e700      	b.n	8004b82 <_printf_float+0x262>
 8004d80:	4642      	mov	r2, r8
 8004d82:	464b      	mov	r3, r9
 8004d84:	4640      	mov	r0, r8
 8004d86:	4649      	mov	r1, r9
 8004d88:	f7fb fecc 	bl	8000b24 <__aeabi_dcmpun>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	f43f ae2d 	beq.w	80049ec <_printf_float+0xcc>
 8004d92:	4b01      	ldr	r3, [pc, #4]	; (8004d98 <_printf_float+0x478>)
 8004d94:	4a01      	ldr	r2, [pc, #4]	; (8004d9c <_printf_float+0x47c>)
 8004d96:	e60e      	b.n	80049b6 <_printf_float+0x96>
 8004d98:	080069f8 	.word	0x080069f8
 8004d9c:	080069fc 	.word	0x080069fc

08004da0 <_printf_common>:
 8004da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da4:	4691      	mov	r9, r2
 8004da6:	461f      	mov	r7, r3
 8004da8:	688a      	ldr	r2, [r1, #8]
 8004daa:	690b      	ldr	r3, [r1, #16]
 8004dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004db0:	4293      	cmp	r3, r2
 8004db2:	bfb8      	it	lt
 8004db4:	4613      	movlt	r3, r2
 8004db6:	f8c9 3000 	str.w	r3, [r9]
 8004dba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	b112      	cbz	r2, 8004dca <_printf_common+0x2a>
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f8c9 3000 	str.w	r3, [r9]
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	0699      	lsls	r1, r3, #26
 8004dce:	bf42      	ittt	mi
 8004dd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004dd4:	3302      	addmi	r3, #2
 8004dd6:	f8c9 3000 	strmi.w	r3, [r9]
 8004dda:	6825      	ldr	r5, [r4, #0]
 8004ddc:	f015 0506 	ands.w	r5, r5, #6
 8004de0:	d107      	bne.n	8004df2 <_printf_common+0x52>
 8004de2:	f104 0a19 	add.w	sl, r4, #25
 8004de6:	68e3      	ldr	r3, [r4, #12]
 8004de8:	f8d9 2000 	ldr.w	r2, [r9]
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	429d      	cmp	r5, r3
 8004df0:	db29      	blt.n	8004e46 <_printf_common+0xa6>
 8004df2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004df6:	6822      	ldr	r2, [r4, #0]
 8004df8:	3300      	adds	r3, #0
 8004dfa:	bf18      	it	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	0692      	lsls	r2, r2, #26
 8004e00:	d42e      	bmi.n	8004e60 <_printf_common+0xc0>
 8004e02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e06:	4639      	mov	r1, r7
 8004e08:	4630      	mov	r0, r6
 8004e0a:	47c0      	blx	r8
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d021      	beq.n	8004e54 <_printf_common+0xb4>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	68e5      	ldr	r5, [r4, #12]
 8004e14:	f8d9 2000 	ldr.w	r2, [r9]
 8004e18:	f003 0306 	and.w	r3, r3, #6
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	bf08      	it	eq
 8004e20:	1aad      	subeq	r5, r5, r2
 8004e22:	68a3      	ldr	r3, [r4, #8]
 8004e24:	6922      	ldr	r2, [r4, #16]
 8004e26:	bf0c      	ite	eq
 8004e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e2c:	2500      	movne	r5, #0
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	bfc4      	itt	gt
 8004e32:	1a9b      	subgt	r3, r3, r2
 8004e34:	18ed      	addgt	r5, r5, r3
 8004e36:	f04f 0900 	mov.w	r9, #0
 8004e3a:	341a      	adds	r4, #26
 8004e3c:	454d      	cmp	r5, r9
 8004e3e:	d11b      	bne.n	8004e78 <_printf_common+0xd8>
 8004e40:	2000      	movs	r0, #0
 8004e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e46:	2301      	movs	r3, #1
 8004e48:	4652      	mov	r2, sl
 8004e4a:	4639      	mov	r1, r7
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	47c0      	blx	r8
 8004e50:	3001      	adds	r0, #1
 8004e52:	d103      	bne.n	8004e5c <_printf_common+0xbc>
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295
 8004e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5c:	3501      	adds	r5, #1
 8004e5e:	e7c2      	b.n	8004de6 <_printf_common+0x46>
 8004e60:	18e1      	adds	r1, r4, r3
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	2030      	movs	r0, #48	; 0x30
 8004e66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e6a:	4422      	add	r2, r4
 8004e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e74:	3302      	adds	r3, #2
 8004e76:	e7c4      	b.n	8004e02 <_printf_common+0x62>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	4639      	mov	r1, r7
 8004e7e:	4630      	mov	r0, r6
 8004e80:	47c0      	blx	r8
 8004e82:	3001      	adds	r0, #1
 8004e84:	d0e6      	beq.n	8004e54 <_printf_common+0xb4>
 8004e86:	f109 0901 	add.w	r9, r9, #1
 8004e8a:	e7d7      	b.n	8004e3c <_printf_common+0x9c>

08004e8c <_printf_i>:
 8004e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e90:	4617      	mov	r7, r2
 8004e92:	7e0a      	ldrb	r2, [r1, #24]
 8004e94:	b085      	sub	sp, #20
 8004e96:	2a6e      	cmp	r2, #110	; 0x6e
 8004e98:	4698      	mov	r8, r3
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ea0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004ea4:	f000 80bc 	beq.w	8005020 <_printf_i+0x194>
 8004ea8:	d81a      	bhi.n	8004ee0 <_printf_i+0x54>
 8004eaa:	2a63      	cmp	r2, #99	; 0x63
 8004eac:	d02e      	beq.n	8004f0c <_printf_i+0x80>
 8004eae:	d80a      	bhi.n	8004ec6 <_printf_i+0x3a>
 8004eb0:	2a00      	cmp	r2, #0
 8004eb2:	f000 80c8 	beq.w	8005046 <_printf_i+0x1ba>
 8004eb6:	2a58      	cmp	r2, #88	; 0x58
 8004eb8:	f000 808a 	beq.w	8004fd0 <_printf_i+0x144>
 8004ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ec0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004ec4:	e02a      	b.n	8004f1c <_printf_i+0x90>
 8004ec6:	2a64      	cmp	r2, #100	; 0x64
 8004ec8:	d001      	beq.n	8004ece <_printf_i+0x42>
 8004eca:	2a69      	cmp	r2, #105	; 0x69
 8004ecc:	d1f6      	bne.n	8004ebc <_printf_i+0x30>
 8004ece:	6821      	ldr	r1, [r4, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004ed6:	d023      	beq.n	8004f20 <_printf_i+0x94>
 8004ed8:	1d11      	adds	r1, r2, #4
 8004eda:	6019      	str	r1, [r3, #0]
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	e027      	b.n	8004f30 <_printf_i+0xa4>
 8004ee0:	2a73      	cmp	r2, #115	; 0x73
 8004ee2:	f000 80b4 	beq.w	800504e <_printf_i+0x1c2>
 8004ee6:	d808      	bhi.n	8004efa <_printf_i+0x6e>
 8004ee8:	2a6f      	cmp	r2, #111	; 0x6f
 8004eea:	d02a      	beq.n	8004f42 <_printf_i+0xb6>
 8004eec:	2a70      	cmp	r2, #112	; 0x70
 8004eee:	d1e5      	bne.n	8004ebc <_printf_i+0x30>
 8004ef0:	680a      	ldr	r2, [r1, #0]
 8004ef2:	f042 0220 	orr.w	r2, r2, #32
 8004ef6:	600a      	str	r2, [r1, #0]
 8004ef8:	e003      	b.n	8004f02 <_printf_i+0x76>
 8004efa:	2a75      	cmp	r2, #117	; 0x75
 8004efc:	d021      	beq.n	8004f42 <_printf_i+0xb6>
 8004efe:	2a78      	cmp	r2, #120	; 0x78
 8004f00:	d1dc      	bne.n	8004ebc <_printf_i+0x30>
 8004f02:	2278      	movs	r2, #120	; 0x78
 8004f04:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004f08:	496e      	ldr	r1, [pc, #440]	; (80050c4 <_printf_i+0x238>)
 8004f0a:	e064      	b.n	8004fd6 <_printf_i+0x14a>
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004f12:	1d11      	adds	r1, r2, #4
 8004f14:	6019      	str	r1, [r3, #0]
 8004f16:	6813      	ldr	r3, [r2, #0]
 8004f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0a3      	b.n	8005068 <_printf_i+0x1dc>
 8004f20:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004f24:	f102 0104 	add.w	r1, r2, #4
 8004f28:	6019      	str	r1, [r3, #0]
 8004f2a:	d0d7      	beq.n	8004edc <_printf_i+0x50>
 8004f2c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	da03      	bge.n	8004f3c <_printf_i+0xb0>
 8004f34:	222d      	movs	r2, #45	; 0x2d
 8004f36:	425b      	negs	r3, r3
 8004f38:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f3c:	4962      	ldr	r1, [pc, #392]	; (80050c8 <_printf_i+0x23c>)
 8004f3e:	220a      	movs	r2, #10
 8004f40:	e017      	b.n	8004f72 <_printf_i+0xe6>
 8004f42:	6820      	ldr	r0, [r4, #0]
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004f4a:	d003      	beq.n	8004f54 <_printf_i+0xc8>
 8004f4c:	1d08      	adds	r0, r1, #4
 8004f4e:	6018      	str	r0, [r3, #0]
 8004f50:	680b      	ldr	r3, [r1, #0]
 8004f52:	e006      	b.n	8004f62 <_printf_i+0xd6>
 8004f54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f58:	f101 0004 	add.w	r0, r1, #4
 8004f5c:	6018      	str	r0, [r3, #0]
 8004f5e:	d0f7      	beq.n	8004f50 <_printf_i+0xc4>
 8004f60:	880b      	ldrh	r3, [r1, #0]
 8004f62:	4959      	ldr	r1, [pc, #356]	; (80050c8 <_printf_i+0x23c>)
 8004f64:	2a6f      	cmp	r2, #111	; 0x6f
 8004f66:	bf14      	ite	ne
 8004f68:	220a      	movne	r2, #10
 8004f6a:	2208      	moveq	r2, #8
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004f72:	6865      	ldr	r5, [r4, #4]
 8004f74:	60a5      	str	r5, [r4, #8]
 8004f76:	2d00      	cmp	r5, #0
 8004f78:	f2c0 809c 	blt.w	80050b4 <_printf_i+0x228>
 8004f7c:	6820      	ldr	r0, [r4, #0]
 8004f7e:	f020 0004 	bic.w	r0, r0, #4
 8004f82:	6020      	str	r0, [r4, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d13f      	bne.n	8005008 <_printf_i+0x17c>
 8004f88:	2d00      	cmp	r5, #0
 8004f8a:	f040 8095 	bne.w	80050b8 <_printf_i+0x22c>
 8004f8e:	4675      	mov	r5, lr
 8004f90:	2a08      	cmp	r2, #8
 8004f92:	d10b      	bne.n	8004fac <_printf_i+0x120>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	07da      	lsls	r2, r3, #31
 8004f98:	d508      	bpl.n	8004fac <_printf_i+0x120>
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	6862      	ldr	r2, [r4, #4]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	bfde      	ittt	le
 8004fa2:	2330      	movle	r3, #48	; 0x30
 8004fa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fac:	ebae 0305 	sub.w	r3, lr, r5
 8004fb0:	6123      	str	r3, [r4, #16]
 8004fb2:	f8cd 8000 	str.w	r8, [sp]
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	aa03      	add	r2, sp, #12
 8004fba:	4621      	mov	r1, r4
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f7ff feef 	bl	8004da0 <_printf_common>
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d155      	bne.n	8005072 <_printf_i+0x1e6>
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fca:	b005      	add	sp, #20
 8004fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fd0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004fd4:	493c      	ldr	r1, [pc, #240]	; (80050c8 <_printf_i+0x23c>)
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004fde:	f100 0504 	add.w	r5, r0, #4
 8004fe2:	601d      	str	r5, [r3, #0]
 8004fe4:	d001      	beq.n	8004fea <_printf_i+0x15e>
 8004fe6:	6803      	ldr	r3, [r0, #0]
 8004fe8:	e002      	b.n	8004ff0 <_printf_i+0x164>
 8004fea:	0655      	lsls	r5, r2, #25
 8004fec:	d5fb      	bpl.n	8004fe6 <_printf_i+0x15a>
 8004fee:	8803      	ldrh	r3, [r0, #0]
 8004ff0:	07d0      	lsls	r0, r2, #31
 8004ff2:	bf44      	itt	mi
 8004ff4:	f042 0220 	orrmi.w	r2, r2, #32
 8004ff8:	6022      	strmi	r2, [r4, #0]
 8004ffa:	b91b      	cbnz	r3, 8005004 <_printf_i+0x178>
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	f022 0220 	bic.w	r2, r2, #32
 8005002:	6022      	str	r2, [r4, #0]
 8005004:	2210      	movs	r2, #16
 8005006:	e7b1      	b.n	8004f6c <_printf_i+0xe0>
 8005008:	4675      	mov	r5, lr
 800500a:	fbb3 f0f2 	udiv	r0, r3, r2
 800500e:	fb02 3310 	mls	r3, r2, r0, r3
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005018:	4603      	mov	r3, r0
 800501a:	2800      	cmp	r0, #0
 800501c:	d1f5      	bne.n	800500a <_printf_i+0x17e>
 800501e:	e7b7      	b.n	8004f90 <_printf_i+0x104>
 8005020:	6808      	ldr	r0, [r1, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	6949      	ldr	r1, [r1, #20]
 8005026:	f010 0f80 	tst.w	r0, #128	; 0x80
 800502a:	d004      	beq.n	8005036 <_printf_i+0x1aa>
 800502c:	1d10      	adds	r0, r2, #4
 800502e:	6018      	str	r0, [r3, #0]
 8005030:	6813      	ldr	r3, [r2, #0]
 8005032:	6019      	str	r1, [r3, #0]
 8005034:	e007      	b.n	8005046 <_printf_i+0x1ba>
 8005036:	f010 0f40 	tst.w	r0, #64	; 0x40
 800503a:	f102 0004 	add.w	r0, r2, #4
 800503e:	6018      	str	r0, [r3, #0]
 8005040:	6813      	ldr	r3, [r2, #0]
 8005042:	d0f6      	beq.n	8005032 <_printf_i+0x1a6>
 8005044:	8019      	strh	r1, [r3, #0]
 8005046:	2300      	movs	r3, #0
 8005048:	6123      	str	r3, [r4, #16]
 800504a:	4675      	mov	r5, lr
 800504c:	e7b1      	b.n	8004fb2 <_printf_i+0x126>
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	1d11      	adds	r1, r2, #4
 8005052:	6019      	str	r1, [r3, #0]
 8005054:	6815      	ldr	r5, [r2, #0]
 8005056:	6862      	ldr	r2, [r4, #4]
 8005058:	2100      	movs	r1, #0
 800505a:	4628      	mov	r0, r5
 800505c:	f7fb f8c0 	bl	80001e0 <memchr>
 8005060:	b108      	cbz	r0, 8005066 <_printf_i+0x1da>
 8005062:	1b40      	subs	r0, r0, r5
 8005064:	6060      	str	r0, [r4, #4]
 8005066:	6863      	ldr	r3, [r4, #4]
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	2300      	movs	r3, #0
 800506c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005070:	e79f      	b.n	8004fb2 <_printf_i+0x126>
 8005072:	6923      	ldr	r3, [r4, #16]
 8005074:	462a      	mov	r2, r5
 8005076:	4639      	mov	r1, r7
 8005078:	4630      	mov	r0, r6
 800507a:	47c0      	blx	r8
 800507c:	3001      	adds	r0, #1
 800507e:	d0a2      	beq.n	8004fc6 <_printf_i+0x13a>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	079b      	lsls	r3, r3, #30
 8005084:	d507      	bpl.n	8005096 <_printf_i+0x20a>
 8005086:	2500      	movs	r5, #0
 8005088:	f104 0919 	add.w	r9, r4, #25
 800508c:	68e3      	ldr	r3, [r4, #12]
 800508e:	9a03      	ldr	r2, [sp, #12]
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	429d      	cmp	r5, r3
 8005094:	db05      	blt.n	80050a2 <_printf_i+0x216>
 8005096:	68e0      	ldr	r0, [r4, #12]
 8005098:	9b03      	ldr	r3, [sp, #12]
 800509a:	4298      	cmp	r0, r3
 800509c:	bfb8      	it	lt
 800509e:	4618      	movlt	r0, r3
 80050a0:	e793      	b.n	8004fca <_printf_i+0x13e>
 80050a2:	2301      	movs	r3, #1
 80050a4:	464a      	mov	r2, r9
 80050a6:	4639      	mov	r1, r7
 80050a8:	4630      	mov	r0, r6
 80050aa:	47c0      	blx	r8
 80050ac:	3001      	adds	r0, #1
 80050ae:	d08a      	beq.n	8004fc6 <_printf_i+0x13a>
 80050b0:	3501      	adds	r5, #1
 80050b2:	e7eb      	b.n	800508c <_printf_i+0x200>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1a7      	bne.n	8005008 <_printf_i+0x17c>
 80050b8:	780b      	ldrb	r3, [r1, #0]
 80050ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050c2:	e765      	b.n	8004f90 <_printf_i+0x104>
 80050c4:	08006a13 	.word	0x08006a13
 80050c8:	08006a02 	.word	0x08006a02

080050cc <siprintf>:
 80050cc:	b40e      	push	{r1, r2, r3}
 80050ce:	b500      	push	{lr}
 80050d0:	b09c      	sub	sp, #112	; 0x70
 80050d2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80050d6:	ab1d      	add	r3, sp, #116	; 0x74
 80050d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80050dc:	9002      	str	r0, [sp, #8]
 80050de:	9006      	str	r0, [sp, #24]
 80050e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050e4:	480a      	ldr	r0, [pc, #40]	; (8005110 <siprintf+0x44>)
 80050e6:	9104      	str	r1, [sp, #16]
 80050e8:	9107      	str	r1, [sp, #28]
 80050ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80050f2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80050f6:	6800      	ldr	r0, [r0, #0]
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	a902      	add	r1, sp, #8
 80050fc:	f001 fa62 	bl	80065c4 <_svfiprintf_r>
 8005100:	9b02      	ldr	r3, [sp, #8]
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	b01c      	add	sp, #112	; 0x70
 8005108:	f85d eb04 	ldr.w	lr, [sp], #4
 800510c:	b003      	add	sp, #12
 800510e:	4770      	bx	lr
 8005110:	20000098 	.word	0x20000098

08005114 <quorem>:
 8005114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	6903      	ldr	r3, [r0, #16]
 800511a:	690c      	ldr	r4, [r1, #16]
 800511c:	429c      	cmp	r4, r3
 800511e:	4680      	mov	r8, r0
 8005120:	f300 8082 	bgt.w	8005228 <quorem+0x114>
 8005124:	3c01      	subs	r4, #1
 8005126:	f101 0714 	add.w	r7, r1, #20
 800512a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800512e:	f100 0614 	add.w	r6, r0, #20
 8005132:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005136:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800513a:	eb06 030e 	add.w	r3, r6, lr
 800513e:	3501      	adds	r5, #1
 8005140:	eb07 090e 	add.w	r9, r7, lr
 8005144:	9301      	str	r3, [sp, #4]
 8005146:	fbb0 f5f5 	udiv	r5, r0, r5
 800514a:	b395      	cbz	r5, 80051b2 <quorem+0x9e>
 800514c:	f04f 0a00 	mov.w	sl, #0
 8005150:	4638      	mov	r0, r7
 8005152:	46b4      	mov	ip, r6
 8005154:	46d3      	mov	fp, sl
 8005156:	f850 2b04 	ldr.w	r2, [r0], #4
 800515a:	b293      	uxth	r3, r2
 800515c:	fb05 a303 	mla	r3, r5, r3, sl
 8005160:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005164:	b29b      	uxth	r3, r3
 8005166:	ebab 0303 	sub.w	r3, fp, r3
 800516a:	0c12      	lsrs	r2, r2, #16
 800516c:	f8bc b000 	ldrh.w	fp, [ip]
 8005170:	fb05 a202 	mla	r2, r5, r2, sl
 8005174:	fa13 f38b 	uxtah	r3, r3, fp
 8005178:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800517c:	fa1f fb82 	uxth.w	fp, r2
 8005180:	f8dc 2000 	ldr.w	r2, [ip]
 8005184:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800518c:	b29b      	uxth	r3, r3
 800518e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005192:	4581      	cmp	r9, r0
 8005194:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005198:	f84c 3b04 	str.w	r3, [ip], #4
 800519c:	d2db      	bcs.n	8005156 <quorem+0x42>
 800519e:	f856 300e 	ldr.w	r3, [r6, lr]
 80051a2:	b933      	cbnz	r3, 80051b2 <quorem+0x9e>
 80051a4:	9b01      	ldr	r3, [sp, #4]
 80051a6:	3b04      	subs	r3, #4
 80051a8:	429e      	cmp	r6, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	d330      	bcc.n	8005210 <quorem+0xfc>
 80051ae:	f8c8 4010 	str.w	r4, [r8, #16]
 80051b2:	4640      	mov	r0, r8
 80051b4:	f001 f829 	bl	800620a <__mcmp>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	db25      	blt.n	8005208 <quorem+0xf4>
 80051bc:	3501      	adds	r5, #1
 80051be:	4630      	mov	r0, r6
 80051c0:	f04f 0e00 	mov.w	lr, #0
 80051c4:	f857 2b04 	ldr.w	r2, [r7], #4
 80051c8:	f8d0 c000 	ldr.w	ip, [r0]
 80051cc:	b293      	uxth	r3, r2
 80051ce:	ebae 0303 	sub.w	r3, lr, r3
 80051d2:	0c12      	lsrs	r2, r2, #16
 80051d4:	fa13 f38c 	uxtah	r3, r3, ip
 80051d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80051dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051e6:	45b9      	cmp	r9, r7
 80051e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80051ec:	f840 3b04 	str.w	r3, [r0], #4
 80051f0:	d2e8      	bcs.n	80051c4 <quorem+0xb0>
 80051f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80051f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80051fa:	b92a      	cbnz	r2, 8005208 <quorem+0xf4>
 80051fc:	3b04      	subs	r3, #4
 80051fe:	429e      	cmp	r6, r3
 8005200:	461a      	mov	r2, r3
 8005202:	d30b      	bcc.n	800521c <quorem+0x108>
 8005204:	f8c8 4010 	str.w	r4, [r8, #16]
 8005208:	4628      	mov	r0, r5
 800520a:	b003      	add	sp, #12
 800520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	3b04      	subs	r3, #4
 8005214:	2a00      	cmp	r2, #0
 8005216:	d1ca      	bne.n	80051ae <quorem+0x9a>
 8005218:	3c01      	subs	r4, #1
 800521a:	e7c5      	b.n	80051a8 <quorem+0x94>
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	3b04      	subs	r3, #4
 8005220:	2a00      	cmp	r2, #0
 8005222:	d1ef      	bne.n	8005204 <quorem+0xf0>
 8005224:	3c01      	subs	r4, #1
 8005226:	e7ea      	b.n	80051fe <quorem+0xea>
 8005228:	2000      	movs	r0, #0
 800522a:	e7ee      	b.n	800520a <quorem+0xf6>
 800522c:	0000      	movs	r0, r0
	...

08005230 <_dtoa_r>:
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	ec57 6b10 	vmov	r6, r7, d0
 8005238:	b097      	sub	sp, #92	; 0x5c
 800523a:	e9cd 6700 	strd	r6, r7, [sp]
 800523e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005240:	9107      	str	r1, [sp, #28]
 8005242:	4604      	mov	r4, r0
 8005244:	920a      	str	r2, [sp, #40]	; 0x28
 8005246:	930f      	str	r3, [sp, #60]	; 0x3c
 8005248:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800524a:	b93e      	cbnz	r6, 800525c <_dtoa_r+0x2c>
 800524c:	2010      	movs	r0, #16
 800524e:	f000 fdcb 	bl	8005de8 <malloc>
 8005252:	6260      	str	r0, [r4, #36]	; 0x24
 8005254:	6046      	str	r6, [r0, #4]
 8005256:	6086      	str	r6, [r0, #8]
 8005258:	6006      	str	r6, [r0, #0]
 800525a:	60c6      	str	r6, [r0, #12]
 800525c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	b151      	cbz	r1, 8005278 <_dtoa_r+0x48>
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	604a      	str	r2, [r1, #4]
 8005266:	2301      	movs	r3, #1
 8005268:	4093      	lsls	r3, r2
 800526a:	608b      	str	r3, [r1, #8]
 800526c:	4620      	mov	r0, r4
 800526e:	f000 fdf7 	bl	8005e60 <_Bfree>
 8005272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	9b01      	ldr	r3, [sp, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	bfbf      	itttt	lt
 800527e:	2301      	movlt	r3, #1
 8005280:	602b      	strlt	r3, [r5, #0]
 8005282:	9b01      	ldrlt	r3, [sp, #4]
 8005284:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005288:	bfb2      	itee	lt
 800528a:	9301      	strlt	r3, [sp, #4]
 800528c:	2300      	movge	r3, #0
 800528e:	602b      	strge	r3, [r5, #0]
 8005290:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005294:	4ba8      	ldr	r3, [pc, #672]	; (8005538 <_dtoa_r+0x308>)
 8005296:	ea33 0308 	bics.w	r3, r3, r8
 800529a:	d11b      	bne.n	80052d4 <_dtoa_r+0xa4>
 800529c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800529e:	f242 730f 	movw	r3, #9999	; 0x270f
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	9b00      	ldr	r3, [sp, #0]
 80052a6:	b923      	cbnz	r3, 80052b2 <_dtoa_r+0x82>
 80052a8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80052ac:	2800      	cmp	r0, #0
 80052ae:	f000 8578 	beq.w	8005da2 <_dtoa_r+0xb72>
 80052b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052b4:	b953      	cbnz	r3, 80052cc <_dtoa_r+0x9c>
 80052b6:	4ba1      	ldr	r3, [pc, #644]	; (800553c <_dtoa_r+0x30c>)
 80052b8:	e021      	b.n	80052fe <_dtoa_r+0xce>
 80052ba:	4ba1      	ldr	r3, [pc, #644]	; (8005540 <_dtoa_r+0x310>)
 80052bc:	9302      	str	r3, [sp, #8]
 80052be:	3308      	adds	r3, #8
 80052c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	9802      	ldr	r0, [sp, #8]
 80052c6:	b017      	add	sp, #92	; 0x5c
 80052c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052cc:	4b9b      	ldr	r3, [pc, #620]	; (800553c <_dtoa_r+0x30c>)
 80052ce:	9302      	str	r3, [sp, #8]
 80052d0:	3303      	adds	r3, #3
 80052d2:	e7f5      	b.n	80052c0 <_dtoa_r+0x90>
 80052d4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80052d8:	2200      	movs	r2, #0
 80052da:	2300      	movs	r3, #0
 80052dc:	4630      	mov	r0, r6
 80052de:	4639      	mov	r1, r7
 80052e0:	f7fb fbee 	bl	8000ac0 <__aeabi_dcmpeq>
 80052e4:	4681      	mov	r9, r0
 80052e6:	b160      	cbz	r0, 8005302 <_dtoa_r+0xd2>
 80052e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052ea:	2301      	movs	r3, #1
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8553 	beq.w	8005d9c <_dtoa_r+0xb6c>
 80052f6:	4b93      	ldr	r3, [pc, #588]	; (8005544 <_dtoa_r+0x314>)
 80052f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	9302      	str	r3, [sp, #8]
 8005300:	e7e0      	b.n	80052c4 <_dtoa_r+0x94>
 8005302:	aa14      	add	r2, sp, #80	; 0x50
 8005304:	a915      	add	r1, sp, #84	; 0x54
 8005306:	ec47 6b10 	vmov	d0, r6, r7
 800530a:	4620      	mov	r0, r4
 800530c:	f000 fff5 	bl	80062fa <__d2b>
 8005310:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005314:	4682      	mov	sl, r0
 8005316:	2d00      	cmp	r5, #0
 8005318:	d07e      	beq.n	8005418 <_dtoa_r+0x1e8>
 800531a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800531e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005322:	4630      	mov	r0, r6
 8005324:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005328:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800532c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8005330:	2200      	movs	r2, #0
 8005332:	4b85      	ldr	r3, [pc, #532]	; (8005548 <_dtoa_r+0x318>)
 8005334:	f7fa ffa8 	bl	8000288 <__aeabi_dsub>
 8005338:	a379      	add	r3, pc, #484	; (adr r3, 8005520 <_dtoa_r+0x2f0>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fb f957 	bl	80005f0 <__aeabi_dmul>
 8005342:	a379      	add	r3, pc, #484	; (adr r3, 8005528 <_dtoa_r+0x2f8>)
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f7fa ffa0 	bl	800028c <__adddf3>
 800534c:	4606      	mov	r6, r0
 800534e:	4628      	mov	r0, r5
 8005350:	460f      	mov	r7, r1
 8005352:	f7fb f8e7 	bl	8000524 <__aeabi_i2d>
 8005356:	a376      	add	r3, pc, #472	; (adr r3, 8005530 <_dtoa_r+0x300>)
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f7fb f948 	bl	80005f0 <__aeabi_dmul>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4630      	mov	r0, r6
 8005366:	4639      	mov	r1, r7
 8005368:	f7fa ff90 	bl	800028c <__adddf3>
 800536c:	4606      	mov	r6, r0
 800536e:	460f      	mov	r7, r1
 8005370:	f7fb fbee 	bl	8000b50 <__aeabi_d2iz>
 8005374:	2200      	movs	r2, #0
 8005376:	4683      	mov	fp, r0
 8005378:	2300      	movs	r3, #0
 800537a:	4630      	mov	r0, r6
 800537c:	4639      	mov	r1, r7
 800537e:	f7fb fba9 	bl	8000ad4 <__aeabi_dcmplt>
 8005382:	b158      	cbz	r0, 800539c <_dtoa_r+0x16c>
 8005384:	4658      	mov	r0, fp
 8005386:	f7fb f8cd 	bl	8000524 <__aeabi_i2d>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4630      	mov	r0, r6
 8005390:	4639      	mov	r1, r7
 8005392:	f7fb fb95 	bl	8000ac0 <__aeabi_dcmpeq>
 8005396:	b908      	cbnz	r0, 800539c <_dtoa_r+0x16c>
 8005398:	f10b 3bff 	add.w	fp, fp, #4294967295
 800539c:	f1bb 0f16 	cmp.w	fp, #22
 80053a0:	d859      	bhi.n	8005456 <_dtoa_r+0x226>
 80053a2:	496a      	ldr	r1, [pc, #424]	; (800554c <_dtoa_r+0x31c>)
 80053a4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80053a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053b0:	f7fb fbae 	bl	8000b10 <__aeabi_dcmpgt>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d050      	beq.n	800545a <_dtoa_r+0x22a>
 80053b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053bc:	2300      	movs	r3, #0
 80053be:	930e      	str	r3, [sp, #56]	; 0x38
 80053c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053c2:	1b5d      	subs	r5, r3, r5
 80053c4:	1e6b      	subs	r3, r5, #1
 80053c6:	9306      	str	r3, [sp, #24]
 80053c8:	bf45      	ittet	mi
 80053ca:	f1c5 0301 	rsbmi	r3, r5, #1
 80053ce:	9305      	strmi	r3, [sp, #20]
 80053d0:	2300      	movpl	r3, #0
 80053d2:	2300      	movmi	r3, #0
 80053d4:	bf4c      	ite	mi
 80053d6:	9306      	strmi	r3, [sp, #24]
 80053d8:	9305      	strpl	r3, [sp, #20]
 80053da:	f1bb 0f00 	cmp.w	fp, #0
 80053de:	db3e      	blt.n	800545e <_dtoa_r+0x22e>
 80053e0:	9b06      	ldr	r3, [sp, #24]
 80053e2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80053e6:	445b      	add	r3, fp
 80053e8:	9306      	str	r3, [sp, #24]
 80053ea:	2300      	movs	r3, #0
 80053ec:	9308      	str	r3, [sp, #32]
 80053ee:	9b07      	ldr	r3, [sp, #28]
 80053f0:	2b09      	cmp	r3, #9
 80053f2:	f200 80af 	bhi.w	8005554 <_dtoa_r+0x324>
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	bfc4      	itt	gt
 80053fa:	3b04      	subgt	r3, #4
 80053fc:	9307      	strgt	r3, [sp, #28]
 80053fe:	9b07      	ldr	r3, [sp, #28]
 8005400:	f1a3 0302 	sub.w	r3, r3, #2
 8005404:	bfcc      	ite	gt
 8005406:	2600      	movgt	r6, #0
 8005408:	2601      	movle	r6, #1
 800540a:	2b03      	cmp	r3, #3
 800540c:	f200 80ae 	bhi.w	800556c <_dtoa_r+0x33c>
 8005410:	e8df f003 	tbb	[pc, r3]
 8005414:	772f8482 	.word	0x772f8482
 8005418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800541a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800541c:	441d      	add	r5, r3
 800541e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005422:	2b20      	cmp	r3, #32
 8005424:	dd11      	ble.n	800544a <_dtoa_r+0x21a>
 8005426:	9a00      	ldr	r2, [sp, #0]
 8005428:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800542c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005430:	fa22 f000 	lsr.w	r0, r2, r0
 8005434:	fa08 f303 	lsl.w	r3, r8, r3
 8005438:	4318      	orrs	r0, r3
 800543a:	f7fb f863 	bl	8000504 <__aeabi_ui2d>
 800543e:	2301      	movs	r3, #1
 8005440:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005444:	3d01      	subs	r5, #1
 8005446:	9312      	str	r3, [sp, #72]	; 0x48
 8005448:	e772      	b.n	8005330 <_dtoa_r+0x100>
 800544a:	f1c3 0020 	rsb	r0, r3, #32
 800544e:	9b00      	ldr	r3, [sp, #0]
 8005450:	fa03 f000 	lsl.w	r0, r3, r0
 8005454:	e7f1      	b.n	800543a <_dtoa_r+0x20a>
 8005456:	2301      	movs	r3, #1
 8005458:	e7b1      	b.n	80053be <_dtoa_r+0x18e>
 800545a:	900e      	str	r0, [sp, #56]	; 0x38
 800545c:	e7b0      	b.n	80053c0 <_dtoa_r+0x190>
 800545e:	9b05      	ldr	r3, [sp, #20]
 8005460:	eba3 030b 	sub.w	r3, r3, fp
 8005464:	9305      	str	r3, [sp, #20]
 8005466:	f1cb 0300 	rsb	r3, fp, #0
 800546a:	9308      	str	r3, [sp, #32]
 800546c:	2300      	movs	r3, #0
 800546e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005470:	e7bd      	b.n	80053ee <_dtoa_r+0x1be>
 8005472:	2301      	movs	r3, #1
 8005474:	9309      	str	r3, [sp, #36]	; 0x24
 8005476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005478:	2b00      	cmp	r3, #0
 800547a:	dd7a      	ble.n	8005572 <_dtoa_r+0x342>
 800547c:	9304      	str	r3, [sp, #16]
 800547e:	9303      	str	r3, [sp, #12]
 8005480:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005482:	2200      	movs	r2, #0
 8005484:	606a      	str	r2, [r5, #4]
 8005486:	2104      	movs	r1, #4
 8005488:	f101 0214 	add.w	r2, r1, #20
 800548c:	429a      	cmp	r2, r3
 800548e:	d975      	bls.n	800557c <_dtoa_r+0x34c>
 8005490:	6869      	ldr	r1, [r5, #4]
 8005492:	4620      	mov	r0, r4
 8005494:	f000 fcb0 	bl	8005df8 <_Balloc>
 8005498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800549a:	6028      	str	r0, [r5, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	9302      	str	r3, [sp, #8]
 80054a0:	9b03      	ldr	r3, [sp, #12]
 80054a2:	2b0e      	cmp	r3, #14
 80054a4:	f200 80e5 	bhi.w	8005672 <_dtoa_r+0x442>
 80054a8:	2e00      	cmp	r6, #0
 80054aa:	f000 80e2 	beq.w	8005672 <_dtoa_r+0x442>
 80054ae:	ed9d 7b00 	vldr	d7, [sp]
 80054b2:	f1bb 0f00 	cmp.w	fp, #0
 80054b6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80054ba:	dd74      	ble.n	80055a6 <_dtoa_r+0x376>
 80054bc:	4a23      	ldr	r2, [pc, #140]	; (800554c <_dtoa_r+0x31c>)
 80054be:	f00b 030f 	and.w	r3, fp, #15
 80054c2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80054c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054ca:	06f0      	lsls	r0, r6, #27
 80054cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054d0:	d559      	bpl.n	8005586 <_dtoa_r+0x356>
 80054d2:	4b1f      	ldr	r3, [pc, #124]	; (8005550 <_dtoa_r+0x320>)
 80054d4:	ec51 0b17 	vmov	r0, r1, d7
 80054d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054dc:	f7fb f9b2 	bl	8000844 <__aeabi_ddiv>
 80054e0:	e9cd 0100 	strd	r0, r1, [sp]
 80054e4:	f006 060f 	and.w	r6, r6, #15
 80054e8:	2503      	movs	r5, #3
 80054ea:	4f19      	ldr	r7, [pc, #100]	; (8005550 <_dtoa_r+0x320>)
 80054ec:	2e00      	cmp	r6, #0
 80054ee:	d14c      	bne.n	800558a <_dtoa_r+0x35a>
 80054f0:	4642      	mov	r2, r8
 80054f2:	464b      	mov	r3, r9
 80054f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054f8:	f7fb f9a4 	bl	8000844 <__aeabi_ddiv>
 80054fc:	e9cd 0100 	strd	r0, r1, [sp]
 8005500:	e06a      	b.n	80055d8 <_dtoa_r+0x3a8>
 8005502:	2301      	movs	r3, #1
 8005504:	9309      	str	r3, [sp, #36]	; 0x24
 8005506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005508:	445b      	add	r3, fp
 800550a:	9304      	str	r3, [sp, #16]
 800550c:	3301      	adds	r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	9303      	str	r3, [sp, #12]
 8005512:	bfb8      	it	lt
 8005514:	2301      	movlt	r3, #1
 8005516:	e7b3      	b.n	8005480 <_dtoa_r+0x250>
 8005518:	2300      	movs	r3, #0
 800551a:	e7ab      	b.n	8005474 <_dtoa_r+0x244>
 800551c:	2300      	movs	r3, #0
 800551e:	e7f1      	b.n	8005504 <_dtoa_r+0x2d4>
 8005520:	636f4361 	.word	0x636f4361
 8005524:	3fd287a7 	.word	0x3fd287a7
 8005528:	8b60c8b3 	.word	0x8b60c8b3
 800552c:	3fc68a28 	.word	0x3fc68a28
 8005530:	509f79fb 	.word	0x509f79fb
 8005534:	3fd34413 	.word	0x3fd34413
 8005538:	7ff00000 	.word	0x7ff00000
 800553c:	08006a2d 	.word	0x08006a2d
 8005540:	08006a24 	.word	0x08006a24
 8005544:	08006a01 	.word	0x08006a01
 8005548:	3ff80000 	.word	0x3ff80000
 800554c:	08006a60 	.word	0x08006a60
 8005550:	08006a38 	.word	0x08006a38
 8005554:	2601      	movs	r6, #1
 8005556:	2300      	movs	r3, #0
 8005558:	9307      	str	r3, [sp, #28]
 800555a:	9609      	str	r6, [sp, #36]	; 0x24
 800555c:	f04f 33ff 	mov.w	r3, #4294967295
 8005560:	9304      	str	r3, [sp, #16]
 8005562:	9303      	str	r3, [sp, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	2312      	movs	r3, #18
 8005568:	920a      	str	r2, [sp, #40]	; 0x28
 800556a:	e789      	b.n	8005480 <_dtoa_r+0x250>
 800556c:	2301      	movs	r3, #1
 800556e:	9309      	str	r3, [sp, #36]	; 0x24
 8005570:	e7f4      	b.n	800555c <_dtoa_r+0x32c>
 8005572:	2301      	movs	r3, #1
 8005574:	9304      	str	r3, [sp, #16]
 8005576:	9303      	str	r3, [sp, #12]
 8005578:	461a      	mov	r2, r3
 800557a:	e7f5      	b.n	8005568 <_dtoa_r+0x338>
 800557c:	686a      	ldr	r2, [r5, #4]
 800557e:	3201      	adds	r2, #1
 8005580:	606a      	str	r2, [r5, #4]
 8005582:	0049      	lsls	r1, r1, #1
 8005584:	e780      	b.n	8005488 <_dtoa_r+0x258>
 8005586:	2502      	movs	r5, #2
 8005588:	e7af      	b.n	80054ea <_dtoa_r+0x2ba>
 800558a:	07f1      	lsls	r1, r6, #31
 800558c:	d508      	bpl.n	80055a0 <_dtoa_r+0x370>
 800558e:	4640      	mov	r0, r8
 8005590:	4649      	mov	r1, r9
 8005592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005596:	f7fb f82b 	bl	80005f0 <__aeabi_dmul>
 800559a:	3501      	adds	r5, #1
 800559c:	4680      	mov	r8, r0
 800559e:	4689      	mov	r9, r1
 80055a0:	1076      	asrs	r6, r6, #1
 80055a2:	3708      	adds	r7, #8
 80055a4:	e7a2      	b.n	80054ec <_dtoa_r+0x2bc>
 80055a6:	f000 809d 	beq.w	80056e4 <_dtoa_r+0x4b4>
 80055aa:	f1cb 0600 	rsb	r6, fp, #0
 80055ae:	4b9f      	ldr	r3, [pc, #636]	; (800582c <_dtoa_r+0x5fc>)
 80055b0:	4f9f      	ldr	r7, [pc, #636]	; (8005830 <_dtoa_r+0x600>)
 80055b2:	f006 020f 	and.w	r2, r6, #15
 80055b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055c2:	f7fb f815 	bl	80005f0 <__aeabi_dmul>
 80055c6:	e9cd 0100 	strd	r0, r1, [sp]
 80055ca:	1136      	asrs	r6, r6, #4
 80055cc:	2300      	movs	r3, #0
 80055ce:	2502      	movs	r5, #2
 80055d0:	2e00      	cmp	r6, #0
 80055d2:	d17c      	bne.n	80056ce <_dtoa_r+0x49e>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d191      	bne.n	80054fc <_dtoa_r+0x2cc>
 80055d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 8084 	beq.w	80056e8 <_dtoa_r+0x4b8>
 80055e0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80055e4:	2200      	movs	r2, #0
 80055e6:	4b93      	ldr	r3, [pc, #588]	; (8005834 <_dtoa_r+0x604>)
 80055e8:	4640      	mov	r0, r8
 80055ea:	4649      	mov	r1, r9
 80055ec:	f7fb fa72 	bl	8000ad4 <__aeabi_dcmplt>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d079      	beq.n	80056e8 <_dtoa_r+0x4b8>
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d076      	beq.n	80056e8 <_dtoa_r+0x4b8>
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dd34      	ble.n	800566a <_dtoa_r+0x43a>
 8005600:	2200      	movs	r2, #0
 8005602:	4b8d      	ldr	r3, [pc, #564]	; (8005838 <_dtoa_r+0x608>)
 8005604:	4640      	mov	r0, r8
 8005606:	4649      	mov	r1, r9
 8005608:	f7fa fff2 	bl	80005f0 <__aeabi_dmul>
 800560c:	e9cd 0100 	strd	r0, r1, [sp]
 8005610:	9e04      	ldr	r6, [sp, #16]
 8005612:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005616:	3501      	adds	r5, #1
 8005618:	4628      	mov	r0, r5
 800561a:	f7fa ff83 	bl	8000524 <__aeabi_i2d>
 800561e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005622:	f7fa ffe5 	bl	80005f0 <__aeabi_dmul>
 8005626:	2200      	movs	r2, #0
 8005628:	4b84      	ldr	r3, [pc, #528]	; (800583c <_dtoa_r+0x60c>)
 800562a:	f7fa fe2f 	bl	800028c <__adddf3>
 800562e:	4680      	mov	r8, r0
 8005630:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005634:	2e00      	cmp	r6, #0
 8005636:	d15a      	bne.n	80056ee <_dtoa_r+0x4be>
 8005638:	2200      	movs	r2, #0
 800563a:	4b81      	ldr	r3, [pc, #516]	; (8005840 <_dtoa_r+0x610>)
 800563c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005640:	f7fa fe22 	bl	8000288 <__aeabi_dsub>
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	e9cd 0100 	strd	r0, r1, [sp]
 800564c:	f7fb fa60 	bl	8000b10 <__aeabi_dcmpgt>
 8005650:	2800      	cmp	r0, #0
 8005652:	f040 829b 	bne.w	8005b8c <_dtoa_r+0x95c>
 8005656:	4642      	mov	r2, r8
 8005658:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800565c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005660:	f7fb fa38 	bl	8000ad4 <__aeabi_dcmplt>
 8005664:	2800      	cmp	r0, #0
 8005666:	f040 828f 	bne.w	8005b88 <_dtoa_r+0x958>
 800566a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800566e:	e9cd 2300 	strd	r2, r3, [sp]
 8005672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005674:	2b00      	cmp	r3, #0
 8005676:	f2c0 8150 	blt.w	800591a <_dtoa_r+0x6ea>
 800567a:	f1bb 0f0e 	cmp.w	fp, #14
 800567e:	f300 814c 	bgt.w	800591a <_dtoa_r+0x6ea>
 8005682:	4b6a      	ldr	r3, [pc, #424]	; (800582c <_dtoa_r+0x5fc>)
 8005684:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005688:	e9d3 8900 	ldrd	r8, r9, [r3]
 800568c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	f280 80da 	bge.w	8005848 <_dtoa_r+0x618>
 8005694:	9b03      	ldr	r3, [sp, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f300 80d6 	bgt.w	8005848 <_dtoa_r+0x618>
 800569c:	f040 8273 	bne.w	8005b86 <_dtoa_r+0x956>
 80056a0:	2200      	movs	r2, #0
 80056a2:	4b67      	ldr	r3, [pc, #412]	; (8005840 <_dtoa_r+0x610>)
 80056a4:	4640      	mov	r0, r8
 80056a6:	4649      	mov	r1, r9
 80056a8:	f7fa ffa2 	bl	80005f0 <__aeabi_dmul>
 80056ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056b0:	f7fb fa24 	bl	8000afc <__aeabi_dcmpge>
 80056b4:	9e03      	ldr	r6, [sp, #12]
 80056b6:	4637      	mov	r7, r6
 80056b8:	2800      	cmp	r0, #0
 80056ba:	f040 824a 	bne.w	8005b52 <_dtoa_r+0x922>
 80056be:	9b02      	ldr	r3, [sp, #8]
 80056c0:	9a02      	ldr	r2, [sp, #8]
 80056c2:	1c5d      	adds	r5, r3, #1
 80056c4:	2331      	movs	r3, #49	; 0x31
 80056c6:	7013      	strb	r3, [r2, #0]
 80056c8:	f10b 0b01 	add.w	fp, fp, #1
 80056cc:	e245      	b.n	8005b5a <_dtoa_r+0x92a>
 80056ce:	07f2      	lsls	r2, r6, #31
 80056d0:	d505      	bpl.n	80056de <_dtoa_r+0x4ae>
 80056d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056d6:	f7fa ff8b 	bl	80005f0 <__aeabi_dmul>
 80056da:	3501      	adds	r5, #1
 80056dc:	2301      	movs	r3, #1
 80056de:	1076      	asrs	r6, r6, #1
 80056e0:	3708      	adds	r7, #8
 80056e2:	e775      	b.n	80055d0 <_dtoa_r+0x3a0>
 80056e4:	2502      	movs	r5, #2
 80056e6:	e777      	b.n	80055d8 <_dtoa_r+0x3a8>
 80056e8:	465f      	mov	r7, fp
 80056ea:	9e03      	ldr	r6, [sp, #12]
 80056ec:	e794      	b.n	8005618 <_dtoa_r+0x3e8>
 80056ee:	9a02      	ldr	r2, [sp, #8]
 80056f0:	4b4e      	ldr	r3, [pc, #312]	; (800582c <_dtoa_r+0x5fc>)
 80056f2:	4432      	add	r2, r6
 80056f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80056f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f8:	1e71      	subs	r1, r6, #1
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	d048      	beq.n	8005790 <_dtoa_r+0x560>
 80056fe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	2000      	movs	r0, #0
 8005708:	494e      	ldr	r1, [pc, #312]	; (8005844 <_dtoa_r+0x614>)
 800570a:	f7fb f89b 	bl	8000844 <__aeabi_ddiv>
 800570e:	4642      	mov	r2, r8
 8005710:	464b      	mov	r3, r9
 8005712:	f7fa fdb9 	bl	8000288 <__aeabi_dsub>
 8005716:	9d02      	ldr	r5, [sp, #8]
 8005718:	4680      	mov	r8, r0
 800571a:	4689      	mov	r9, r1
 800571c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005720:	f7fb fa16 	bl	8000b50 <__aeabi_d2iz>
 8005724:	4606      	mov	r6, r0
 8005726:	f7fa fefd 	bl	8000524 <__aeabi_i2d>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005732:	f7fa fda9 	bl	8000288 <__aeabi_dsub>
 8005736:	3630      	adds	r6, #48	; 0x30
 8005738:	f805 6b01 	strb.w	r6, [r5], #1
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	e9cd 0100 	strd	r0, r1, [sp]
 8005744:	f7fb f9c6 	bl	8000ad4 <__aeabi_dcmplt>
 8005748:	2800      	cmp	r0, #0
 800574a:	d165      	bne.n	8005818 <_dtoa_r+0x5e8>
 800574c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005750:	2000      	movs	r0, #0
 8005752:	4938      	ldr	r1, [pc, #224]	; (8005834 <_dtoa_r+0x604>)
 8005754:	f7fa fd98 	bl	8000288 <__aeabi_dsub>
 8005758:	4642      	mov	r2, r8
 800575a:	464b      	mov	r3, r9
 800575c:	f7fb f9ba 	bl	8000ad4 <__aeabi_dcmplt>
 8005760:	2800      	cmp	r0, #0
 8005762:	f040 80ba 	bne.w	80058da <_dtoa_r+0x6aa>
 8005766:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005768:	429d      	cmp	r5, r3
 800576a:	f43f af7e 	beq.w	800566a <_dtoa_r+0x43a>
 800576e:	2200      	movs	r2, #0
 8005770:	4b31      	ldr	r3, [pc, #196]	; (8005838 <_dtoa_r+0x608>)
 8005772:	4640      	mov	r0, r8
 8005774:	4649      	mov	r1, r9
 8005776:	f7fa ff3b 	bl	80005f0 <__aeabi_dmul>
 800577a:	2200      	movs	r2, #0
 800577c:	4680      	mov	r8, r0
 800577e:	4689      	mov	r9, r1
 8005780:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <_dtoa_r+0x608>)
 8005782:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005786:	f7fa ff33 	bl	80005f0 <__aeabi_dmul>
 800578a:	e9cd 0100 	strd	r0, r1, [sp]
 800578e:	e7c5      	b.n	800571c <_dtoa_r+0x4ec>
 8005790:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005794:	4642      	mov	r2, r8
 8005796:	464b      	mov	r3, r9
 8005798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800579c:	f7fa ff28 	bl	80005f0 <__aeabi_dmul>
 80057a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057a4:	9d02      	ldr	r5, [sp, #8]
 80057a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057aa:	f7fb f9d1 	bl	8000b50 <__aeabi_d2iz>
 80057ae:	4606      	mov	r6, r0
 80057b0:	f7fa feb8 	bl	8000524 <__aeabi_i2d>
 80057b4:	3630      	adds	r6, #48	; 0x30
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057be:	f7fa fd63 	bl	8000288 <__aeabi_dsub>
 80057c2:	f805 6b01 	strb.w	r6, [r5], #1
 80057c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057c8:	42ab      	cmp	r3, r5
 80057ca:	4680      	mov	r8, r0
 80057cc:	4689      	mov	r9, r1
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	d125      	bne.n	8005820 <_dtoa_r+0x5f0>
 80057d4:	4b1b      	ldr	r3, [pc, #108]	; (8005844 <_dtoa_r+0x614>)
 80057d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057da:	f7fa fd57 	bl	800028c <__adddf3>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4640      	mov	r0, r8
 80057e4:	4649      	mov	r1, r9
 80057e6:	f7fb f993 	bl	8000b10 <__aeabi_dcmpgt>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d175      	bne.n	80058da <_dtoa_r+0x6aa>
 80057ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057f2:	2000      	movs	r0, #0
 80057f4:	4913      	ldr	r1, [pc, #76]	; (8005844 <_dtoa_r+0x614>)
 80057f6:	f7fa fd47 	bl	8000288 <__aeabi_dsub>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4640      	mov	r0, r8
 8005800:	4649      	mov	r1, r9
 8005802:	f7fb f967 	bl	8000ad4 <__aeabi_dcmplt>
 8005806:	2800      	cmp	r0, #0
 8005808:	f43f af2f 	beq.w	800566a <_dtoa_r+0x43a>
 800580c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005810:	2b30      	cmp	r3, #48	; 0x30
 8005812:	f105 32ff 	add.w	r2, r5, #4294967295
 8005816:	d001      	beq.n	800581c <_dtoa_r+0x5ec>
 8005818:	46bb      	mov	fp, r7
 800581a:	e04d      	b.n	80058b8 <_dtoa_r+0x688>
 800581c:	4615      	mov	r5, r2
 800581e:	e7f5      	b.n	800580c <_dtoa_r+0x5dc>
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <_dtoa_r+0x608>)
 8005822:	f7fa fee5 	bl	80005f0 <__aeabi_dmul>
 8005826:	e9cd 0100 	strd	r0, r1, [sp]
 800582a:	e7bc      	b.n	80057a6 <_dtoa_r+0x576>
 800582c:	08006a60 	.word	0x08006a60
 8005830:	08006a38 	.word	0x08006a38
 8005834:	3ff00000 	.word	0x3ff00000
 8005838:	40240000 	.word	0x40240000
 800583c:	401c0000 	.word	0x401c0000
 8005840:	40140000 	.word	0x40140000
 8005844:	3fe00000 	.word	0x3fe00000
 8005848:	e9dd 6700 	ldrd	r6, r7, [sp]
 800584c:	9d02      	ldr	r5, [sp, #8]
 800584e:	4642      	mov	r2, r8
 8005850:	464b      	mov	r3, r9
 8005852:	4630      	mov	r0, r6
 8005854:	4639      	mov	r1, r7
 8005856:	f7fa fff5 	bl	8000844 <__aeabi_ddiv>
 800585a:	f7fb f979 	bl	8000b50 <__aeabi_d2iz>
 800585e:	9000      	str	r0, [sp, #0]
 8005860:	f7fa fe60 	bl	8000524 <__aeabi_i2d>
 8005864:	4642      	mov	r2, r8
 8005866:	464b      	mov	r3, r9
 8005868:	f7fa fec2 	bl	80005f0 <__aeabi_dmul>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4630      	mov	r0, r6
 8005872:	4639      	mov	r1, r7
 8005874:	f7fa fd08 	bl	8000288 <__aeabi_dsub>
 8005878:	9e00      	ldr	r6, [sp, #0]
 800587a:	9f03      	ldr	r7, [sp, #12]
 800587c:	3630      	adds	r6, #48	; 0x30
 800587e:	f805 6b01 	strb.w	r6, [r5], #1
 8005882:	9e02      	ldr	r6, [sp, #8]
 8005884:	1bae      	subs	r6, r5, r6
 8005886:	42b7      	cmp	r7, r6
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	d138      	bne.n	8005900 <_dtoa_r+0x6d0>
 800588e:	f7fa fcfd 	bl	800028c <__adddf3>
 8005892:	4606      	mov	r6, r0
 8005894:	460f      	mov	r7, r1
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4640      	mov	r0, r8
 800589c:	4649      	mov	r1, r9
 800589e:	f7fb f919 	bl	8000ad4 <__aeabi_dcmplt>
 80058a2:	b9c8      	cbnz	r0, 80058d8 <_dtoa_r+0x6a8>
 80058a4:	4632      	mov	r2, r6
 80058a6:	463b      	mov	r3, r7
 80058a8:	4640      	mov	r0, r8
 80058aa:	4649      	mov	r1, r9
 80058ac:	f7fb f908 	bl	8000ac0 <__aeabi_dcmpeq>
 80058b0:	b110      	cbz	r0, 80058b8 <_dtoa_r+0x688>
 80058b2:	9b00      	ldr	r3, [sp, #0]
 80058b4:	07db      	lsls	r3, r3, #31
 80058b6:	d40f      	bmi.n	80058d8 <_dtoa_r+0x6a8>
 80058b8:	4651      	mov	r1, sl
 80058ba:	4620      	mov	r0, r4
 80058bc:	f000 fad0 	bl	8005e60 <_Bfree>
 80058c0:	2300      	movs	r3, #0
 80058c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058c4:	702b      	strb	r3, [r5, #0]
 80058c6:	f10b 0301 	add.w	r3, fp, #1
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f43f acf8 	beq.w	80052c4 <_dtoa_r+0x94>
 80058d4:	601d      	str	r5, [r3, #0]
 80058d6:	e4f5      	b.n	80052c4 <_dtoa_r+0x94>
 80058d8:	465f      	mov	r7, fp
 80058da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058de:	2a39      	cmp	r2, #57	; 0x39
 80058e0:	f105 33ff 	add.w	r3, r5, #4294967295
 80058e4:	d106      	bne.n	80058f4 <_dtoa_r+0x6c4>
 80058e6:	9a02      	ldr	r2, [sp, #8]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d107      	bne.n	80058fc <_dtoa_r+0x6cc>
 80058ec:	2330      	movs	r3, #48	; 0x30
 80058ee:	7013      	strb	r3, [r2, #0]
 80058f0:	3701      	adds	r7, #1
 80058f2:	4613      	mov	r3, r2
 80058f4:	781a      	ldrb	r2, [r3, #0]
 80058f6:	3201      	adds	r2, #1
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e78d      	b.n	8005818 <_dtoa_r+0x5e8>
 80058fc:	461d      	mov	r5, r3
 80058fe:	e7ec      	b.n	80058da <_dtoa_r+0x6aa>
 8005900:	2200      	movs	r2, #0
 8005902:	4ba4      	ldr	r3, [pc, #656]	; (8005b94 <_dtoa_r+0x964>)
 8005904:	f7fa fe74 	bl	80005f0 <__aeabi_dmul>
 8005908:	2200      	movs	r2, #0
 800590a:	2300      	movs	r3, #0
 800590c:	4606      	mov	r6, r0
 800590e:	460f      	mov	r7, r1
 8005910:	f7fb f8d6 	bl	8000ac0 <__aeabi_dcmpeq>
 8005914:	2800      	cmp	r0, #0
 8005916:	d09a      	beq.n	800584e <_dtoa_r+0x61e>
 8005918:	e7ce      	b.n	80058b8 <_dtoa_r+0x688>
 800591a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800591c:	2a00      	cmp	r2, #0
 800591e:	f000 80cd 	beq.w	8005abc <_dtoa_r+0x88c>
 8005922:	9a07      	ldr	r2, [sp, #28]
 8005924:	2a01      	cmp	r2, #1
 8005926:	f300 80af 	bgt.w	8005a88 <_dtoa_r+0x858>
 800592a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800592c:	2a00      	cmp	r2, #0
 800592e:	f000 80a7 	beq.w	8005a80 <_dtoa_r+0x850>
 8005932:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005936:	9e08      	ldr	r6, [sp, #32]
 8005938:	9d05      	ldr	r5, [sp, #20]
 800593a:	9a05      	ldr	r2, [sp, #20]
 800593c:	441a      	add	r2, r3
 800593e:	9205      	str	r2, [sp, #20]
 8005940:	9a06      	ldr	r2, [sp, #24]
 8005942:	2101      	movs	r1, #1
 8005944:	441a      	add	r2, r3
 8005946:	4620      	mov	r0, r4
 8005948:	9206      	str	r2, [sp, #24]
 800594a:	f000 fb29 	bl	8005fa0 <__i2b>
 800594e:	4607      	mov	r7, r0
 8005950:	2d00      	cmp	r5, #0
 8005952:	dd0c      	ble.n	800596e <_dtoa_r+0x73e>
 8005954:	9b06      	ldr	r3, [sp, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	dd09      	ble.n	800596e <_dtoa_r+0x73e>
 800595a:	42ab      	cmp	r3, r5
 800595c:	9a05      	ldr	r2, [sp, #20]
 800595e:	bfa8      	it	ge
 8005960:	462b      	movge	r3, r5
 8005962:	1ad2      	subs	r2, r2, r3
 8005964:	9205      	str	r2, [sp, #20]
 8005966:	9a06      	ldr	r2, [sp, #24]
 8005968:	1aed      	subs	r5, r5, r3
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	9306      	str	r3, [sp, #24]
 800596e:	9b08      	ldr	r3, [sp, #32]
 8005970:	b1f3      	cbz	r3, 80059b0 <_dtoa_r+0x780>
 8005972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80a5 	beq.w	8005ac4 <_dtoa_r+0x894>
 800597a:	2e00      	cmp	r6, #0
 800597c:	dd10      	ble.n	80059a0 <_dtoa_r+0x770>
 800597e:	4639      	mov	r1, r7
 8005980:	4632      	mov	r2, r6
 8005982:	4620      	mov	r0, r4
 8005984:	f000 fba2 	bl	80060cc <__pow5mult>
 8005988:	4652      	mov	r2, sl
 800598a:	4601      	mov	r1, r0
 800598c:	4607      	mov	r7, r0
 800598e:	4620      	mov	r0, r4
 8005990:	f000 fb0f 	bl	8005fb2 <__multiply>
 8005994:	4651      	mov	r1, sl
 8005996:	4680      	mov	r8, r0
 8005998:	4620      	mov	r0, r4
 800599a:	f000 fa61 	bl	8005e60 <_Bfree>
 800599e:	46c2      	mov	sl, r8
 80059a0:	9b08      	ldr	r3, [sp, #32]
 80059a2:	1b9a      	subs	r2, r3, r6
 80059a4:	d004      	beq.n	80059b0 <_dtoa_r+0x780>
 80059a6:	4651      	mov	r1, sl
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 fb8f 	bl	80060cc <__pow5mult>
 80059ae:	4682      	mov	sl, r0
 80059b0:	2101      	movs	r1, #1
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 faf4 	bl	8005fa0 <__i2b>
 80059b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	4606      	mov	r6, r0
 80059be:	f340 8083 	ble.w	8005ac8 <_dtoa_r+0x898>
 80059c2:	461a      	mov	r2, r3
 80059c4:	4601      	mov	r1, r0
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 fb80 	bl	80060cc <__pow5mult>
 80059cc:	9b07      	ldr	r3, [sp, #28]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	4606      	mov	r6, r0
 80059d2:	dd7c      	ble.n	8005ace <_dtoa_r+0x89e>
 80059d4:	f04f 0800 	mov.w	r8, #0
 80059d8:	6933      	ldr	r3, [r6, #16]
 80059da:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80059de:	6918      	ldr	r0, [r3, #16]
 80059e0:	f000 fa90 	bl	8005f04 <__hi0bits>
 80059e4:	f1c0 0020 	rsb	r0, r0, #32
 80059e8:	9b06      	ldr	r3, [sp, #24]
 80059ea:	4418      	add	r0, r3
 80059ec:	f010 001f 	ands.w	r0, r0, #31
 80059f0:	f000 8096 	beq.w	8005b20 <_dtoa_r+0x8f0>
 80059f4:	f1c0 0320 	rsb	r3, r0, #32
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	f340 8087 	ble.w	8005b0c <_dtoa_r+0x8dc>
 80059fe:	9b05      	ldr	r3, [sp, #20]
 8005a00:	f1c0 001c 	rsb	r0, r0, #28
 8005a04:	4403      	add	r3, r0
 8005a06:	9305      	str	r3, [sp, #20]
 8005a08:	9b06      	ldr	r3, [sp, #24]
 8005a0a:	4405      	add	r5, r0
 8005a0c:	4403      	add	r3, r0
 8005a0e:	9306      	str	r3, [sp, #24]
 8005a10:	9b05      	ldr	r3, [sp, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	dd05      	ble.n	8005a22 <_dtoa_r+0x7f2>
 8005a16:	4651      	mov	r1, sl
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 fba4 	bl	8006168 <__lshift>
 8005a20:	4682      	mov	sl, r0
 8005a22:	9b06      	ldr	r3, [sp, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	dd05      	ble.n	8005a34 <_dtoa_r+0x804>
 8005a28:	4631      	mov	r1, r6
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f000 fb9b 	bl	8006168 <__lshift>
 8005a32:	4606      	mov	r6, r0
 8005a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d074      	beq.n	8005b24 <_dtoa_r+0x8f4>
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4650      	mov	r0, sl
 8005a3e:	f000 fbe4 	bl	800620a <__mcmp>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	da6e      	bge.n	8005b24 <_dtoa_r+0x8f4>
 8005a46:	2300      	movs	r3, #0
 8005a48:	4651      	mov	r1, sl
 8005a4a:	220a      	movs	r2, #10
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f000 fa1e 	bl	8005e8e <__multadd>
 8005a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a58:	4682      	mov	sl, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 81a8 	beq.w	8005db0 <_dtoa_r+0xb80>
 8005a60:	2300      	movs	r3, #0
 8005a62:	4639      	mov	r1, r7
 8005a64:	220a      	movs	r2, #10
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 fa11 	bl	8005e8e <__multadd>
 8005a6c:	9b04      	ldr	r3, [sp, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	4607      	mov	r7, r0
 8005a72:	f300 80c8 	bgt.w	8005c06 <_dtoa_r+0x9d6>
 8005a76:	9b07      	ldr	r3, [sp, #28]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	f340 80c4 	ble.w	8005c06 <_dtoa_r+0x9d6>
 8005a7e:	e059      	b.n	8005b34 <_dtoa_r+0x904>
 8005a80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a86:	e756      	b.n	8005936 <_dtoa_r+0x706>
 8005a88:	9b03      	ldr	r3, [sp, #12]
 8005a8a:	1e5e      	subs	r6, r3, #1
 8005a8c:	9b08      	ldr	r3, [sp, #32]
 8005a8e:	42b3      	cmp	r3, r6
 8005a90:	bfbf      	itttt	lt
 8005a92:	9b08      	ldrlt	r3, [sp, #32]
 8005a94:	9608      	strlt	r6, [sp, #32]
 8005a96:	1af2      	sublt	r2, r6, r3
 8005a98:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8005a9a:	bfb6      	itet	lt
 8005a9c:	189b      	addlt	r3, r3, r2
 8005a9e:	1b9e      	subge	r6, r3, r6
 8005aa0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8005aa2:	9b03      	ldr	r3, [sp, #12]
 8005aa4:	bfb8      	it	lt
 8005aa6:	2600      	movlt	r6, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bfb9      	ittee	lt
 8005aac:	9b05      	ldrlt	r3, [sp, #20]
 8005aae:	9a03      	ldrlt	r2, [sp, #12]
 8005ab0:	9d05      	ldrge	r5, [sp, #20]
 8005ab2:	9b03      	ldrge	r3, [sp, #12]
 8005ab4:	bfbc      	itt	lt
 8005ab6:	1a9d      	sublt	r5, r3, r2
 8005ab8:	2300      	movlt	r3, #0
 8005aba:	e73e      	b.n	800593a <_dtoa_r+0x70a>
 8005abc:	9e08      	ldr	r6, [sp, #32]
 8005abe:	9d05      	ldr	r5, [sp, #20]
 8005ac0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ac2:	e745      	b.n	8005950 <_dtoa_r+0x720>
 8005ac4:	9a08      	ldr	r2, [sp, #32]
 8005ac6:	e76e      	b.n	80059a6 <_dtoa_r+0x776>
 8005ac8:	9b07      	ldr	r3, [sp, #28]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	dc19      	bgt.n	8005b02 <_dtoa_r+0x8d2>
 8005ace:	9b00      	ldr	r3, [sp, #0]
 8005ad0:	b9bb      	cbnz	r3, 8005b02 <_dtoa_r+0x8d2>
 8005ad2:	9b01      	ldr	r3, [sp, #4]
 8005ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad8:	b99b      	cbnz	r3, 8005b02 <_dtoa_r+0x8d2>
 8005ada:	9b01      	ldr	r3, [sp, #4]
 8005adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ae0:	0d1b      	lsrs	r3, r3, #20
 8005ae2:	051b      	lsls	r3, r3, #20
 8005ae4:	b183      	cbz	r3, 8005b08 <_dtoa_r+0x8d8>
 8005ae6:	9b05      	ldr	r3, [sp, #20]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	9305      	str	r3, [sp, #20]
 8005aec:	9b06      	ldr	r3, [sp, #24]
 8005aee:	3301      	adds	r3, #1
 8005af0:	9306      	str	r3, [sp, #24]
 8005af2:	f04f 0801 	mov.w	r8, #1
 8005af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f47f af6d 	bne.w	80059d8 <_dtoa_r+0x7a8>
 8005afe:	2001      	movs	r0, #1
 8005b00:	e772      	b.n	80059e8 <_dtoa_r+0x7b8>
 8005b02:	f04f 0800 	mov.w	r8, #0
 8005b06:	e7f6      	b.n	8005af6 <_dtoa_r+0x8c6>
 8005b08:	4698      	mov	r8, r3
 8005b0a:	e7f4      	b.n	8005af6 <_dtoa_r+0x8c6>
 8005b0c:	d080      	beq.n	8005a10 <_dtoa_r+0x7e0>
 8005b0e:	9a05      	ldr	r2, [sp, #20]
 8005b10:	331c      	adds	r3, #28
 8005b12:	441a      	add	r2, r3
 8005b14:	9205      	str	r2, [sp, #20]
 8005b16:	9a06      	ldr	r2, [sp, #24]
 8005b18:	441a      	add	r2, r3
 8005b1a:	441d      	add	r5, r3
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	e776      	b.n	8005a0e <_dtoa_r+0x7de>
 8005b20:	4603      	mov	r3, r0
 8005b22:	e7f4      	b.n	8005b0e <_dtoa_r+0x8de>
 8005b24:	9b03      	ldr	r3, [sp, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dc36      	bgt.n	8005b98 <_dtoa_r+0x968>
 8005b2a:	9b07      	ldr	r3, [sp, #28]
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	dd33      	ble.n	8005b98 <_dtoa_r+0x968>
 8005b30:	9b03      	ldr	r3, [sp, #12]
 8005b32:	9304      	str	r3, [sp, #16]
 8005b34:	9b04      	ldr	r3, [sp, #16]
 8005b36:	b963      	cbnz	r3, 8005b52 <_dtoa_r+0x922>
 8005b38:	4631      	mov	r1, r6
 8005b3a:	2205      	movs	r2, #5
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 f9a6 	bl	8005e8e <__multadd>
 8005b42:	4601      	mov	r1, r0
 8005b44:	4606      	mov	r6, r0
 8005b46:	4650      	mov	r0, sl
 8005b48:	f000 fb5f 	bl	800620a <__mcmp>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	f73f adb6 	bgt.w	80056be <_dtoa_r+0x48e>
 8005b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b54:	9d02      	ldr	r5, [sp, #8]
 8005b56:	ea6f 0b03 	mvn.w	fp, r3
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9303      	str	r3, [sp, #12]
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 f97d 	bl	8005e60 <_Bfree>
 8005b66:	2f00      	cmp	r7, #0
 8005b68:	f43f aea6 	beq.w	80058b8 <_dtoa_r+0x688>
 8005b6c:	9b03      	ldr	r3, [sp, #12]
 8005b6e:	b12b      	cbz	r3, 8005b7c <_dtoa_r+0x94c>
 8005b70:	42bb      	cmp	r3, r7
 8005b72:	d003      	beq.n	8005b7c <_dtoa_r+0x94c>
 8005b74:	4619      	mov	r1, r3
 8005b76:	4620      	mov	r0, r4
 8005b78:	f000 f972 	bl	8005e60 <_Bfree>
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f000 f96e 	bl	8005e60 <_Bfree>
 8005b84:	e698      	b.n	80058b8 <_dtoa_r+0x688>
 8005b86:	2600      	movs	r6, #0
 8005b88:	4637      	mov	r7, r6
 8005b8a:	e7e2      	b.n	8005b52 <_dtoa_r+0x922>
 8005b8c:	46bb      	mov	fp, r7
 8005b8e:	4637      	mov	r7, r6
 8005b90:	e595      	b.n	80056be <_dtoa_r+0x48e>
 8005b92:	bf00      	nop
 8005b94:	40240000 	.word	0x40240000
 8005b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b9a:	bb93      	cbnz	r3, 8005c02 <_dtoa_r+0x9d2>
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	9304      	str	r3, [sp, #16]
 8005ba0:	9d02      	ldr	r5, [sp, #8]
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	f7ff fab5 	bl	8005114 <quorem>
 8005baa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005bae:	f805 9b01 	strb.w	r9, [r5], #1
 8005bb2:	9b02      	ldr	r3, [sp, #8]
 8005bb4:	9a04      	ldr	r2, [sp, #16]
 8005bb6:	1aeb      	subs	r3, r5, r3
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	f300 80dc 	bgt.w	8005d76 <_dtoa_r+0xb46>
 8005bbe:	9b02      	ldr	r3, [sp, #8]
 8005bc0:	2a01      	cmp	r2, #1
 8005bc2:	bfac      	ite	ge
 8005bc4:	189b      	addge	r3, r3, r2
 8005bc6:	3301      	addlt	r3, #1
 8005bc8:	4698      	mov	r8, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	9303      	str	r3, [sp, #12]
 8005bce:	4651      	mov	r1, sl
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f000 fac8 	bl	8006168 <__lshift>
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4682      	mov	sl, r0
 8005bdc:	f000 fb15 	bl	800620a <__mcmp>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	f300 808d 	bgt.w	8005d00 <_dtoa_r+0xad0>
 8005be6:	d103      	bne.n	8005bf0 <_dtoa_r+0x9c0>
 8005be8:	f019 0f01 	tst.w	r9, #1
 8005bec:	f040 8088 	bne.w	8005d00 <_dtoa_r+0xad0>
 8005bf0:	4645      	mov	r5, r8
 8005bf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bf6:	2b30      	cmp	r3, #48	; 0x30
 8005bf8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005bfc:	d1af      	bne.n	8005b5e <_dtoa_r+0x92e>
 8005bfe:	4615      	mov	r5, r2
 8005c00:	e7f7      	b.n	8005bf2 <_dtoa_r+0x9c2>
 8005c02:	9b03      	ldr	r3, [sp, #12]
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	dd05      	ble.n	8005c16 <_dtoa_r+0x9e6>
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	462a      	mov	r2, r5
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f000 faaa 	bl	8006168 <__lshift>
 8005c14:	4607      	mov	r7, r0
 8005c16:	f1b8 0f00 	cmp.w	r8, #0
 8005c1a:	d04c      	beq.n	8005cb6 <_dtoa_r+0xa86>
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f000 f8ea 	bl	8005df8 <_Balloc>
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	3202      	adds	r2, #2
 8005c28:	4605      	mov	r5, r0
 8005c2a:	0092      	lsls	r2, r2, #2
 8005c2c:	f107 010c 	add.w	r1, r7, #12
 8005c30:	300c      	adds	r0, #12
 8005c32:	f7fe fdcb 	bl	80047cc <memcpy>
 8005c36:	2201      	movs	r2, #1
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 fa94 	bl	8006168 <__lshift>
 8005c40:	9b00      	ldr	r3, [sp, #0]
 8005c42:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005c46:	9703      	str	r7, [sp, #12]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	9305      	str	r3, [sp, #20]
 8005c50:	4631      	mov	r1, r6
 8005c52:	4650      	mov	r0, sl
 8005c54:	f7ff fa5e 	bl	8005114 <quorem>
 8005c58:	9903      	ldr	r1, [sp, #12]
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c60:	4650      	mov	r0, sl
 8005c62:	f000 fad2 	bl	800620a <__mcmp>
 8005c66:	463a      	mov	r2, r7
 8005c68:	9000      	str	r0, [sp, #0]
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 fae6 	bl	800623e <__mdiff>
 8005c72:	68c3      	ldr	r3, [r0, #12]
 8005c74:	4602      	mov	r2, r0
 8005c76:	bb03      	cbnz	r3, 8005cba <_dtoa_r+0xa8a>
 8005c78:	4601      	mov	r1, r0
 8005c7a:	9006      	str	r0, [sp, #24]
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	f000 fac4 	bl	800620a <__mcmp>
 8005c82:	9a06      	ldr	r2, [sp, #24]
 8005c84:	4603      	mov	r3, r0
 8005c86:	4611      	mov	r1, r2
 8005c88:	4620      	mov	r0, r4
 8005c8a:	9306      	str	r3, [sp, #24]
 8005c8c:	f000 f8e8 	bl	8005e60 <_Bfree>
 8005c90:	9b06      	ldr	r3, [sp, #24]
 8005c92:	b9a3      	cbnz	r3, 8005cbe <_dtoa_r+0xa8e>
 8005c94:	9a07      	ldr	r2, [sp, #28]
 8005c96:	b992      	cbnz	r2, 8005cbe <_dtoa_r+0xa8e>
 8005c98:	9a05      	ldr	r2, [sp, #20]
 8005c9a:	b982      	cbnz	r2, 8005cbe <_dtoa_r+0xa8e>
 8005c9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ca0:	d029      	beq.n	8005cf6 <_dtoa_r+0xac6>
 8005ca2:	9b00      	ldr	r3, [sp, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dd01      	ble.n	8005cac <_dtoa_r+0xa7c>
 8005ca8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8005cac:	f108 0501 	add.w	r5, r8, #1
 8005cb0:	f888 9000 	strb.w	r9, [r8]
 8005cb4:	e753      	b.n	8005b5e <_dtoa_r+0x92e>
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	e7c2      	b.n	8005c40 <_dtoa_r+0xa10>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e7e3      	b.n	8005c86 <_dtoa_r+0xa56>
 8005cbe:	9a00      	ldr	r2, [sp, #0]
 8005cc0:	2a00      	cmp	r2, #0
 8005cc2:	db04      	blt.n	8005cce <_dtoa_r+0xa9e>
 8005cc4:	d125      	bne.n	8005d12 <_dtoa_r+0xae2>
 8005cc6:	9a07      	ldr	r2, [sp, #28]
 8005cc8:	bb1a      	cbnz	r2, 8005d12 <_dtoa_r+0xae2>
 8005cca:	9a05      	ldr	r2, [sp, #20]
 8005ccc:	bb0a      	cbnz	r2, 8005d12 <_dtoa_r+0xae2>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	ddec      	ble.n	8005cac <_dtoa_r+0xa7c>
 8005cd2:	4651      	mov	r1, sl
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 fa46 	bl	8006168 <__lshift>
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4682      	mov	sl, r0
 8005ce0:	f000 fa93 	bl	800620a <__mcmp>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	dc03      	bgt.n	8005cf0 <_dtoa_r+0xac0>
 8005ce8:	d1e0      	bne.n	8005cac <_dtoa_r+0xa7c>
 8005cea:	f019 0f01 	tst.w	r9, #1
 8005cee:	d0dd      	beq.n	8005cac <_dtoa_r+0xa7c>
 8005cf0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005cf4:	d1d8      	bne.n	8005ca8 <_dtoa_r+0xa78>
 8005cf6:	2339      	movs	r3, #57	; 0x39
 8005cf8:	f888 3000 	strb.w	r3, [r8]
 8005cfc:	f108 0801 	add.w	r8, r8, #1
 8005d00:	4645      	mov	r5, r8
 8005d02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d06:	2b39      	cmp	r3, #57	; 0x39
 8005d08:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d0c:	d03b      	beq.n	8005d86 <_dtoa_r+0xb56>
 8005d0e:	3301      	adds	r3, #1
 8005d10:	e040      	b.n	8005d94 <_dtoa_r+0xb64>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f108 0501 	add.w	r5, r8, #1
 8005d18:	dd05      	ble.n	8005d26 <_dtoa_r+0xaf6>
 8005d1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d1e:	d0ea      	beq.n	8005cf6 <_dtoa_r+0xac6>
 8005d20:	f109 0901 	add.w	r9, r9, #1
 8005d24:	e7c4      	b.n	8005cb0 <_dtoa_r+0xa80>
 8005d26:	9b02      	ldr	r3, [sp, #8]
 8005d28:	9a04      	ldr	r2, [sp, #16]
 8005d2a:	f805 9c01 	strb.w	r9, [r5, #-1]
 8005d2e:	1aeb      	subs	r3, r5, r3
 8005d30:	4293      	cmp	r3, r2
 8005d32:	46a8      	mov	r8, r5
 8005d34:	f43f af4b 	beq.w	8005bce <_dtoa_r+0x99e>
 8005d38:	4651      	mov	r1, sl
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	220a      	movs	r2, #10
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 f8a5 	bl	8005e8e <__multadd>
 8005d44:	9b03      	ldr	r3, [sp, #12]
 8005d46:	9903      	ldr	r1, [sp, #12]
 8005d48:	42bb      	cmp	r3, r7
 8005d4a:	4682      	mov	sl, r0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	f04f 020a 	mov.w	r2, #10
 8005d54:	4620      	mov	r0, r4
 8005d56:	d104      	bne.n	8005d62 <_dtoa_r+0xb32>
 8005d58:	f000 f899 	bl	8005e8e <__multadd>
 8005d5c:	9003      	str	r0, [sp, #12]
 8005d5e:	4607      	mov	r7, r0
 8005d60:	e776      	b.n	8005c50 <_dtoa_r+0xa20>
 8005d62:	f000 f894 	bl	8005e8e <__multadd>
 8005d66:	2300      	movs	r3, #0
 8005d68:	9003      	str	r0, [sp, #12]
 8005d6a:	220a      	movs	r2, #10
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 f88d 	bl	8005e8e <__multadd>
 8005d74:	e7f3      	b.n	8005d5e <_dtoa_r+0xb2e>
 8005d76:	4651      	mov	r1, sl
 8005d78:	2300      	movs	r3, #0
 8005d7a:	220a      	movs	r2, #10
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f000 f886 	bl	8005e8e <__multadd>
 8005d82:	4682      	mov	sl, r0
 8005d84:	e70d      	b.n	8005ba2 <_dtoa_r+0x972>
 8005d86:	9b02      	ldr	r3, [sp, #8]
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d105      	bne.n	8005d98 <_dtoa_r+0xb68>
 8005d8c:	9a02      	ldr	r2, [sp, #8]
 8005d8e:	f10b 0b01 	add.w	fp, fp, #1
 8005d92:	2331      	movs	r3, #49	; 0x31
 8005d94:	7013      	strb	r3, [r2, #0]
 8005d96:	e6e2      	b.n	8005b5e <_dtoa_r+0x92e>
 8005d98:	4615      	mov	r5, r2
 8005d9a:	e7b2      	b.n	8005d02 <_dtoa_r+0xad2>
 8005d9c:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <_dtoa_r+0xb94>)
 8005d9e:	f7ff baae 	b.w	80052fe <_dtoa_r+0xce>
 8005da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f47f aa88 	bne.w	80052ba <_dtoa_r+0x8a>
 8005daa:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <_dtoa_r+0xb98>)
 8005dac:	f7ff baa7 	b.w	80052fe <_dtoa_r+0xce>
 8005db0:	9b04      	ldr	r3, [sp, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f73f aef4 	bgt.w	8005ba0 <_dtoa_r+0x970>
 8005db8:	9b07      	ldr	r3, [sp, #28]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	f77f aef0 	ble.w	8005ba0 <_dtoa_r+0x970>
 8005dc0:	e6b8      	b.n	8005b34 <_dtoa_r+0x904>
 8005dc2:	bf00      	nop
 8005dc4:	08006a00 	.word	0x08006a00
 8005dc8:	08006a24 	.word	0x08006a24

08005dcc <_localeconv_r>:
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <_localeconv_r+0x14>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6a18      	ldr	r0, [r3, #32]
 8005dd2:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <_localeconv_r+0x18>)
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	bf08      	it	eq
 8005dd8:	4618      	moveq	r0, r3
 8005dda:	30f0      	adds	r0, #240	; 0xf0
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000098 	.word	0x20000098
 8005de4:	200000fc 	.word	0x200000fc

08005de8 <malloc>:
 8005de8:	4b02      	ldr	r3, [pc, #8]	; (8005df4 <malloc+0xc>)
 8005dea:	4601      	mov	r1, r0
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	f000 bb2f 	b.w	8006450 <_malloc_r>
 8005df2:	bf00      	nop
 8005df4:	20000098 	.word	0x20000098

08005df8 <_Balloc>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460e      	mov	r6, r1
 8005e00:	b93d      	cbnz	r5, 8005e12 <_Balloc+0x1a>
 8005e02:	2010      	movs	r0, #16
 8005e04:	f7ff fff0 	bl	8005de8 <malloc>
 8005e08:	6260      	str	r0, [r4, #36]	; 0x24
 8005e0a:	6045      	str	r5, [r0, #4]
 8005e0c:	6085      	str	r5, [r0, #8]
 8005e0e:	6005      	str	r5, [r0, #0]
 8005e10:	60c5      	str	r5, [r0, #12]
 8005e12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e14:	68eb      	ldr	r3, [r5, #12]
 8005e16:	b183      	cbz	r3, 8005e3a <_Balloc+0x42>
 8005e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005e20:	b9b8      	cbnz	r0, 8005e52 <_Balloc+0x5a>
 8005e22:	2101      	movs	r1, #1
 8005e24:	fa01 f506 	lsl.w	r5, r1, r6
 8005e28:	1d6a      	adds	r2, r5, #5
 8005e2a:	0092      	lsls	r2, r2, #2
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f000 fab3 	bl	8006398 <_calloc_r>
 8005e32:	b160      	cbz	r0, 8005e4e <_Balloc+0x56>
 8005e34:	6046      	str	r6, [r0, #4]
 8005e36:	6085      	str	r5, [r0, #8]
 8005e38:	e00e      	b.n	8005e58 <_Balloc+0x60>
 8005e3a:	2221      	movs	r2, #33	; 0x21
 8005e3c:	2104      	movs	r1, #4
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f000 faaa 	bl	8006398 <_calloc_r>
 8005e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e46:	60e8      	str	r0, [r5, #12]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e4      	bne.n	8005e18 <_Balloc+0x20>
 8005e4e:	2000      	movs	r0, #0
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	6802      	ldr	r2, [r0, #0]
 8005e54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	6103      	str	r3, [r0, #16]
 8005e5c:	60c3      	str	r3, [r0, #12]
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}

08005e60 <_Bfree>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e64:	4606      	mov	r6, r0
 8005e66:	460d      	mov	r5, r1
 8005e68:	b93c      	cbnz	r4, 8005e7a <_Bfree+0x1a>
 8005e6a:	2010      	movs	r0, #16
 8005e6c:	f7ff ffbc 	bl	8005de8 <malloc>
 8005e70:	6270      	str	r0, [r6, #36]	; 0x24
 8005e72:	6044      	str	r4, [r0, #4]
 8005e74:	6084      	str	r4, [r0, #8]
 8005e76:	6004      	str	r4, [r0, #0]
 8005e78:	60c4      	str	r4, [r0, #12]
 8005e7a:	b13d      	cbz	r5, 8005e8c <_Bfree+0x2c>
 8005e7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e7e:	686a      	ldr	r2, [r5, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e86:	6029      	str	r1, [r5, #0]
 8005e88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e8c:	bd70      	pop	{r4, r5, r6, pc}

08005e8e <__multadd>:
 8005e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e92:	690d      	ldr	r5, [r1, #16]
 8005e94:	461f      	mov	r7, r3
 8005e96:	4606      	mov	r6, r0
 8005e98:	460c      	mov	r4, r1
 8005e9a:	f101 0e14 	add.w	lr, r1, #20
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f8de 0000 	ldr.w	r0, [lr]
 8005ea4:	b281      	uxth	r1, r0
 8005ea6:	fb02 7101 	mla	r1, r2, r1, r7
 8005eaa:	0c0f      	lsrs	r7, r1, #16
 8005eac:	0c00      	lsrs	r0, r0, #16
 8005eae:	fb02 7000 	mla	r0, r2, r0, r7
 8005eb2:	b289      	uxth	r1, r1
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005eba:	429d      	cmp	r5, r3
 8005ebc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005ec0:	f84e 1b04 	str.w	r1, [lr], #4
 8005ec4:	dcec      	bgt.n	8005ea0 <__multadd+0x12>
 8005ec6:	b1d7      	cbz	r7, 8005efe <__multadd+0x70>
 8005ec8:	68a3      	ldr	r3, [r4, #8]
 8005eca:	429d      	cmp	r5, r3
 8005ecc:	db12      	blt.n	8005ef4 <__multadd+0x66>
 8005ece:	6861      	ldr	r1, [r4, #4]
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	3101      	adds	r1, #1
 8005ed4:	f7ff ff90 	bl	8005df8 <_Balloc>
 8005ed8:	6922      	ldr	r2, [r4, #16]
 8005eda:	3202      	adds	r2, #2
 8005edc:	f104 010c 	add.w	r1, r4, #12
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	0092      	lsls	r2, r2, #2
 8005ee4:	300c      	adds	r0, #12
 8005ee6:	f7fe fc71 	bl	80047cc <memcpy>
 8005eea:	4621      	mov	r1, r4
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7ff ffb7 	bl	8005e60 <_Bfree>
 8005ef2:	4644      	mov	r4, r8
 8005ef4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ef8:	3501      	adds	r5, #1
 8005efa:	615f      	str	r7, [r3, #20]
 8005efc:	6125      	str	r5, [r4, #16]
 8005efe:	4620      	mov	r0, r4
 8005f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f04 <__hi0bits>:
 8005f04:	0c02      	lsrs	r2, r0, #16
 8005f06:	0412      	lsls	r2, r2, #16
 8005f08:	4603      	mov	r3, r0
 8005f0a:	b9b2      	cbnz	r2, 8005f3a <__hi0bits+0x36>
 8005f0c:	0403      	lsls	r3, r0, #16
 8005f0e:	2010      	movs	r0, #16
 8005f10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f14:	bf04      	itt	eq
 8005f16:	021b      	lsleq	r3, r3, #8
 8005f18:	3008      	addeq	r0, #8
 8005f1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f1e:	bf04      	itt	eq
 8005f20:	011b      	lsleq	r3, r3, #4
 8005f22:	3004      	addeq	r0, #4
 8005f24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f28:	bf04      	itt	eq
 8005f2a:	009b      	lsleq	r3, r3, #2
 8005f2c:	3002      	addeq	r0, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	db06      	blt.n	8005f40 <__hi0bits+0x3c>
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	d503      	bpl.n	8005f3e <__hi0bits+0x3a>
 8005f36:	3001      	adds	r0, #1
 8005f38:	4770      	bx	lr
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	e7e8      	b.n	8005f10 <__hi0bits+0xc>
 8005f3e:	2020      	movs	r0, #32
 8005f40:	4770      	bx	lr

08005f42 <__lo0bits>:
 8005f42:	6803      	ldr	r3, [r0, #0]
 8005f44:	f013 0207 	ands.w	r2, r3, #7
 8005f48:	4601      	mov	r1, r0
 8005f4a:	d00b      	beq.n	8005f64 <__lo0bits+0x22>
 8005f4c:	07da      	lsls	r2, r3, #31
 8005f4e:	d423      	bmi.n	8005f98 <__lo0bits+0x56>
 8005f50:	0798      	lsls	r0, r3, #30
 8005f52:	bf49      	itett	mi
 8005f54:	085b      	lsrmi	r3, r3, #1
 8005f56:	089b      	lsrpl	r3, r3, #2
 8005f58:	2001      	movmi	r0, #1
 8005f5a:	600b      	strmi	r3, [r1, #0]
 8005f5c:	bf5c      	itt	pl
 8005f5e:	600b      	strpl	r3, [r1, #0]
 8005f60:	2002      	movpl	r0, #2
 8005f62:	4770      	bx	lr
 8005f64:	b298      	uxth	r0, r3
 8005f66:	b9a8      	cbnz	r0, 8005f94 <__lo0bits+0x52>
 8005f68:	0c1b      	lsrs	r3, r3, #16
 8005f6a:	2010      	movs	r0, #16
 8005f6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f70:	bf04      	itt	eq
 8005f72:	0a1b      	lsreq	r3, r3, #8
 8005f74:	3008      	addeq	r0, #8
 8005f76:	071a      	lsls	r2, r3, #28
 8005f78:	bf04      	itt	eq
 8005f7a:	091b      	lsreq	r3, r3, #4
 8005f7c:	3004      	addeq	r0, #4
 8005f7e:	079a      	lsls	r2, r3, #30
 8005f80:	bf04      	itt	eq
 8005f82:	089b      	lsreq	r3, r3, #2
 8005f84:	3002      	addeq	r0, #2
 8005f86:	07da      	lsls	r2, r3, #31
 8005f88:	d402      	bmi.n	8005f90 <__lo0bits+0x4e>
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	d006      	beq.n	8005f9c <__lo0bits+0x5a>
 8005f8e:	3001      	adds	r0, #1
 8005f90:	600b      	str	r3, [r1, #0]
 8005f92:	4770      	bx	lr
 8005f94:	4610      	mov	r0, r2
 8005f96:	e7e9      	b.n	8005f6c <__lo0bits+0x2a>
 8005f98:	2000      	movs	r0, #0
 8005f9a:	4770      	bx	lr
 8005f9c:	2020      	movs	r0, #32
 8005f9e:	4770      	bx	lr

08005fa0 <__i2b>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	f7ff ff27 	bl	8005df8 <_Balloc>
 8005faa:	2201      	movs	r2, #1
 8005fac:	6144      	str	r4, [r0, #20]
 8005fae:	6102      	str	r2, [r0, #16]
 8005fb0:	bd10      	pop	{r4, pc}

08005fb2 <__multiply>:
 8005fb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb6:	4614      	mov	r4, r2
 8005fb8:	690a      	ldr	r2, [r1, #16]
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	bfb8      	it	lt
 8005fc0:	460b      	movlt	r3, r1
 8005fc2:	4689      	mov	r9, r1
 8005fc4:	bfbc      	itt	lt
 8005fc6:	46a1      	movlt	r9, r4
 8005fc8:	461c      	movlt	r4, r3
 8005fca:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005fce:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005fd2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005fd6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005fda:	eb07 060a 	add.w	r6, r7, sl
 8005fde:	429e      	cmp	r6, r3
 8005fe0:	bfc8      	it	gt
 8005fe2:	3101      	addgt	r1, #1
 8005fe4:	f7ff ff08 	bl	8005df8 <_Balloc>
 8005fe8:	f100 0514 	add.w	r5, r0, #20
 8005fec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ff0:	462b      	mov	r3, r5
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	4543      	cmp	r3, r8
 8005ff6:	d316      	bcc.n	8006026 <__multiply+0x74>
 8005ff8:	f104 0214 	add.w	r2, r4, #20
 8005ffc:	f109 0114 	add.w	r1, r9, #20
 8006000:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006004:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	9c01      	ldr	r4, [sp, #4]
 800600c:	4294      	cmp	r4, r2
 800600e:	4613      	mov	r3, r2
 8006010:	d80c      	bhi.n	800602c <__multiply+0x7a>
 8006012:	2e00      	cmp	r6, #0
 8006014:	dd03      	ble.n	800601e <__multiply+0x6c>
 8006016:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800601a:	2b00      	cmp	r3, #0
 800601c:	d054      	beq.n	80060c8 <__multiply+0x116>
 800601e:	6106      	str	r6, [r0, #16]
 8006020:	b003      	add	sp, #12
 8006022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006026:	f843 2b04 	str.w	r2, [r3], #4
 800602a:	e7e3      	b.n	8005ff4 <__multiply+0x42>
 800602c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006030:	3204      	adds	r2, #4
 8006032:	f1ba 0f00 	cmp.w	sl, #0
 8006036:	d020      	beq.n	800607a <__multiply+0xc8>
 8006038:	46ae      	mov	lr, r5
 800603a:	4689      	mov	r9, r1
 800603c:	f04f 0c00 	mov.w	ip, #0
 8006040:	f859 4b04 	ldr.w	r4, [r9], #4
 8006044:	f8be b000 	ldrh.w	fp, [lr]
 8006048:	b2a3      	uxth	r3, r4
 800604a:	fb0a b303 	mla	r3, sl, r3, fp
 800604e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006052:	f8de 4000 	ldr.w	r4, [lr]
 8006056:	4463      	add	r3, ip
 8006058:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800605c:	fb0a c40b 	mla	r4, sl, fp, ip
 8006060:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006064:	b29b      	uxth	r3, r3
 8006066:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800606a:	454f      	cmp	r7, r9
 800606c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006070:	f84e 3b04 	str.w	r3, [lr], #4
 8006074:	d8e4      	bhi.n	8006040 <__multiply+0x8e>
 8006076:	f8ce c000 	str.w	ip, [lr]
 800607a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800607e:	f1b9 0f00 	cmp.w	r9, #0
 8006082:	d01f      	beq.n	80060c4 <__multiply+0x112>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	46ae      	mov	lr, r5
 8006088:	468c      	mov	ip, r1
 800608a:	f04f 0a00 	mov.w	sl, #0
 800608e:	f8bc 4000 	ldrh.w	r4, [ip]
 8006092:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006096:	fb09 b404 	mla	r4, r9, r4, fp
 800609a:	44a2      	add	sl, r4
 800609c:	b29b      	uxth	r3, r3
 800609e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80060a2:	f84e 3b04 	str.w	r3, [lr], #4
 80060a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060aa:	f8be 4000 	ldrh.w	r4, [lr]
 80060ae:	0c1b      	lsrs	r3, r3, #16
 80060b0:	fb09 4303 	mla	r3, r9, r3, r4
 80060b4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80060b8:	4567      	cmp	r7, ip
 80060ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060be:	d8e6      	bhi.n	800608e <__multiply+0xdc>
 80060c0:	f8ce 3000 	str.w	r3, [lr]
 80060c4:	3504      	adds	r5, #4
 80060c6:	e7a0      	b.n	800600a <__multiply+0x58>
 80060c8:	3e01      	subs	r6, #1
 80060ca:	e7a2      	b.n	8006012 <__multiply+0x60>

080060cc <__pow5mult>:
 80060cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d0:	4615      	mov	r5, r2
 80060d2:	f012 0203 	ands.w	r2, r2, #3
 80060d6:	4606      	mov	r6, r0
 80060d8:	460f      	mov	r7, r1
 80060da:	d007      	beq.n	80060ec <__pow5mult+0x20>
 80060dc:	3a01      	subs	r2, #1
 80060de:	4c21      	ldr	r4, [pc, #132]	; (8006164 <__pow5mult+0x98>)
 80060e0:	2300      	movs	r3, #0
 80060e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060e6:	f7ff fed2 	bl	8005e8e <__multadd>
 80060ea:	4607      	mov	r7, r0
 80060ec:	10ad      	asrs	r5, r5, #2
 80060ee:	d035      	beq.n	800615c <__pow5mult+0x90>
 80060f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060f2:	b93c      	cbnz	r4, 8006104 <__pow5mult+0x38>
 80060f4:	2010      	movs	r0, #16
 80060f6:	f7ff fe77 	bl	8005de8 <malloc>
 80060fa:	6270      	str	r0, [r6, #36]	; 0x24
 80060fc:	6044      	str	r4, [r0, #4]
 80060fe:	6084      	str	r4, [r0, #8]
 8006100:	6004      	str	r4, [r0, #0]
 8006102:	60c4      	str	r4, [r0, #12]
 8006104:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800610c:	b94c      	cbnz	r4, 8006122 <__pow5mult+0x56>
 800610e:	f240 2171 	movw	r1, #625	; 0x271
 8006112:	4630      	mov	r0, r6
 8006114:	f7ff ff44 	bl	8005fa0 <__i2b>
 8006118:	2300      	movs	r3, #0
 800611a:	f8c8 0008 	str.w	r0, [r8, #8]
 800611e:	4604      	mov	r4, r0
 8006120:	6003      	str	r3, [r0, #0]
 8006122:	f04f 0800 	mov.w	r8, #0
 8006126:	07eb      	lsls	r3, r5, #31
 8006128:	d50a      	bpl.n	8006140 <__pow5mult+0x74>
 800612a:	4639      	mov	r1, r7
 800612c:	4622      	mov	r2, r4
 800612e:	4630      	mov	r0, r6
 8006130:	f7ff ff3f 	bl	8005fb2 <__multiply>
 8006134:	4639      	mov	r1, r7
 8006136:	4681      	mov	r9, r0
 8006138:	4630      	mov	r0, r6
 800613a:	f7ff fe91 	bl	8005e60 <_Bfree>
 800613e:	464f      	mov	r7, r9
 8006140:	106d      	asrs	r5, r5, #1
 8006142:	d00b      	beq.n	800615c <__pow5mult+0x90>
 8006144:	6820      	ldr	r0, [r4, #0]
 8006146:	b938      	cbnz	r0, 8006158 <__pow5mult+0x8c>
 8006148:	4622      	mov	r2, r4
 800614a:	4621      	mov	r1, r4
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff ff30 	bl	8005fb2 <__multiply>
 8006152:	6020      	str	r0, [r4, #0]
 8006154:	f8c0 8000 	str.w	r8, [r0]
 8006158:	4604      	mov	r4, r0
 800615a:	e7e4      	b.n	8006126 <__pow5mult+0x5a>
 800615c:	4638      	mov	r0, r7
 800615e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006162:	bf00      	nop
 8006164:	08006b28 	.word	0x08006b28

08006168 <__lshift>:
 8006168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800616c:	460c      	mov	r4, r1
 800616e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	6849      	ldr	r1, [r1, #4]
 8006176:	eb0a 0903 	add.w	r9, sl, r3
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	4607      	mov	r7, r0
 800617e:	4616      	mov	r6, r2
 8006180:	f109 0501 	add.w	r5, r9, #1
 8006184:	42ab      	cmp	r3, r5
 8006186:	db31      	blt.n	80061ec <__lshift+0x84>
 8006188:	4638      	mov	r0, r7
 800618a:	f7ff fe35 	bl	8005df8 <_Balloc>
 800618e:	2200      	movs	r2, #0
 8006190:	4680      	mov	r8, r0
 8006192:	f100 0314 	add.w	r3, r0, #20
 8006196:	4611      	mov	r1, r2
 8006198:	4552      	cmp	r2, sl
 800619a:	db2a      	blt.n	80061f2 <__lshift+0x8a>
 800619c:	6920      	ldr	r0, [r4, #16]
 800619e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061a2:	f104 0114 	add.w	r1, r4, #20
 80061a6:	f016 021f 	ands.w	r2, r6, #31
 80061aa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80061ae:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80061b2:	d022      	beq.n	80061fa <__lshift+0x92>
 80061b4:	f1c2 0c20 	rsb	ip, r2, #32
 80061b8:	2000      	movs	r0, #0
 80061ba:	680e      	ldr	r6, [r1, #0]
 80061bc:	4096      	lsls	r6, r2
 80061be:	4330      	orrs	r0, r6
 80061c0:	f843 0b04 	str.w	r0, [r3], #4
 80061c4:	f851 0b04 	ldr.w	r0, [r1], #4
 80061c8:	458e      	cmp	lr, r1
 80061ca:	fa20 f00c 	lsr.w	r0, r0, ip
 80061ce:	d8f4      	bhi.n	80061ba <__lshift+0x52>
 80061d0:	6018      	str	r0, [r3, #0]
 80061d2:	b108      	cbz	r0, 80061d8 <__lshift+0x70>
 80061d4:	f109 0502 	add.w	r5, r9, #2
 80061d8:	3d01      	subs	r5, #1
 80061da:	4638      	mov	r0, r7
 80061dc:	f8c8 5010 	str.w	r5, [r8, #16]
 80061e0:	4621      	mov	r1, r4
 80061e2:	f7ff fe3d 	bl	8005e60 <_Bfree>
 80061e6:	4640      	mov	r0, r8
 80061e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ec:	3101      	adds	r1, #1
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	e7c8      	b.n	8006184 <__lshift+0x1c>
 80061f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80061f6:	3201      	adds	r2, #1
 80061f8:	e7ce      	b.n	8006198 <__lshift+0x30>
 80061fa:	3b04      	subs	r3, #4
 80061fc:	f851 2b04 	ldr.w	r2, [r1], #4
 8006200:	f843 2f04 	str.w	r2, [r3, #4]!
 8006204:	458e      	cmp	lr, r1
 8006206:	d8f9      	bhi.n	80061fc <__lshift+0x94>
 8006208:	e7e6      	b.n	80061d8 <__lshift+0x70>

0800620a <__mcmp>:
 800620a:	6903      	ldr	r3, [r0, #16]
 800620c:	690a      	ldr	r2, [r1, #16]
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	b530      	push	{r4, r5, lr}
 8006212:	d10c      	bne.n	800622e <__mcmp+0x24>
 8006214:	0092      	lsls	r2, r2, #2
 8006216:	3014      	adds	r0, #20
 8006218:	3114      	adds	r1, #20
 800621a:	1884      	adds	r4, r0, r2
 800621c:	4411      	add	r1, r2
 800621e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006222:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006226:	4295      	cmp	r5, r2
 8006228:	d003      	beq.n	8006232 <__mcmp+0x28>
 800622a:	d305      	bcc.n	8006238 <__mcmp+0x2e>
 800622c:	2301      	movs	r3, #1
 800622e:	4618      	mov	r0, r3
 8006230:	bd30      	pop	{r4, r5, pc}
 8006232:	42a0      	cmp	r0, r4
 8006234:	d3f3      	bcc.n	800621e <__mcmp+0x14>
 8006236:	e7fa      	b.n	800622e <__mcmp+0x24>
 8006238:	f04f 33ff 	mov.w	r3, #4294967295
 800623c:	e7f7      	b.n	800622e <__mcmp+0x24>

0800623e <__mdiff>:
 800623e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006242:	460d      	mov	r5, r1
 8006244:	4607      	mov	r7, r0
 8006246:	4611      	mov	r1, r2
 8006248:	4628      	mov	r0, r5
 800624a:	4614      	mov	r4, r2
 800624c:	f7ff ffdd 	bl	800620a <__mcmp>
 8006250:	1e06      	subs	r6, r0, #0
 8006252:	d108      	bne.n	8006266 <__mdiff+0x28>
 8006254:	4631      	mov	r1, r6
 8006256:	4638      	mov	r0, r7
 8006258:	f7ff fdce 	bl	8005df8 <_Balloc>
 800625c:	2301      	movs	r3, #1
 800625e:	6103      	str	r3, [r0, #16]
 8006260:	6146      	str	r6, [r0, #20]
 8006262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006266:	bfa4      	itt	ge
 8006268:	4623      	movge	r3, r4
 800626a:	462c      	movge	r4, r5
 800626c:	4638      	mov	r0, r7
 800626e:	6861      	ldr	r1, [r4, #4]
 8006270:	bfa6      	itte	ge
 8006272:	461d      	movge	r5, r3
 8006274:	2600      	movge	r6, #0
 8006276:	2601      	movlt	r6, #1
 8006278:	f7ff fdbe 	bl	8005df8 <_Balloc>
 800627c:	692b      	ldr	r3, [r5, #16]
 800627e:	60c6      	str	r6, [r0, #12]
 8006280:	6926      	ldr	r6, [r4, #16]
 8006282:	f105 0914 	add.w	r9, r5, #20
 8006286:	f104 0214 	add.w	r2, r4, #20
 800628a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800628e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006292:	f100 0514 	add.w	r5, r0, #20
 8006296:	f04f 0c00 	mov.w	ip, #0
 800629a:	f852 ab04 	ldr.w	sl, [r2], #4
 800629e:	f859 4b04 	ldr.w	r4, [r9], #4
 80062a2:	fa1c f18a 	uxtah	r1, ip, sl
 80062a6:	b2a3      	uxth	r3, r4
 80062a8:	1ac9      	subs	r1, r1, r3
 80062aa:	0c23      	lsrs	r3, r4, #16
 80062ac:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80062b0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80062b4:	b289      	uxth	r1, r1
 80062b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80062ba:	45c8      	cmp	r8, r9
 80062bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80062c0:	4696      	mov	lr, r2
 80062c2:	f845 3b04 	str.w	r3, [r5], #4
 80062c6:	d8e8      	bhi.n	800629a <__mdiff+0x5c>
 80062c8:	45be      	cmp	lr, r7
 80062ca:	d305      	bcc.n	80062d8 <__mdiff+0x9a>
 80062cc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80062d0:	b18b      	cbz	r3, 80062f6 <__mdiff+0xb8>
 80062d2:	6106      	str	r6, [r0, #16]
 80062d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80062dc:	fa1c f381 	uxtah	r3, ip, r1
 80062e0:	141a      	asrs	r2, r3, #16
 80062e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062f0:	f845 3b04 	str.w	r3, [r5], #4
 80062f4:	e7e8      	b.n	80062c8 <__mdiff+0x8a>
 80062f6:	3e01      	subs	r6, #1
 80062f8:	e7e8      	b.n	80062cc <__mdiff+0x8e>

080062fa <__d2b>:
 80062fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062fe:	460e      	mov	r6, r1
 8006300:	2101      	movs	r1, #1
 8006302:	ec59 8b10 	vmov	r8, r9, d0
 8006306:	4615      	mov	r5, r2
 8006308:	f7ff fd76 	bl	8005df8 <_Balloc>
 800630c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006310:	4607      	mov	r7, r0
 8006312:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006316:	bb34      	cbnz	r4, 8006366 <__d2b+0x6c>
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	f1b8 0f00 	cmp.w	r8, #0
 800631e:	d027      	beq.n	8006370 <__d2b+0x76>
 8006320:	a802      	add	r0, sp, #8
 8006322:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006326:	f7ff fe0c 	bl	8005f42 <__lo0bits>
 800632a:	9900      	ldr	r1, [sp, #0]
 800632c:	b1f0      	cbz	r0, 800636c <__d2b+0x72>
 800632e:	9a01      	ldr	r2, [sp, #4]
 8006330:	f1c0 0320 	rsb	r3, r0, #32
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	430b      	orrs	r3, r1
 800633a:	40c2      	lsrs	r2, r0
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	9201      	str	r2, [sp, #4]
 8006340:	9b01      	ldr	r3, [sp, #4]
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	bf14      	ite	ne
 8006348:	2102      	movne	r1, #2
 800634a:	2101      	moveq	r1, #1
 800634c:	6139      	str	r1, [r7, #16]
 800634e:	b1c4      	cbz	r4, 8006382 <__d2b+0x88>
 8006350:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006354:	4404      	add	r4, r0
 8006356:	6034      	str	r4, [r6, #0]
 8006358:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800635c:	6028      	str	r0, [r5, #0]
 800635e:	4638      	mov	r0, r7
 8006360:	b003      	add	sp, #12
 8006362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800636a:	e7d5      	b.n	8006318 <__d2b+0x1e>
 800636c:	6179      	str	r1, [r7, #20]
 800636e:	e7e7      	b.n	8006340 <__d2b+0x46>
 8006370:	a801      	add	r0, sp, #4
 8006372:	f7ff fde6 	bl	8005f42 <__lo0bits>
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	2101      	movs	r1, #1
 800637c:	6139      	str	r1, [r7, #16]
 800637e:	3020      	adds	r0, #32
 8006380:	e7e5      	b.n	800634e <__d2b+0x54>
 8006382:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006386:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800638a:	6030      	str	r0, [r6, #0]
 800638c:	6918      	ldr	r0, [r3, #16]
 800638e:	f7ff fdb9 	bl	8005f04 <__hi0bits>
 8006392:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006396:	e7e1      	b.n	800635c <__d2b+0x62>

08006398 <_calloc_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	fb02 f401 	mul.w	r4, r2, r1
 800639e:	4621      	mov	r1, r4
 80063a0:	f000 f856 	bl	8006450 <_malloc_r>
 80063a4:	4605      	mov	r5, r0
 80063a6:	b118      	cbz	r0, 80063b0 <_calloc_r+0x18>
 80063a8:	4622      	mov	r2, r4
 80063aa:	2100      	movs	r1, #0
 80063ac:	f7fe fa19 	bl	80047e2 <memset>
 80063b0:	4628      	mov	r0, r5
 80063b2:	bd38      	pop	{r3, r4, r5, pc}

080063b4 <_free_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4605      	mov	r5, r0
 80063b8:	2900      	cmp	r1, #0
 80063ba:	d045      	beq.n	8006448 <_free_r+0x94>
 80063bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063c0:	1f0c      	subs	r4, r1, #4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	bfb8      	it	lt
 80063c6:	18e4      	addlt	r4, r4, r3
 80063c8:	f000 fa2c 	bl	8006824 <__malloc_lock>
 80063cc:	4a1f      	ldr	r2, [pc, #124]	; (800644c <_free_r+0x98>)
 80063ce:	6813      	ldr	r3, [r2, #0]
 80063d0:	4610      	mov	r0, r2
 80063d2:	b933      	cbnz	r3, 80063e2 <_free_r+0x2e>
 80063d4:	6063      	str	r3, [r4, #4]
 80063d6:	6014      	str	r4, [r2, #0]
 80063d8:	4628      	mov	r0, r5
 80063da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063de:	f000 ba22 	b.w	8006826 <__malloc_unlock>
 80063e2:	42a3      	cmp	r3, r4
 80063e4:	d90c      	bls.n	8006400 <_free_r+0x4c>
 80063e6:	6821      	ldr	r1, [r4, #0]
 80063e8:	1862      	adds	r2, r4, r1
 80063ea:	4293      	cmp	r3, r2
 80063ec:	bf04      	itt	eq
 80063ee:	681a      	ldreq	r2, [r3, #0]
 80063f0:	685b      	ldreq	r3, [r3, #4]
 80063f2:	6063      	str	r3, [r4, #4]
 80063f4:	bf04      	itt	eq
 80063f6:	1852      	addeq	r2, r2, r1
 80063f8:	6022      	streq	r2, [r4, #0]
 80063fa:	6004      	str	r4, [r0, #0]
 80063fc:	e7ec      	b.n	80063d8 <_free_r+0x24>
 80063fe:	4613      	mov	r3, r2
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	b10a      	cbz	r2, 8006408 <_free_r+0x54>
 8006404:	42a2      	cmp	r2, r4
 8006406:	d9fa      	bls.n	80063fe <_free_r+0x4a>
 8006408:	6819      	ldr	r1, [r3, #0]
 800640a:	1858      	adds	r0, r3, r1
 800640c:	42a0      	cmp	r0, r4
 800640e:	d10b      	bne.n	8006428 <_free_r+0x74>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	4401      	add	r1, r0
 8006414:	1858      	adds	r0, r3, r1
 8006416:	4282      	cmp	r2, r0
 8006418:	6019      	str	r1, [r3, #0]
 800641a:	d1dd      	bne.n	80063d8 <_free_r+0x24>
 800641c:	6810      	ldr	r0, [r2, #0]
 800641e:	6852      	ldr	r2, [r2, #4]
 8006420:	605a      	str	r2, [r3, #4]
 8006422:	4401      	add	r1, r0
 8006424:	6019      	str	r1, [r3, #0]
 8006426:	e7d7      	b.n	80063d8 <_free_r+0x24>
 8006428:	d902      	bls.n	8006430 <_free_r+0x7c>
 800642a:	230c      	movs	r3, #12
 800642c:	602b      	str	r3, [r5, #0]
 800642e:	e7d3      	b.n	80063d8 <_free_r+0x24>
 8006430:	6820      	ldr	r0, [r4, #0]
 8006432:	1821      	adds	r1, r4, r0
 8006434:	428a      	cmp	r2, r1
 8006436:	bf04      	itt	eq
 8006438:	6811      	ldreq	r1, [r2, #0]
 800643a:	6852      	ldreq	r2, [r2, #4]
 800643c:	6062      	str	r2, [r4, #4]
 800643e:	bf04      	itt	eq
 8006440:	1809      	addeq	r1, r1, r0
 8006442:	6021      	streq	r1, [r4, #0]
 8006444:	605c      	str	r4, [r3, #4]
 8006446:	e7c7      	b.n	80063d8 <_free_r+0x24>
 8006448:	bd38      	pop	{r3, r4, r5, pc}
 800644a:	bf00      	nop
 800644c:	200002c4 	.word	0x200002c4

08006450 <_malloc_r>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	1ccd      	adds	r5, r1, #3
 8006454:	f025 0503 	bic.w	r5, r5, #3
 8006458:	3508      	adds	r5, #8
 800645a:	2d0c      	cmp	r5, #12
 800645c:	bf38      	it	cc
 800645e:	250c      	movcc	r5, #12
 8006460:	2d00      	cmp	r5, #0
 8006462:	4606      	mov	r6, r0
 8006464:	db01      	blt.n	800646a <_malloc_r+0x1a>
 8006466:	42a9      	cmp	r1, r5
 8006468:	d903      	bls.n	8006472 <_malloc_r+0x22>
 800646a:	230c      	movs	r3, #12
 800646c:	6033      	str	r3, [r6, #0]
 800646e:	2000      	movs	r0, #0
 8006470:	bd70      	pop	{r4, r5, r6, pc}
 8006472:	f000 f9d7 	bl	8006824 <__malloc_lock>
 8006476:	4a23      	ldr	r2, [pc, #140]	; (8006504 <_malloc_r+0xb4>)
 8006478:	6814      	ldr	r4, [r2, #0]
 800647a:	4621      	mov	r1, r4
 800647c:	b991      	cbnz	r1, 80064a4 <_malloc_r+0x54>
 800647e:	4c22      	ldr	r4, [pc, #136]	; (8006508 <_malloc_r+0xb8>)
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	b91b      	cbnz	r3, 800648c <_malloc_r+0x3c>
 8006484:	4630      	mov	r0, r6
 8006486:	f000 f991 	bl	80067ac <_sbrk_r>
 800648a:	6020      	str	r0, [r4, #0]
 800648c:	4629      	mov	r1, r5
 800648e:	4630      	mov	r0, r6
 8006490:	f000 f98c 	bl	80067ac <_sbrk_r>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d126      	bne.n	80064e6 <_malloc_r+0x96>
 8006498:	230c      	movs	r3, #12
 800649a:	6033      	str	r3, [r6, #0]
 800649c:	4630      	mov	r0, r6
 800649e:	f000 f9c2 	bl	8006826 <__malloc_unlock>
 80064a2:	e7e4      	b.n	800646e <_malloc_r+0x1e>
 80064a4:	680b      	ldr	r3, [r1, #0]
 80064a6:	1b5b      	subs	r3, r3, r5
 80064a8:	d41a      	bmi.n	80064e0 <_malloc_r+0x90>
 80064aa:	2b0b      	cmp	r3, #11
 80064ac:	d90f      	bls.n	80064ce <_malloc_r+0x7e>
 80064ae:	600b      	str	r3, [r1, #0]
 80064b0:	50cd      	str	r5, [r1, r3]
 80064b2:	18cc      	adds	r4, r1, r3
 80064b4:	4630      	mov	r0, r6
 80064b6:	f000 f9b6 	bl	8006826 <__malloc_unlock>
 80064ba:	f104 000b 	add.w	r0, r4, #11
 80064be:	1d23      	adds	r3, r4, #4
 80064c0:	f020 0007 	bic.w	r0, r0, #7
 80064c4:	1ac3      	subs	r3, r0, r3
 80064c6:	d01b      	beq.n	8006500 <_malloc_r+0xb0>
 80064c8:	425a      	negs	r2, r3
 80064ca:	50e2      	str	r2, [r4, r3]
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	428c      	cmp	r4, r1
 80064d0:	bf0d      	iteet	eq
 80064d2:	6863      	ldreq	r3, [r4, #4]
 80064d4:	684b      	ldrne	r3, [r1, #4]
 80064d6:	6063      	strne	r3, [r4, #4]
 80064d8:	6013      	streq	r3, [r2, #0]
 80064da:	bf18      	it	ne
 80064dc:	460c      	movne	r4, r1
 80064de:	e7e9      	b.n	80064b4 <_malloc_r+0x64>
 80064e0:	460c      	mov	r4, r1
 80064e2:	6849      	ldr	r1, [r1, #4]
 80064e4:	e7ca      	b.n	800647c <_malloc_r+0x2c>
 80064e6:	1cc4      	adds	r4, r0, #3
 80064e8:	f024 0403 	bic.w	r4, r4, #3
 80064ec:	42a0      	cmp	r0, r4
 80064ee:	d005      	beq.n	80064fc <_malloc_r+0xac>
 80064f0:	1a21      	subs	r1, r4, r0
 80064f2:	4630      	mov	r0, r6
 80064f4:	f000 f95a 	bl	80067ac <_sbrk_r>
 80064f8:	3001      	adds	r0, #1
 80064fa:	d0cd      	beq.n	8006498 <_malloc_r+0x48>
 80064fc:	6025      	str	r5, [r4, #0]
 80064fe:	e7d9      	b.n	80064b4 <_malloc_r+0x64>
 8006500:	bd70      	pop	{r4, r5, r6, pc}
 8006502:	bf00      	nop
 8006504:	200002c4 	.word	0x200002c4
 8006508:	200002c8 	.word	0x200002c8

0800650c <__ssputs_r>:
 800650c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006510:	688e      	ldr	r6, [r1, #8]
 8006512:	429e      	cmp	r6, r3
 8006514:	4682      	mov	sl, r0
 8006516:	460c      	mov	r4, r1
 8006518:	4691      	mov	r9, r2
 800651a:	4698      	mov	r8, r3
 800651c:	d835      	bhi.n	800658a <__ssputs_r+0x7e>
 800651e:	898a      	ldrh	r2, [r1, #12]
 8006520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006524:	d031      	beq.n	800658a <__ssputs_r+0x7e>
 8006526:	6825      	ldr	r5, [r4, #0]
 8006528:	6909      	ldr	r1, [r1, #16]
 800652a:	1a6f      	subs	r7, r5, r1
 800652c:	6965      	ldr	r5, [r4, #20]
 800652e:	2302      	movs	r3, #2
 8006530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006534:	fb95 f5f3 	sdiv	r5, r5, r3
 8006538:	f108 0301 	add.w	r3, r8, #1
 800653c:	443b      	add	r3, r7
 800653e:	429d      	cmp	r5, r3
 8006540:	bf38      	it	cc
 8006542:	461d      	movcc	r5, r3
 8006544:	0553      	lsls	r3, r2, #21
 8006546:	d531      	bpl.n	80065ac <__ssputs_r+0xa0>
 8006548:	4629      	mov	r1, r5
 800654a:	f7ff ff81 	bl	8006450 <_malloc_r>
 800654e:	4606      	mov	r6, r0
 8006550:	b950      	cbnz	r0, 8006568 <__ssputs_r+0x5c>
 8006552:	230c      	movs	r3, #12
 8006554:	f8ca 3000 	str.w	r3, [sl]
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800655e:	81a3      	strh	r3, [r4, #12]
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006568:	463a      	mov	r2, r7
 800656a:	6921      	ldr	r1, [r4, #16]
 800656c:	f7fe f92e 	bl	80047cc <memcpy>
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	6126      	str	r6, [r4, #16]
 800657e:	6165      	str	r5, [r4, #20]
 8006580:	443e      	add	r6, r7
 8006582:	1bed      	subs	r5, r5, r7
 8006584:	6026      	str	r6, [r4, #0]
 8006586:	60a5      	str	r5, [r4, #8]
 8006588:	4646      	mov	r6, r8
 800658a:	4546      	cmp	r6, r8
 800658c:	bf28      	it	cs
 800658e:	4646      	movcs	r6, r8
 8006590:	4632      	mov	r2, r6
 8006592:	4649      	mov	r1, r9
 8006594:	6820      	ldr	r0, [r4, #0]
 8006596:	f000 f92b 	bl	80067f0 <memmove>
 800659a:	68a3      	ldr	r3, [r4, #8]
 800659c:	1b9b      	subs	r3, r3, r6
 800659e:	60a3      	str	r3, [r4, #8]
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	441e      	add	r6, r3
 80065a4:	6026      	str	r6, [r4, #0]
 80065a6:	2000      	movs	r0, #0
 80065a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ac:	462a      	mov	r2, r5
 80065ae:	f000 f93b 	bl	8006828 <_realloc_r>
 80065b2:	4606      	mov	r6, r0
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d1e1      	bne.n	800657c <__ssputs_r+0x70>
 80065b8:	6921      	ldr	r1, [r4, #16]
 80065ba:	4650      	mov	r0, sl
 80065bc:	f7ff fefa 	bl	80063b4 <_free_r>
 80065c0:	e7c7      	b.n	8006552 <__ssputs_r+0x46>
	...

080065c4 <_svfiprintf_r>:
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	b09d      	sub	sp, #116	; 0x74
 80065ca:	4680      	mov	r8, r0
 80065cc:	9303      	str	r3, [sp, #12]
 80065ce:	898b      	ldrh	r3, [r1, #12]
 80065d0:	061c      	lsls	r4, r3, #24
 80065d2:	460d      	mov	r5, r1
 80065d4:	4616      	mov	r6, r2
 80065d6:	d50f      	bpl.n	80065f8 <_svfiprintf_r+0x34>
 80065d8:	690b      	ldr	r3, [r1, #16]
 80065da:	b96b      	cbnz	r3, 80065f8 <_svfiprintf_r+0x34>
 80065dc:	2140      	movs	r1, #64	; 0x40
 80065de:	f7ff ff37 	bl	8006450 <_malloc_r>
 80065e2:	6028      	str	r0, [r5, #0]
 80065e4:	6128      	str	r0, [r5, #16]
 80065e6:	b928      	cbnz	r0, 80065f4 <_svfiprintf_r+0x30>
 80065e8:	230c      	movs	r3, #12
 80065ea:	f8c8 3000 	str.w	r3, [r8]
 80065ee:	f04f 30ff 	mov.w	r0, #4294967295
 80065f2:	e0c5      	b.n	8006780 <_svfiprintf_r+0x1bc>
 80065f4:	2340      	movs	r3, #64	; 0x40
 80065f6:	616b      	str	r3, [r5, #20]
 80065f8:	2300      	movs	r3, #0
 80065fa:	9309      	str	r3, [sp, #36]	; 0x24
 80065fc:	2320      	movs	r3, #32
 80065fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006602:	2330      	movs	r3, #48	; 0x30
 8006604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006608:	f04f 0b01 	mov.w	fp, #1
 800660c:	4637      	mov	r7, r6
 800660e:	463c      	mov	r4, r7
 8006610:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d13c      	bne.n	8006692 <_svfiprintf_r+0xce>
 8006618:	ebb7 0a06 	subs.w	sl, r7, r6
 800661c:	d00b      	beq.n	8006636 <_svfiprintf_r+0x72>
 800661e:	4653      	mov	r3, sl
 8006620:	4632      	mov	r2, r6
 8006622:	4629      	mov	r1, r5
 8006624:	4640      	mov	r0, r8
 8006626:	f7ff ff71 	bl	800650c <__ssputs_r>
 800662a:	3001      	adds	r0, #1
 800662c:	f000 80a3 	beq.w	8006776 <_svfiprintf_r+0x1b2>
 8006630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006632:	4453      	add	r3, sl
 8006634:	9309      	str	r3, [sp, #36]	; 0x24
 8006636:	783b      	ldrb	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 809c 	beq.w	8006776 <_svfiprintf_r+0x1b2>
 800663e:	2300      	movs	r3, #0
 8006640:	f04f 32ff 	mov.w	r2, #4294967295
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	9307      	str	r3, [sp, #28]
 8006648:	9205      	str	r2, [sp, #20]
 800664a:	9306      	str	r3, [sp, #24]
 800664c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006650:	931a      	str	r3, [sp, #104]	; 0x68
 8006652:	2205      	movs	r2, #5
 8006654:	7821      	ldrb	r1, [r4, #0]
 8006656:	4850      	ldr	r0, [pc, #320]	; (8006798 <_svfiprintf_r+0x1d4>)
 8006658:	f7f9 fdc2 	bl	80001e0 <memchr>
 800665c:	1c67      	adds	r7, r4, #1
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	b9d8      	cbnz	r0, 800669a <_svfiprintf_r+0xd6>
 8006662:	06d9      	lsls	r1, r3, #27
 8006664:	bf44      	itt	mi
 8006666:	2220      	movmi	r2, #32
 8006668:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800666c:	071a      	lsls	r2, r3, #28
 800666e:	bf44      	itt	mi
 8006670:	222b      	movmi	r2, #43	; 0x2b
 8006672:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006676:	7822      	ldrb	r2, [r4, #0]
 8006678:	2a2a      	cmp	r2, #42	; 0x2a
 800667a:	d016      	beq.n	80066aa <_svfiprintf_r+0xe6>
 800667c:	9a07      	ldr	r2, [sp, #28]
 800667e:	2100      	movs	r1, #0
 8006680:	200a      	movs	r0, #10
 8006682:	4627      	mov	r7, r4
 8006684:	3401      	adds	r4, #1
 8006686:	783b      	ldrb	r3, [r7, #0]
 8006688:	3b30      	subs	r3, #48	; 0x30
 800668a:	2b09      	cmp	r3, #9
 800668c:	d951      	bls.n	8006732 <_svfiprintf_r+0x16e>
 800668e:	b1c9      	cbz	r1, 80066c4 <_svfiprintf_r+0x100>
 8006690:	e011      	b.n	80066b6 <_svfiprintf_r+0xf2>
 8006692:	2b25      	cmp	r3, #37	; 0x25
 8006694:	d0c0      	beq.n	8006618 <_svfiprintf_r+0x54>
 8006696:	4627      	mov	r7, r4
 8006698:	e7b9      	b.n	800660e <_svfiprintf_r+0x4a>
 800669a:	4a3f      	ldr	r2, [pc, #252]	; (8006798 <_svfiprintf_r+0x1d4>)
 800669c:	1a80      	subs	r0, r0, r2
 800669e:	fa0b f000 	lsl.w	r0, fp, r0
 80066a2:	4318      	orrs	r0, r3
 80066a4:	9004      	str	r0, [sp, #16]
 80066a6:	463c      	mov	r4, r7
 80066a8:	e7d3      	b.n	8006652 <_svfiprintf_r+0x8e>
 80066aa:	9a03      	ldr	r2, [sp, #12]
 80066ac:	1d11      	adds	r1, r2, #4
 80066ae:	6812      	ldr	r2, [r2, #0]
 80066b0:	9103      	str	r1, [sp, #12]
 80066b2:	2a00      	cmp	r2, #0
 80066b4:	db01      	blt.n	80066ba <_svfiprintf_r+0xf6>
 80066b6:	9207      	str	r2, [sp, #28]
 80066b8:	e004      	b.n	80066c4 <_svfiprintf_r+0x100>
 80066ba:	4252      	negs	r2, r2
 80066bc:	f043 0302 	orr.w	r3, r3, #2
 80066c0:	9207      	str	r2, [sp, #28]
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	783b      	ldrb	r3, [r7, #0]
 80066c6:	2b2e      	cmp	r3, #46	; 0x2e
 80066c8:	d10e      	bne.n	80066e8 <_svfiprintf_r+0x124>
 80066ca:	787b      	ldrb	r3, [r7, #1]
 80066cc:	2b2a      	cmp	r3, #42	; 0x2a
 80066ce:	f107 0101 	add.w	r1, r7, #1
 80066d2:	d132      	bne.n	800673a <_svfiprintf_r+0x176>
 80066d4:	9b03      	ldr	r3, [sp, #12]
 80066d6:	1d1a      	adds	r2, r3, #4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	9203      	str	r2, [sp, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bfb8      	it	lt
 80066e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80066e4:	3702      	adds	r7, #2
 80066e6:	9305      	str	r3, [sp, #20]
 80066e8:	4c2c      	ldr	r4, [pc, #176]	; (800679c <_svfiprintf_r+0x1d8>)
 80066ea:	7839      	ldrb	r1, [r7, #0]
 80066ec:	2203      	movs	r2, #3
 80066ee:	4620      	mov	r0, r4
 80066f0:	f7f9 fd76 	bl	80001e0 <memchr>
 80066f4:	b138      	cbz	r0, 8006706 <_svfiprintf_r+0x142>
 80066f6:	2340      	movs	r3, #64	; 0x40
 80066f8:	1b00      	subs	r0, r0, r4
 80066fa:	fa03 f000 	lsl.w	r0, r3, r0
 80066fe:	9b04      	ldr	r3, [sp, #16]
 8006700:	4303      	orrs	r3, r0
 8006702:	9304      	str	r3, [sp, #16]
 8006704:	3701      	adds	r7, #1
 8006706:	7839      	ldrb	r1, [r7, #0]
 8006708:	4825      	ldr	r0, [pc, #148]	; (80067a0 <_svfiprintf_r+0x1dc>)
 800670a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800670e:	2206      	movs	r2, #6
 8006710:	1c7e      	adds	r6, r7, #1
 8006712:	f7f9 fd65 	bl	80001e0 <memchr>
 8006716:	2800      	cmp	r0, #0
 8006718:	d035      	beq.n	8006786 <_svfiprintf_r+0x1c2>
 800671a:	4b22      	ldr	r3, [pc, #136]	; (80067a4 <_svfiprintf_r+0x1e0>)
 800671c:	b9fb      	cbnz	r3, 800675e <_svfiprintf_r+0x19a>
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	3307      	adds	r3, #7
 8006722:	f023 0307 	bic.w	r3, r3, #7
 8006726:	3308      	adds	r3, #8
 8006728:	9303      	str	r3, [sp, #12]
 800672a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672c:	444b      	add	r3, r9
 800672e:	9309      	str	r3, [sp, #36]	; 0x24
 8006730:	e76c      	b.n	800660c <_svfiprintf_r+0x48>
 8006732:	fb00 3202 	mla	r2, r0, r2, r3
 8006736:	2101      	movs	r1, #1
 8006738:	e7a3      	b.n	8006682 <_svfiprintf_r+0xbe>
 800673a:	2300      	movs	r3, #0
 800673c:	9305      	str	r3, [sp, #20]
 800673e:	4618      	mov	r0, r3
 8006740:	240a      	movs	r4, #10
 8006742:	460f      	mov	r7, r1
 8006744:	3101      	adds	r1, #1
 8006746:	783a      	ldrb	r2, [r7, #0]
 8006748:	3a30      	subs	r2, #48	; 0x30
 800674a:	2a09      	cmp	r2, #9
 800674c:	d903      	bls.n	8006756 <_svfiprintf_r+0x192>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0ca      	beq.n	80066e8 <_svfiprintf_r+0x124>
 8006752:	9005      	str	r0, [sp, #20]
 8006754:	e7c8      	b.n	80066e8 <_svfiprintf_r+0x124>
 8006756:	fb04 2000 	mla	r0, r4, r0, r2
 800675a:	2301      	movs	r3, #1
 800675c:	e7f1      	b.n	8006742 <_svfiprintf_r+0x17e>
 800675e:	ab03      	add	r3, sp, #12
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	462a      	mov	r2, r5
 8006764:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <_svfiprintf_r+0x1e4>)
 8006766:	a904      	add	r1, sp, #16
 8006768:	4640      	mov	r0, r8
 800676a:	f7fe f8d9 	bl	8004920 <_printf_float>
 800676e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006772:	4681      	mov	r9, r0
 8006774:	d1d9      	bne.n	800672a <_svfiprintf_r+0x166>
 8006776:	89ab      	ldrh	r3, [r5, #12]
 8006778:	065b      	lsls	r3, r3, #25
 800677a:	f53f af38 	bmi.w	80065ee <_svfiprintf_r+0x2a>
 800677e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006780:	b01d      	add	sp, #116	; 0x74
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006786:	ab03      	add	r3, sp, #12
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	462a      	mov	r2, r5
 800678c:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <_svfiprintf_r+0x1e4>)
 800678e:	a904      	add	r1, sp, #16
 8006790:	4640      	mov	r0, r8
 8006792:	f7fe fb7b 	bl	8004e8c <_printf_i>
 8006796:	e7ea      	b.n	800676e <_svfiprintf_r+0x1aa>
 8006798:	08006b34 	.word	0x08006b34
 800679c:	08006b3a 	.word	0x08006b3a
 80067a0:	08006b3e 	.word	0x08006b3e
 80067a4:	08004921 	.word	0x08004921
 80067a8:	0800650d 	.word	0x0800650d

080067ac <_sbrk_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4c06      	ldr	r4, [pc, #24]	; (80067c8 <_sbrk_r+0x1c>)
 80067b0:	2300      	movs	r3, #0
 80067b2:	4605      	mov	r5, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	f000 f872 	bl	80068a0 <_sbrk>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_sbrk_r+0x1a>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_sbrk_r+0x1a>
 80067c4:	602b      	str	r3, [r5, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20000a0c 	.word	0x20000a0c

080067cc <__ascii_mbtowc>:
 80067cc:	b082      	sub	sp, #8
 80067ce:	b901      	cbnz	r1, 80067d2 <__ascii_mbtowc+0x6>
 80067d0:	a901      	add	r1, sp, #4
 80067d2:	b142      	cbz	r2, 80067e6 <__ascii_mbtowc+0x1a>
 80067d4:	b14b      	cbz	r3, 80067ea <__ascii_mbtowc+0x1e>
 80067d6:	7813      	ldrb	r3, [r2, #0]
 80067d8:	600b      	str	r3, [r1, #0]
 80067da:	7812      	ldrb	r2, [r2, #0]
 80067dc:	1c10      	adds	r0, r2, #0
 80067de:	bf18      	it	ne
 80067e0:	2001      	movne	r0, #1
 80067e2:	b002      	add	sp, #8
 80067e4:	4770      	bx	lr
 80067e6:	4610      	mov	r0, r2
 80067e8:	e7fb      	b.n	80067e2 <__ascii_mbtowc+0x16>
 80067ea:	f06f 0001 	mvn.w	r0, #1
 80067ee:	e7f8      	b.n	80067e2 <__ascii_mbtowc+0x16>

080067f0 <memmove>:
 80067f0:	4288      	cmp	r0, r1
 80067f2:	b510      	push	{r4, lr}
 80067f4:	eb01 0302 	add.w	r3, r1, r2
 80067f8:	d803      	bhi.n	8006802 <memmove+0x12>
 80067fa:	1e42      	subs	r2, r0, #1
 80067fc:	4299      	cmp	r1, r3
 80067fe:	d10c      	bne.n	800681a <memmove+0x2a>
 8006800:	bd10      	pop	{r4, pc}
 8006802:	4298      	cmp	r0, r3
 8006804:	d2f9      	bcs.n	80067fa <memmove+0xa>
 8006806:	1881      	adds	r1, r0, r2
 8006808:	1ad2      	subs	r2, r2, r3
 800680a:	42d3      	cmn	r3, r2
 800680c:	d100      	bne.n	8006810 <memmove+0x20>
 800680e:	bd10      	pop	{r4, pc}
 8006810:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006814:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006818:	e7f7      	b.n	800680a <memmove+0x1a>
 800681a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800681e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006822:	e7eb      	b.n	80067fc <memmove+0xc>

08006824 <__malloc_lock>:
 8006824:	4770      	bx	lr

08006826 <__malloc_unlock>:
 8006826:	4770      	bx	lr

08006828 <_realloc_r>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	4607      	mov	r7, r0
 800682c:	4614      	mov	r4, r2
 800682e:	460e      	mov	r6, r1
 8006830:	b921      	cbnz	r1, 800683c <_realloc_r+0x14>
 8006832:	4611      	mov	r1, r2
 8006834:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006838:	f7ff be0a 	b.w	8006450 <_malloc_r>
 800683c:	b922      	cbnz	r2, 8006848 <_realloc_r+0x20>
 800683e:	f7ff fdb9 	bl	80063b4 <_free_r>
 8006842:	4625      	mov	r5, r4
 8006844:	4628      	mov	r0, r5
 8006846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006848:	f000 f821 	bl	800688e <_malloc_usable_size_r>
 800684c:	4284      	cmp	r4, r0
 800684e:	d90f      	bls.n	8006870 <_realloc_r+0x48>
 8006850:	4621      	mov	r1, r4
 8006852:	4638      	mov	r0, r7
 8006854:	f7ff fdfc 	bl	8006450 <_malloc_r>
 8006858:	4605      	mov	r5, r0
 800685a:	2800      	cmp	r0, #0
 800685c:	d0f2      	beq.n	8006844 <_realloc_r+0x1c>
 800685e:	4631      	mov	r1, r6
 8006860:	4622      	mov	r2, r4
 8006862:	f7fd ffb3 	bl	80047cc <memcpy>
 8006866:	4631      	mov	r1, r6
 8006868:	4638      	mov	r0, r7
 800686a:	f7ff fda3 	bl	80063b4 <_free_r>
 800686e:	e7e9      	b.n	8006844 <_realloc_r+0x1c>
 8006870:	4635      	mov	r5, r6
 8006872:	e7e7      	b.n	8006844 <_realloc_r+0x1c>

08006874 <__ascii_wctomb>:
 8006874:	b149      	cbz	r1, 800688a <__ascii_wctomb+0x16>
 8006876:	2aff      	cmp	r2, #255	; 0xff
 8006878:	bf85      	ittet	hi
 800687a:	238a      	movhi	r3, #138	; 0x8a
 800687c:	6003      	strhi	r3, [r0, #0]
 800687e:	700a      	strbls	r2, [r1, #0]
 8006880:	f04f 30ff 	movhi.w	r0, #4294967295
 8006884:	bf98      	it	ls
 8006886:	2001      	movls	r0, #1
 8006888:	4770      	bx	lr
 800688a:	4608      	mov	r0, r1
 800688c:	4770      	bx	lr

0800688e <_malloc_usable_size_r>:
 800688e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006892:	2800      	cmp	r0, #0
 8006894:	f1a0 0004 	sub.w	r0, r0, #4
 8006898:	bfbc      	itt	lt
 800689a:	580b      	ldrlt	r3, [r1, r0]
 800689c:	18c0      	addlt	r0, r0, r3
 800689e:	4770      	bx	lr

080068a0 <_sbrk>:
 80068a0:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <_sbrk+0x14>)
 80068a2:	6819      	ldr	r1, [r3, #0]
 80068a4:	4602      	mov	r2, r0
 80068a6:	b909      	cbnz	r1, 80068ac <_sbrk+0xc>
 80068a8:	4903      	ldr	r1, [pc, #12]	; (80068b8 <_sbrk+0x18>)
 80068aa:	6019      	str	r1, [r3, #0]
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	4402      	add	r2, r0
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	4770      	bx	lr
 80068b4:	200002cc 	.word	0x200002cc
 80068b8:	20000a10 	.word	0x20000a10

080068bc <_init>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	bf00      	nop
 80068c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c2:	bc08      	pop	{r3}
 80068c4:	469e      	mov	lr, r3
 80068c6:	4770      	bx	lr

080068c8 <_fini>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr
